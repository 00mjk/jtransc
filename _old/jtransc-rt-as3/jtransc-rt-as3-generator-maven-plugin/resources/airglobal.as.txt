native public const AS3:* = "http://adobe.com/AS3/2006/builtin";

[native(cls="ObjectClass",classgc="exact",methods="auto",construct="override")]
public dynamic class Object
{
  native public function Object():*;
  native AS3 function isPrototypeOf(V:* = null):Boolean;
  native AS3 function hasOwnProperty(V:* = null):Boolean;

  native AS3 function propertyIsEnumerable(V:* = null):Boolean;
  static native public const length:int = 1;
  static native private final function _hasOwnProperty(o:*,V:String):Boolean;
  static native private final function _propertyIsEnumerable(o:*,V:String):Boolean;
  static native protected final function _setPropertyIsEnumerable(o:*,V:String,enumerable:Boolean):void;

  static native private final function _isPrototypeOf(o:*,V:*):Boolean;
  static native private final function _toString(o:*):String;
  static native protected final function _dontEnumPrototype(proto:Object):void;
  static native public final function init():*;
  [API("708")]
  static native public final function _init():*;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="ClassClass",gc="exact",instance="ClassClosure",methods="auto",construct="instance")]
public dynamic class Class extends Object
{
  native public function Class():*;
  native public final function get prototype():*;
  static native public const length:int = 1;
}

[native(cls="FunctionClass",gc="exact",instance="FunctionObject",methods="auto",construct="instance")]
public dynamic class Function extends Object
{
  native public function Function():*;

  native public function get prototype():*;
  native public function set prototype(p:*):*;
  native public function get length():int;
  native AS3 function call(thisArg:* = null,... rest):*;
  native AS3 function apply(thisArg:* = null,argArray:* = null):*;

  static native public const length:int = 1;
  [cppcall]
  [API("708")]
  static native public final function createEmptyFunction():Function;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="MethodClosureClass",gc="exact",instance="MethodClosure",methods="auto",construct="instance")]
private final class MethodClosure extends Function
{
  native private function MethodClosure():*;
  native public override function get prototype():*;

  native public override function set prototype(p:*):*;
}

[native(cls="NamespaceClass",classgc="exact",instance="Namespace",methods="auto",construct="override")]
public final class Namespace extends Object
{
  native public function Namespace(prefix:* = null,uri:* = null):*;
  native public function get prefix():*;
  native public function get uri():String;
  native AS3 function valueOf():String;

  native AS3 function toString():String;
  static native public const length:* = 2;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="BooleanClass",classgc="exact",instance="bool",methods="auto",construct="override")]
public final class Boolean extends Object
{
  native public function Boolean(value:* = null):*;
  native AS3 function toString():String;

  native AS3 function valueOf():Boolean;
  static native public const length:int = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="NumberClass",classgc="exact",instance="double",methods="auto",construct="override")]
public final class Number extends Object
{
  native public function Number(value:* = 0):*;
  native AS3 function toString(radix:* = 10):String;

  native AS3 function valueOf():Number;
  native AS3 function toExponential(p:* = 0):String;
  native AS3 function toPrecision(p:* = 0):String;
  native AS3 function toFixed(p:* = 0):String;
  static native public const length:int = 1;

  static native public const NaN:Number = NaN;
  static native public const NEGATIVE_INFINITY:Number = -Infinity;
  static native public const POSITIVE_INFINITY:Number = Infinity;
  static native public const MIN_VALUE:Number;
  static native public const MAX_VALUE:Number = NaN;

  [API("680")]
  static native public const E:Number = NaN;
  [API("680")]
  static native public const LN10:Number = NaN;
  [API("680")]
  static native public const LN2:Number = NaN;
  [API("680")]
  static native public const LOG10E:Number = 0.4342944819032518;
  [API("680")]
  static native public const LOG2E:Number = 1.4426950408889634;

  [API("680")]
  static native public const PI:Number = 3.141592653589793;
  [API("680")]
  static native public const SQRT1_2:Number = 0.7071067811865476;
  [API("680")]
  static native public const SQRT2:Number = 1.4142135623730951;
  [API("680")]
  static native public final function abs(x:Number):Number;
  [API("680")]
  static native public final function acos(x:Number):Number;

  [API("680")]
  static native public final function asin(x:Number):Number;
  [API("680")]
  static native public final function atan(x:Number):Number;
  [API("680")]
  static native public final function ceil(x:Number):Number;
  [API("680")]
  static native public final function cos(x:Number):Number;
  [API("680")]
  static native public final function exp(x:Number):Number;

  [API("680")]
  static native public final function floor(x:Number):Number;
  [API("680")]
  static native public final function log(x:Number):Number;
  [API("680")]
  static native public final function round(x:Number):Number;
  [API("680")]
  static native public final function sin(x:Number):Number;
  [API("680")]
  static native public final function sqrt(x:Number):Number;

  [API("680")]
  static native public final function tan(x:Number):Number;
  [API("680")]
  static native public final function atan2(y:Number,x:Number):Number;
  [API("680")]
  static native public final function pow(x:Number,y:Number):Number;
  [API("680")]
  static native public final function max(x:Number = -Infinity,y:Number = -Infinity,... rest):Number;
  [API("680")]
  static native public final function min(x:Number = Infinity,y:Number = Infinity,... rest):Number;

  [API("680")]
  static native public final function random():Number;
  static native private const DTOSTR_FIXED:int = 1;
  static native private const DTOSTR_PRECISION:int = 2;
  static native private const DTOSTR_EXPONENTIAL:int = 3;
  static native private final function _numberToString(n:Number,radix:int):String;

  static native private final function _convert(n:Number,precision:int,mode:int):String;
  static native private final function _minValue():Number;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="IntClass",classgc="exact",instance="int32_t",methods="auto",construct="override")]
public final class int extends Object
{
  native public function int(value:* = 0):*;
  native AS3 function toString(radix:* = 10):String;

  native AS3 function valueOf():int;
  native AS3 function toExponential(p:* = 0):String;
  native AS3 function toPrecision(p:* = 0):String;
  native AS3 function toFixed(p:* = 0):String;
  static native public const MIN_VALUE:int = -2147483648;

  static native public const MAX_VALUE:int = 2147483647;
  static native public const length:int = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="UIntClass",classgc="exact",instance="uint32_t",methods="auto",construct="override")]
public final class uint extends Object
{
  native public function uint(value:* = 0):*;
  native AS3 function toString(radix:* = 10):String;

  native AS3 function valueOf():uint;
  native AS3 function toExponential(p:* = 0):String;
  native AS3 function toPrecision(p:* = 0):String;
  native AS3 function toFixed(p:* = 0):String;
  static native public const MIN_VALUE:uint = 0;

  static native public const MAX_VALUE:uint = NaN;
  static native public const length:int = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="StringClass",classgc="exact",instance="String",methods="auto",construct="override")]
public final class String extends Object
{
  native public function String(value:* = ""):*;
  native public function get length():int;

  native private function _indexOf(s:String,i:int = 0):int;
  native AS3 function indexOf(s:String = undefined,i:Number = 0):int;
  native private function _lastIndexOf(s:String,i:int = 2147483647):int;
  native AS3 function lastIndexOf(s:String = undefined,i:Number = 2147483647):int;
  native AS3 function charAt(i:Number = 0):String;

  native AS3 function charCodeAt(i:Number = 0):Number;
  native AS3 function concat(... rest):String;
  native AS3 function localeCompare(other:* = null):int;
  native AS3 function match(p:* = null):Array;
  native AS3 function replace(p:* = null,repl:* = null):String;

  native AS3 function search(p:* = null):int;
  native private function _slice(start:int = 0,end:int = 2147483647):String;
  native AS3 function slice(start:Number = 0,end:Number = 2147483647):String;
  native AS3 function split(delim:* = null,limit:* = NaN):Array;
  native private function _substring(start:int = 0,end:int = 2147483647):String;

  native AS3 function substring(start:Number = 0,end:Number = 2147483647):String;
  native private function _substr(start:int = 0,end:int = 2147483647):String;
  native AS3 function substr(start:Number = 0,len:Number = 2147483647):String;
  native AS3 function toLowerCase():String;
  native AS3 function toLocaleLowerCase():String;

  native AS3 function toUpperCase():String;
  native AS3 function toLocaleUpperCase():String;
  native AS3 function toString():String;
  native AS3 function valueOf():String;
  static native public const length:int = 1;

  static native AS3 final function fromCharCode(... rest):String;
  static native private final function _match(s:String,p:*):Array;
  static native private final function _replace(s:String,p:*,repl:*):String;
  static native private final function _search(s:String,p:*):int;
  static native private final function _split(s:String,delim:*,limit:uint):Array;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="ArrayClass",gc="exact",instance="ArrayObject",methods="auto")]
public dynamic class Array extends Object
{
  native public function Array(... rest):*;
  native public function get length():uint;
  native public function set length(newLength:uint):*;
  native private function set_length(newLength:*,altLength:uint):*;

  native AS3 function join(sep:* = null):String;
  native AS3 function pop():*;
  native AS3 function push(... rest):uint;
  native AS3 function reverse():Array;
  native AS3 function concat(... rest):Array;

  native AS3 function shift():*;
  native AS3 function slice(A:* = 0,B:* = NaN):Array;
  native AS3 function unshift(... rest):uint;
  native AS3 function splice(... rest):*;
  native AS3 function sort(... rest):*;

  native AS3 function sortOn(names:*,options:* = 0,... rest):*;
  native AS3 function indexOf(searchElement:*,fromIndex:* = 0):int;
  native AS3 function lastIndexOf(searchElement:*,fromIndex:* = 2147483647):int;
  native AS3 function every(callback:Function,thisObject:* = null):Boolean;
  native AS3 function filter(callback:Function,thisObject:* = null):Array;

  native AS3 function forEach(callback:Function,thisObject:* = null):void;
  native AS3 function map(callback:Function,thisObject:* = null):Array;
  native AS3 function some(callback:Function,thisObject:* = null):Boolean;
  static native public const CASEINSENSITIVE:uint = 1;
  static native public const DESCENDING:uint = 2;

  static native public const UNIQUESORT:uint = 4;
  static native public const RETURNINDEXEDARRAY:uint = 8;
  static native public const NUMERIC:uint = 16;
  static native public const length:int = 1;
  static native private final function _join(o:*,sep:*):String;

  static native private final function _pop(o:*):*;
  static native private final function _reverse(o:*):*;
  static native private final function _concat(o:*,args:Array):Array;
  static native private final function _shift(o:*):*;
  static native private final function _slice(o:*,A:Number,B:Number):Array;

  static native private final function _unshift(o:*,args:Array):uint;
  static native private final function _splice(o:*,args:Array):Array;
  static native private final function _sort(o:*,args:Array):*;
  static native private final function _sortOn(o:*,names:*,options:*):*;
  static native private final function _indexOf(o:*,searchElement:*,fromIndex:int):int;

  static native private final function _lastIndexOf(o:*,searchElement:*,fromIndex:int = 0):int;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _filter(o:*,callback:Function,thisObject:*):Array;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _map(o:*,callback:Function,thisObject:*):Array;

  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
[API("708")]
[native("Toplevel::bugzilla")]
native public function bugzilla(n:int):Boolean;
[native("Toplevel::decodeURI")]
native public function decodeURI(uri:String = undefined):String;
[native("Toplevel::decodeURIComponent")]
native public function decodeURIComponent(uri:String = undefined):String;

[native("Toplevel::encodeURI")]
native public function encodeURI(uri:String = undefined):String;
[native("Toplevel::encodeURIComponent")]
native public function encodeURIComponent(uri:String = undefined):String;
[native("Toplevel::isNaN")]
native public function isNaN(n:Number = 0):Boolean;
[native("Toplevel::isFinite")]
native public function isFinite(n:Number = 0):Boolean;
[native("Toplevel::parseInt")]
native public function parseInt(s:String = NaN,radix:int = 0):Number;

[native("Toplevel::parseFloat")]
native public function parseFloat(str:String = NaN):Number;
[native("Toplevel::escape")]
native public function escape(s:String = undefined):String;
[native("Toplevel::unescape")]
native public function unescape(s:String = undefined):String;
[native("Toplevel::isXMLName")]
native public function isXMLName(str:* = null):Boolean;
native public const NaN:Number = NaN;

native public const Infinity:Number = Infinity;
native public const undefined:*;

[native(cls="VectorClass",gc="exact",instance="ObjectVectorObject",methods="auto",construct="override")]
__AS3__$vec final dynamic class Vector extends Object
{
  native public function Vector():*;
}

[native(cls="ObjectVectorClass",gc="exact",instance="ObjectVectorObject",methods="auto",construct="override")]
__AS3__$vec final dynamic class Vector$object extends Object
{
  native public function Vector$object(length:uint = 0,fixed:Boolean = false):*;
  native private function newThisType():Vector$object;

  native public function get length():uint;
  native public function set length(value:uint):*;
  native public function set fixed(f:Boolean):*;
  native public function get fixed():Boolean;
  native AS3 function toString():String;

  native AS3 function toLocaleString():String;
  native AS3 function join(separator:String = ","):String;
  native private function _concat(items:Array):*;
  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;

  native AS3 function map(mapper:Function,thisObj:Object = null):*;
  native AS3 function push(... rest):uint;
  native private function _reverse():void;
  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native private function _slice(start:Number = 0,end:Number = 2147483647):*;

  native private function _splice(start:*,deleteCount:*,items:Array):*;
  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:uint):void;
  native AS3 function unshift(... rest):uint;
  native private function _filter(callback:Function,thisObject:*):*;
  native private function _map(callback:Function,thisObject:*):*;

  native private function clamp(val:Number,len:uint):uint;
  native AS3 function concat(... rest):Vector$object;
  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$object;
  native AS3 function pop():*;
  native AS3 function reverse():Vector$object;

  native AS3 function shift():*;
  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$object;
  native AS3 function sort(comparefn:*):Vector$object;
  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$object;
  native AS3 function indexOf(value:Object,from:Number = 0):Number;

  native AS3 function lastIndexOf(value:Object,from:Number = 2147483647):Number;
  static native private final function castToThisType(item:*):Vector$object;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;

  static native private final function _sort(o:*,args:Array):*;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="IntVectorClass",gc="exact",instance="IntVectorObject",methods="auto",construct="override")]
__AS3__$vec final dynamic class Vector$int extends Object
{
  native public function Vector$int(length:uint = 0,fixed:Boolean = false):*;
  native private function newThisType():Vector$int;
  native public function get length():uint;

  native public function set length(value:uint):*;
  native public function set fixed(f:Boolean):*;
  native public function get fixed():Boolean;
  native AS3 function toString():String;
  native AS3 function toLocaleString():String;

  native AS3 function join(separator:String = ","):String;
  native private function _concat(items:Array):*;
  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;
  native AS3 function map(mapper:Function,thisObj:Object = null):*;

  native AS3 function push(... rest):uint;
  native private function _reverse():void;
  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native private function _slice(start:Number = 0,end:Number = 2147483647):*;
  native private function _splice(start:*,deleteCount:*,items:Array):*;

  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:uint):void;
  native AS3 function unshift(... rest):uint;
  native private function _filter(callback:Function,thisObject:*):*;
  native private function _map(callback:Function,thisObject:*):*;
  native private function clamp(val:Number,len:uint):uint;

  native AS3 function concat(... rest):Vector$int;
  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$int;
  native AS3 function pop():int;
  native AS3 function reverse():Vector$int;
  native AS3 function shift():int;

  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$int;
  native AS3 function sort(comparefn:*):Vector$int;
  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$int;
  native AS3 function indexOf(value:int,from:Number = 0):Number;
  native AS3 function lastIndexOf(value:int,from:Number = 2147483647):Number;

  static native private final function castToThisType(item:*):Vector$int;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _sort(o:*,args:Array):*;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="UIntVectorClass",gc="exact",instance="UIntVectorObject",methods="auto",construct="override")]
__AS3__$vec final dynamic class Vector$uint extends Object
{
  native public function Vector$uint(length:uint = 0,fixed:Boolean = false):*;
  native private function newThisType():Vector$uint;
  native public function get length():uint;
  native public function set length(value:uint):*;

  native public function set fixed(f:Boolean):*;
  native public function get fixed():Boolean;
  native AS3 function toString():String;
  native AS3 function toLocaleString():String;
  native AS3 function join(separator:String = ","):String;

  native private function _concat(items:Array):*;
  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;
  native AS3 function map(mapper:Function,thisObj:Object = null):*;
  native AS3 function push(... rest):uint;

  native private function _reverse():void;
  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native private function _slice(start:Number = 0,end:Number = 2147483647):*;
  native private function _splice(start:*,deleteCount:*,items:Array):*;
  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:uint):void;

  native AS3 function unshift(... rest):uint;
  native private function _filter(callback:Function,thisObject:*):*;
  native private function _map(callback:Function,thisObject:*):*;
  native private function clamp(val:Number,len:uint):uint;
  native AS3 function concat(... rest):Vector$uint;

  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$uint;
  native AS3 function pop():uint;
  native AS3 function reverse():Vector$uint;
  native AS3 function shift():uint;
  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$uint;

  native AS3 function sort(comparefn:*):Vector$uint;
  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$uint;
  native AS3 function indexOf(value:uint,from:Number = 0):Number;
  native AS3 function lastIndexOf(value:uint,from:Number = 2147483647):Number;
  static native private final function castToThisType(item:*):Vector$uint;

  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _sort(o:*,args:Array):*;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="DoubleVectorClass",gc="exact",instance="DoubleVectorObject",methods="auto",construct="override")]
__AS3__$vec final dynamic class Vector$double extends Object
{

  native public function Vector$double(length:uint = 0,fixed:Boolean = false):*;
  native private function newThisType():Vector$double;
  native public function get length():uint;
  native public function set length(value:uint):*;
  native public function set fixed(f:Boolean):*;

  native public function get fixed():Boolean;
  native AS3 function toString():String;
  native AS3 function toLocaleString():String;
  native AS3 function join(separator:String = ","):String;
  native private function _concat(items:Array):*;

  native AS3 function every(checker:Function,thisObj:Object = null):Boolean;
  native AS3 function forEach(eacher:Function,thisObj:Object = null):void;
  native AS3 function map(mapper:Function,thisObj:Object = null):*;
  native AS3 function push(... rest):uint;
  native private function _reverse():void;

  native AS3 function some(checker:*,thisObj:Object = null):Boolean;
  native private function _slice(start:Number = 0,end:Number = 2147483647):*;
  native private function _splice(start:*,deleteCount:*,items:Array):*;
  native private function _spliceHelper(insertpoint:uint,insertcount:uint,deleteCount:uint,args:Object,offset:uint):void;
  native AS3 function unshift(... rest):uint;

  native private function _filter(callback:Function,thisObject:*):*;
  native private function _map(callback:Function,thisObject:*):*;
  native private function clamp(val:Number,len:uint):uint;
  native AS3 function concat(... rest):Vector$double;
  native AS3 function filter(checker:Function,thisObj:Object = null):Vector$double;

  native AS3 function pop():Number;
  native AS3 function reverse():Vector$double;
  native AS3 function shift():Number;
  native AS3 function slice(start:Number = 0,end:Number = 2147483647):Vector$double;
  native AS3 function sort(comparefn:*):Vector$double;

  native AS3 function splice(start:Number,deleteCount:Number,... rest):Vector$double;
  native AS3 function indexOf(value:Number,from:Number = 0):Number;
  native AS3 function lastIndexOf(value:Number,from:Number = 2147483647):Number;
  static native private final function castToThisType(item:*):Vector$double;
  static native private final function _every(o:*,callback:Function,thisObject:*):Boolean;

  static native private final function _forEach(o:*,callback:Function,thisObject:*):void;
  static native private final function _some(o:*,callback:Function,thisObject:*):Boolean;
  static native private final function _sort(o:*,args:Array):*;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}
[native("DescribeTypeClass::describeTypeJSON")]
native public function avmplus.describeTypeJSON(o:*,flags:uint):Object;

native public const avmplus.extendsXml:XML;
native public const avmplus.implementsXml:XML;
native public const avmplus.constructorXml:XML;
native public const avmplus.constantXml:XML;
native public const avmplus.variableXml:XML;

native public const avmplus.accessorXml:XML;
native public const avmplus.methodXml:XML;
native public const avmplus.parameterXml:XML;
native public const avmplus.metadataXml:XML;
native public const avmplus.argXml:XML;

native public const avmplus.typeXml:XML;
native public const avmplus.factoryXml:XML;
native public function avmplus.describeParams(x:XML,parameters:Object):void;
native public function avmplus.describeMetadata(x:XML,metadata:Array):void;
native public function avmplus.finish(e:XML,i:Object):void;

native public function avmplus.describeTraits(x:XML,traits:Object):void;
native public const avmplus.HIDE_NSURI_METHODS:uint = 1;
native public const avmplus.INCLUDE_BASES:uint = 2;
native public const avmplus.INCLUDE_INTERFACES:uint = 4;
native public const avmplus.INCLUDE_VARIABLES:uint = 8;

native public const avmplus.INCLUDE_ACCESSORS:uint = 16;
native public const avmplus.INCLUDE_METHODS:uint = 32;
native public const avmplus.INCLUDE_METADATA:uint = 64;
native public const avmplus.INCLUDE_CONSTRUCTOR:uint = 128;
native public const avmplus.INCLUDE_TRAITS:uint = 256;

native public const avmplus.USE_ITRAITS:uint = 512;
native public const avmplus.HIDE_OBJECT:uint = 1024;
native public const avmplus.FLASH10_FLAGS:uint;
native public function avmplus.describeType(value:*,flags:uint):XML;
[native("DescribeTypeClass::getQualifiedClassName")]
native public function avmplus.getQualifiedClassName(value:*):String;

[native("DescribeTypeClass::getQualifiedSuperclassName")]
native public function avmplus.getQualifiedSuperclassName(value:*):String;


public interface flash.events.IEventDispatcher
{
  native function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native function dispatchEvent(event:flash.events.Event):Boolean;
  native function hasEventListener(type:String):Boolean;

  native function willTrigger(type:String):Boolean;
}


[native(cls="EventDispatcherClass",gc="exact",instance="EventDispatcherObject",methods="auto")]
[Event(name="deactivate",type="flash.events.Event")]
[Event(name="activate",type="flash.events.Event")]
public class flash.events.EventDispatcher extends Object
  implements flash.events.IEventDispatcher
{
  native public function EventDispatcher(target:flash.events.IEventDispatcher = null):*;
  native private function ctor(target:flash.events.IEventDispatcher):void;
  native public function toString():String;
  native public function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;

  native public function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  [cppcall]
  native public function dispatchEvent(event:flash.events.Event):Boolean;
  native public function hasEventListener(type:String):Boolean;
  native public function willTrigger(type:String):Boolean;
  native private function dispatchEventFunction(event:flash.events.Event):Boolean;

  [cppcall]
  native private function dispatchHttpStatusEvent(status:uint,redirected:Boolean,responseLocation:String,headers:String):void;
  static native private final function trimHeaderValue(headerValue:String):String;
}


[native(cls="FilePromiseManagerClass",instance="FilePromiseManagerObject",methods="auto")]
public class flash.desktop.FilePromiseManager extends flash.events.EventDispatcher
{
  native public function FilePromiseManager():*;
  native private var _asyncPromises:Vector.<flash.desktop.MacFilePromiseWrapper>;
  native private var _syncPromises:Vector.<flash.desktop.MacFilePromiseWrapper>;

  native private var _activePromises:Vector.<flash.desktop.MacFilePromiseWrapper>;
  native private var _syncPromisesTimer:flash.utils.Timer;
  native private var _asyncPromisesTimer:flash.utils.Timer;
  [cppcall]
  native public function addPromises(clipboard:flash.desktop.Clipboard,dropDirectoryPath:String):Boolean;
  native private function processAsyncPromises(e:flash.events.TimerEvent = null):void;

  native private function processSyncPromises(e:flash.events.TimerEvent = null):void;
  native private function onAsyncPromiseDone(e:flash.events.Event):void;
  static native public const DATA_EVENT_TIMEOUT:int = 1800000.0;
  static native private const MAX_ACTIVE_ASYNC_PROMISES:int = 2;
  static native internal const ASYNC_FILE_PROMISE_DONE_EVENT:String = "asyncFilePromiseDone";

  static native public const FILE_PROMISE_ERR_OPEN:int = 1;
  static native public const FILE_PROMISE_ERR_CLOSE:int = 2;
  static native public const FILE_PROMISE_ERR_TIMEOUT:int = 3;
  static native public final function newFilePromiseErrorEvent(code:int):flash.events.Event;
}


[native(cls="XMLTagClass",instance="XMLTagObject",methods="auto")]
public final class flash.xml.XMLTag extends Object
{
  native public function XMLTag():*;

  native public function get type():uint;
  native public function set type(value:uint):void;
  native public function get empty():Boolean;
  native public function set empty(value:Boolean):void;
  native public function get value():String;

  native public function set value(v:String):void;
  native public function get attrs():Object;
  native public function set attrs(value:Object):void;
}


[Version("10")]
public final class flash.net.NetStreamInfo extends Object
{
  native public function NetStreamInfo(curBPS:Number,byteCount:Number,maxBPS:Number,audioBPS:Number,audioByteCount:Number,videoBPS:Number,videoByteCount:Number,dataBPS:Number,dataByteCount:Number,playbackBPS:Number,droppedFrames:Number,audioBufferByteLength:Number,videoBufferByteLength:Number,dataBufferByteLength:Number,audioBufferLength:Number,videoBufferLength:Number,dataBufferLength:Number,srtt:Number,audioLossRate:Number,videoLossRate:Number,metaData:Object = null,xmpData:Object = null,uri:String = null,resourceName:String = null,isLive:Boolean = true):*;
  native private var m_currentBytesPerSecond:Number;

  native private var m_byteCount:Number;
  native private var m_maxBytesPerSecond:Number;
  native private var m_audioBytesPerSecond:Number;
  native private var m_audioByteCount:Number;
  native private var m_videoBytesPerSecond:Number;

  native private var m_videoByteCount:Number;
  native private var m_dataBytesPerSecond:Number;
  native private var m_dataByteCount:Number;
  native private var m_playbackBytesPerSecond:Number;
  native private var m_droppedFrames:Number;

  native private var m_audioBufferByteLength:Number;
  native private var m_videoBufferByteLength:Number;
  native private var m_dataBufferByteLength:Number;
  native private var m_audioBufferLength:Number;
  native private var m_videoBufferLength:Number;

  native private var m_dataBufferLength:Number;
  native private var m_srtt:Number;
  native private var m_audioLossRate:Number;
  native private var m_videoLossRate:Number;
  native private var m_metaData:Object;

  native private var m_xmpData:Object;
  native private var m_resourceName:String;
  native private var m_uri:String;
  native private var m_isLive:Boolean;
  native public function get currentBytesPerSecond():Number;

  native public function get byteCount():Number;
  native public function get maxBytesPerSecond():Number;
  native public function get audioBytesPerSecond():Number;
  native public function get audioByteCount():Number;
  native public function get videoBytesPerSecond():Number;

  native public function get videoByteCount():Number;
  native public function get dataBytesPerSecond():Number;
  native public function get dataByteCount():Number;
  native public function get playbackBytesPerSecond():Number;
  native public function get droppedFrames():Number;

  native public function get audioBufferByteLength():Number;
  native public function get videoBufferByteLength():Number;
  native public function get dataBufferByteLength():Number;
  native public function get audioBufferLength():Number;
  native public function get videoBufferLength():Number;

  native public function get dataBufferLength():Number;
  native public function get SRTT():Number;
  native public function get audioLossRate():Number;
  native public function get videoLossRate():Number;
  [API("672")]
  native public function get metaData():Object;

  [API("672")]
  native public function get xmpData():Object;
  [API("672")]
  native public function get uri():String;
  [API("672")]
  native public function get resourceName():String;
  [API("672")]
  native public function get isLive():Boolean;
  native public function toString():String;
}


public final class flash.display3D.Context3DBlendFactor extends Object
{

  native public function Context3DBlendFactor():*;
  static native public const ONE:String = "one";
  static native public const ZERO:String = "zero";
  static native public const SOURCE_ALPHA:String = "sourceAlpha";
  static native public const SOURCE_COLOR:String = "sourceColor";

  static native public const ONE_MINUS_SOURCE_ALPHA:String = "oneMinusSourceAlpha";
  static native public const ONE_MINUS_SOURCE_COLOR:String = "oneMinusSourceColor";
  static native public const DESTINATION_ALPHA:String = "destinationAlpha";
  static native public const DESTINATION_COLOR:String = "destinationColor";
  static native public const ONE_MINUS_DESTINATION_ALPHA:String = "oneMinusDestinationAlpha";

  static native public const ONE_MINUS_DESTINATION_COLOR:String = "oneMinusDestinationColor";
}


public final class flash.sampler.StackFrame extends Object
{
  native public function StackFrame():*;
  native public const name:String;
  native public const file:String;
  native public const line:uint;

  native public const scriptID:Number;
  native public function toString():String;
}

public class flash.sampler.Sample extends Object
{
  native public function Sample():*;
  native public const time:Number;
  native public const stack:Array;
}

[native(cls="NewObjectSampleClass",instance="NewObjectSampleObject",methods="auto")]
public final class flash.sampler.NewObjectSample extends flash.sampler.Sample
{

  native public function NewObjectSample():*;
  native public const id:Number;
  native public const type:Class;
  native public function get object():*;
  native public function get size():Number;
}

public final class flash.sampler.DeleteObjectSample extends flash.sampler.Sample
{

  native public function DeleteObjectSample():*;
  native public const id:Number;
  native public const size:Number;
}
[native("SamplerScript::clearSamples")]
native public function flash.sampler.clearSamples():void;
[native("SamplerScript::startSampling")]
native public function flash.sampler.startSampling():void;

[native("SamplerScript::stopSampling")]
native public function flash.sampler.stopSampling():void;
[native("SamplerScript::pauseSampling")]
native public function flash.sampler.pauseSampling():void;
[native("SamplerScript::sampleInternalAllocs")]
native public function flash.sampler.sampleInternalAllocs(b:Boolean):void;
native public function flash.sampler.setSamplerCallback(f:Function):void;
[native("SamplerScript::_setSamplerCallback")]
native public function flash.sampler._setSamplerCallback(f:Function):void;

[native("SamplerScript::getSize")]
native public function flash.sampler.getSize(o:*):Number;
[native("SamplerScript::getMemberNames")]
native public function flash.sampler.getMemberNames(o:Object,instanceNames:Boolean = false):Object;
native public function flash.sampler.getSamples():Object;
[native("SamplerScript::_getSamples")]
native public function flash.sampler._getSamples(cf:Class):Object;
[native("SamplerScript::getSampleCount")]
native public function flash.sampler.getSampleCount():Number;

native public function flash.sampler.getInvocationCount(obj:Object,qname:QName):Number;
native public function flash.sampler.getSetterInvocationCount(obj:Object,qname:QName):Number;
native public function flash.sampler.getGetterInvocationCount(obj:Object,qname:QName):Number;
[native("SamplerScript::_getInvocationCount")]
native public function flash.sampler._getInvocationCount(obj:Object,qname:QName,type:uint):Number;
[native("SamplerScript::isGetterSetter")]
native public function flash.sampler.isGetterSetter(obj:Object,qname:QName):Boolean;

[native("SamplerScript::getLexicalScopes")]
native public function flash.sampler.getLexicalScopes(obj:Function):Array;
[native("SamplerScript::getSavedThis")]
native public function flash.sampler.getSavedThis(obj:Function):Object;
[native("SamplerScript::getMasterString")]
native public function flash.sampler.getMasterString(str:String):String;

[API("708")]
public final class flash.sampler.ClassFactory extends Object
{
  native public function ClassFactory():*;
  static native public const StackFrameClass:Class;

  static native public const SampleClass:Class;
  static native public const DeleteObjectSampleClass:Class;
  static native public const NewObjectSampleClass:Class;
}


[API("661")]
public interface flash.security.IURIDereferencer
{
  native function dereference(uri:String):flash.utils.IDataInput;
}

[API("661")]
[native(cls="AVMPlusDigestClass",instance="AVMPlusDigestObject",methods="auto",construct="native")]
public class flash.security.AVMPlusDigest extends Object
{
  native public function AVMPlusDigest():*;

  native public function Init(algorithm:uint):void;
  native public function Update(data:flash.utils.IDataInput):uint;
  native public function UpdateWithString(data:String):uint;
  native public function FinishDigest(inDigestToCompare:String):uint;
  native private function initInternal(algorithm:uint):void;

  native private function iUpdate(data:flash.utils.ByteArray):uint;
  native private function iUpdateWithString(data:String):uint;
  native private function iFinishDigest(inDigestToCompare:String):uint;
  native private function getLastError():String;
  native private function clearErrorLog():void;

  static native internal const DIGESTMETHOD_SHA256:uint = 1;
}

[API("661")]
[native(cls="CryptContextClass",instance="CryptContextObject",methods="auto",construct="native")]
public class flash.security.CryptContext extends flash.events.EventDispatcher
{
  native public function CryptContext():*;
  native public function VerifySigASync(sig:String,data:String,ignoreCertTime:Boolean):void;
  native public function VerifySigSync(sig:String,data:String,ignoreCertTime:Boolean):void;
  native public function setSignerCert(cert:String):*;

  native public function setSignerCertDN(dn:String):*;
  native public function addChainBuildingCertBase64(cert:String,trusted:Boolean):void;
  native public function addChainBuildingCertRaw(cert:flash.utils.ByteArray,trusted:Boolean):void;
  native public function addTimestampingRootRaw(cert:flash.utils.ByteArray):void;
  native public function addCRLRevEvidenceBase64(crl:String):void;

  native public function addCRLRevEvidenceRaw(crl:flash.utils.ByteArray):void;
  native public function verifyTimestamp(tsp:String,data:String,ignoreCertTime:Boolean):void;
  native private function iVerifySigASync(sig:String,data:String,ignoreCertTime:Boolean):void;
  native private function iVerifySigSync(sig:String,data:String,ignoreCertTime:Boolean):void;
  native private function isetSignerCert(cert:String):void;

  native private function isetSignerCertDN(dn:String):void;
  native private function iaddChainBuildingCertBase64(cert:String,trusted:Boolean):void;
  native private function iaddChainBuildingCertRaw(cert:flash.utils.ByteArray,trusted:Boolean):void;
  native private function iaddCRLRevEvidenceBase64(crl:String):void;
  native private function iaddCRLRevEvidenceRaw(crl:flash.utils.ByteArray):void;

  native private function iaddTimestampingRootRaw(cert:flash.utils.ByteArray):void;
  native public function HasValidVerifySession():Boolean;
  native public function getDataTBVStatus():uint;
  native public function getIDStatus():uint;
  native public function getOverallStatus():uint;

  native public function useSystemTrustStore(trusted:Boolean):void;
  native public function getUseSystemTrustStore():Boolean;
  native public function setRevCheckSetting(setting:String):void;
  native public function getRevCheckSetting():String;
  native public function setTimestampRevCheckSetting(setting:String):void;

  native public function getTimestampRevCheckSetting():String;
  native public function useCodeSigningValidationRules():void;
  native private function getLastError():String;
  native private function clearErrorLog():void;
  native public function getSignerTrustFlags():uint;

  native public function getSignerTrustSettings():Array;
  native public function getSignerExtendedKeyUsages():Array;
  native private function getSignerExtendedKeyUsagesInternal(array:Array):void;
  native private function onAsyncDownloadComplete(event:flash.events.Event):void;
  native private function onAsyncDownloadError(event:flash.events.Event):void;

  native private function returnDownloadDataToTransportLayer(data:flash.utils.ByteArray):void;
  [cppcall]
  native private function sendDownloadRequestASync(url:String):void;
  [cppcall]
  native private function postAndReceiveASync(url:String,header:String,data:flash.utils.ByteArray):void;
  native private function onSyncDownloadError(event:flash.events.Event):void;
  [cppcall]
  native private function sendDownloadRequestSync(url:String):flash.utils.ByteArray;

  [cppcall]
  native private function postAndReceiveSync(url:String,header:String,data:flash.utils.ByteArray):flash.utils.ByteArray;
  native public function get signerCN():String;
  native public function get signerDN():String;
  native public function getPublicKey(cert:String):flash.utils.ByteArray;
  native public function get signerValidEnd():uint;

  native public function get verificationTime():uint;
  native public function getSignerIDSummary(version:uint):String;
  native public function getIDSummaryFromSigChain(version:uint):String;
  static native internal const STATUS_VALID:uint = 0;
  static native internal const STATUS_INVALID:uint = 1;

  static native internal const STATUS_UNKNOWN:uint = 2;
  static native internal const STATUS_TROUBLE:uint = 3;
  static native internal const REVCHECK_NEVER:uint = 0;
  static native internal const REVCHECK_BEST_EFFORT:uint = 1;
  static native internal const REVCHECK_REQUIRED_IF_AVAILABLE:uint = 2;

  static native internal const REVCHECK_ALWAYSREQUIRED:uint = 3;
  static native internal const TRUSTFLAG_SIGNING:uint = 1;
  static native internal const TRUSTFLAG_PLAYLISTSIGNING:uint = 16;
  static native internal const TRUSTFLAG_CODESIGNING:uint = 256;
  static native private final function setSynchronousFlag(urlRequest:flash.net.URLRequest):void;
}

[API("661")]
[native(cls="XMLCanonicalizerClass",instance="XMLCanonicalizerObject",methods="auto",construct="native")]
public class flash.security.XMLCanonicalizer extends Object
{

  native public function XMLCanonicalizer():*;
  native private function sortNameSpace(nsA:Namespace,nsB:Namespace):int;
  native private function c14nTransform(xml:String):String;
  native public function CanonicalizeXML(xml:XML):String;
  native public function CanonicalizeXMLList(xmlList:XMLList):String;

  native private function CanonicalizeString(xmlString:String):String;
  native private function expandEmptyXMLTags(inputStr:String):String;
  native private function replaceEmptyTags():String;
}

[API("661")]
[native(cls="XMLSignatureEnvelopedTransformerClass",instance="XMLSignatureEnvelopedTransformerObject",methods="auto",construct="native")]
public class flash.security.XMLSignatureEnvelopedTransformer extends Object
{
  native public function XMLSignatureEnvelopedTransformer():*;
  native private function dummyFunction():void;

  native public function transform(sig:XML,doc:XML):XML;
}

[API("661")]
[native(cls="XMLSignatureValidatorClass",instance="XMLSignatureValidatorObject",gc="exact",methods="auto",construct="check")]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
public class flash.security.XMLSignatureValidator extends flash.events.EventDispatcher
{
  native public function XMLSignatureValidator():*;
  native public function get uriDereferencer():flash.security.IURIDereferencer;
  native public function set uriDereferencer(uriDerefer:flash.security.IURIDereferencer):void;
  native public function addCertificate(cert:flash.utils.ByteArray,trusted:Boolean):*;

  native public function get useSystemTrustStore():Boolean;
  native public function set useSystemTrustStore(trusted:Boolean):void;
  native public function get revocationCheckSetting():String;
  native public function set revocationCheckSetting(setting:String):void;
  [API("663")]
  native public function get referencesValidationSetting():String;

  [API("663")]
  native public function set referencesValidationSetting(setting:String):void;
  native private function cryptContextCodeToStatus(cryptContextCode:uint):String;
  native private function throwIfValidating():*;
  native public function get referencesStatus():String;
  native public function get digestStatus():String;

  native public function get identityStatus():String;
  native public function get validityStatus():String;
  native public function get signerTrustSettings():Array;
  native public function get signerExtendedKeyUsages():Array;
  native private function applyTransforms(inData:flash.utils.IDataInput,transforms:XMLList,signature:XML):flash.utils.IDataInput;

  native private function verifyReferences(signature:XML):Boolean;
  native public function verify(signature:XML):void;
  native private function validateReferences(signature:XML):void;
  native private function verifyCommon(signature:XML):void;
  native private function verifyTimestamp(signature:XML):void;

  native private function readSigKeyInfo(signature:XML):void;
  [cppcall]
  native private function _verifySync(signature:XML):void;
  [cppcall]
  native private function _setTimestampUris(uris:Array):void;
  native private var m_uriDereferencer:flash.security.IURIDereferencer;
  native private var m_isValidating:Boolean;

  native private var m_referencesValidationSetting:String;
  native private var m_cryptContext:flash.security.CryptContext;
  native private var m_referenceStatus:String;
  native private var m_signedDataString:String;
  native private var m_sigValueString:String;

  native private var m_timestampUris:Array;
  [cppcall]
  native private function _setUseCodeSigningValidationRules():void;
  [cppcall]
  native private function _addTimestampingRoot(rootCert:flash.utils.ByteArray):void;
  [cppcall]
  native private function _setTimestampRevocationCheckSetting(setting:String):void;
  native private function getTimestampRevocationCheckSetting():String;

  native private function getCryptContext():flash.security.CryptContext;
  native public function get signerCN():String;
  native public function get signerDN():String;
  [cppcall]
  native private function _getPublicKey(signature:XML):flash.utils.ByteArray;
  [cppcall]
  native private function _getSignerValidEndTime():uint;

  [cppcall]
  native private function _getVerificationTime():uint;
  [cppcall]
  native private function _getSignerIDSummary(version:uint):String;
  [cppcall]
  native private function _guessSignerIDSummary(signature:XML,version:uint):String;
  native private function constructAVMPlusDigest():flash.security.AVMPlusDigest;
  native private function constructCryptContext():flash.security.CryptContext;

  native private function constructXMLCanonicalizer():flash.security.XMLCanonicalizer;
  native private function constructEnvelopedTransformer():flash.security.XMLSignatureEnvelopedTransformer;
  native private var _ignoreCertTime:Boolean = false;
  [cppcall]
  native private function _setIgnoreCertTime(ignoreCertTime:Boolean):void;
  native private var stubProperties:Object;

  native private function initStubProperties():void;
  native private function setStubProperty(key:String,value:*):*;
  native private function getStubProperty(key:String):*;
  static native private const XML_DSIG_NS:Namespace;
  static native private const XML_XADES_NAMESPACE:String = "http://uri.etsi.org/01903/v1.1.1#";

  static native private const XMLDIGESTMETHOD_SHA256:String = "http://www.w3.org/2001/04/xmlenc#sha256";
  static native private const XML_TRANSFORM_C14N:String = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
  static native private const XML_TRANSFORM_ENVELOPED_SIGNATURE:String = "http://www.w3.org/2000/09/xmldsig#enveloped-signature";
  static native private const MAX_NUM_TRANSFORMS:uint = 20;
  static native private const kInvalidParamError:uint = 2004;

  static native private const kNullPointerError:uint = 2007;
  static native private const kInvalidCallError:uint = 2037;
  static native private const VALID_IDENTITY:String = "validIdentity";
  static native private const VALID_OR_UNKNOWN_IDENTITY:String = "validOrUnknownIdentity";
  static native private const NEVER:String = "never";

  [Version("air2.0")]
  static native public final function get isSupported():Boolean;
  static native private final function _checkSupported():Boolean;
}

[native("Toplevel::registerClassAlias")]
native public function flash.net.registerClassAlias(aliasName:String,classObject:Class):void;
[native("Toplevel::getClassByAlias")]
native public function flash.net.getClassByAlias(aliasName:String):Class;


[API("674")]
public final class flash.display3D.Context3DStencilAction extends Object
{
  native public function Context3DStencilAction():*;

  static native public const KEEP:String = "keep";
  static native public const ZERO:String = "zero";
  static native public const INCREMENT_SATURATE:String = "incrementSaturate";
  static native public const DECREMENT_SATURATE:String = "decrementSaturate";
  static native public const INVERT:String = "invert";

  static native public const INCREMENT_WRAP:String = "incrementWrap";
  static native public const DECREMENT_WRAP:String = "decrementWrap";
  static native public const SET:String = "set";
}


[Version("10")]
public interface flash.display.IDrawCommand
{
}


[Version("10")]
public final class flash.text.engine.CFFHinting extends Object
{
  native public function CFFHinting():*;
  static native public const NONE:String = "none";

  static native public const HORIZONTAL_STEM:String = "horizontalStem";
}


[native(cls="ResponderClass",instance="ResponderObject",methods="auto")]
public class flash.net.Responder extends Object
{
  native public function Responder(result:Function,status:Function = null):*;
  native private function ctor(result:Function,status:Function):void;
}


public interface flash.utils.IDataInput
{
  [cppcall]
  native function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  [cppcall]
  native function readBoolean():Boolean;

  [cppcall]
  native function readByte():int;
  [cppcall]
  native function readUnsignedByte():uint;
  [cppcall]
  native function readShort():int;
  [cppcall]
  native function readUnsignedShort():uint;
  [cppcall]
  native function readInt():int;

  [cppcall]
  native function readUnsignedInt():uint;
  [cppcall]
  native function readFloat():Number;
  [cppcall]
  native function readDouble():Number;
  [cppcall]
  native function readMultiByte(length:uint,charSet:String):String;
  [cppcall]
  native function readUTF():String;

  [cppcall]
  native function readUTFBytes(length:uint):String;
  [cppcall]
  native function get bytesAvailable():uint;
  [cppcall]
  native function readObject():*;
  [cppcall]
  native function get objectEncoding():uint;
  [cppcall]
  native function set objectEncoding(version:uint):void;

  [cppcall]
  native function get endian():String;
  [cppcall]
  native function set endian(type:String):void;
}


[native(cls="ObjectInputClass",gc="exact",instance="ObjectInputObject",methods="auto")]
public class flash.utils.ObjectInput extends Object
  implements flash.utils.IDataInput
{
  native public function ObjectInput():*;
  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function readBoolean():Boolean;

  native public function readByte():int;
  native public function readUnsignedByte():uint;
  native public function readShort():int;
  native public function readUnsignedShort():uint;
  native public function readInt():int;

  native public function readUnsignedInt():uint;
  native public function readFloat():Number;
  native public function readDouble():Number;
  native public function readMultiByte(length:uint,charSet:String):String;
  native public function readUTF():String;

  native public function readUTFBytes(length:uint):String;
  native public function get bytesAvailable():uint;
  native public function readObject():*;
  native public function get objectEncoding():uint;
  native public function set objectEncoding(version:uint):void;

  native public function get endian():String;
  native public function set endian(type:String):void;
}


public final class flash.events.EventPhase extends Object
{
  native public function EventPhase():*;
  static native public const CAPTURING_PHASE:uint = 1;
  static native public const AT_TARGET:uint = 2;

  static native public const BUBBLING_PHASE:uint = 3;
}


public final class flash.net.URLLoaderDataFormat extends Object
{
  native public function URLLoaderDataFormat():*;
  static native public const TEXT:String = "text";
  static native public const BINARY:String = "binary";
  static native public const VARIABLES:String = "variables";
}


public interface flash.net.IDynamicPropertyWriter
{

  native function writeDynamicProperties(obj:Object,output:flash.net.IDynamicPropertyOutput):void;
}


[native(cls="PerspectiveProjectionClass",instance="PerspectiveProjectionObject",methods="auto")]
[Version("10")]
public class flash.geom.PerspectiveProjection extends Object
{
  native public function PerspectiveProjection():*;
  native private function ctor():void;
  native public function get fieldOfView():Number;
  native public function set fieldOfView(fieldOfViewAngleInDegrees:Number):void;

  native public function get projectionCenter():flash.geom.Point;
  native public function set projectionCenter(p:flash.geom.Point):*;
  native public function get focalLength():Number;
  native public function set focalLength(value:Number):void;
  native public function toMatrix3D():flash.geom.Matrix3D;
}


[native(cls="Stage3DClass",instance="Stage3DObject",methods="auto",construct="native")]
[API("674")]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="context3DCreate",type="flash.events.Event")]
public class flash.display.Stage3D extends flash.events.EventDispatcher
{

  native public function Stage3D():*;
  native public function get context3D():flash.display3D.Context3D;
  native public function requestContext3D(context3DRenderMode:String = "auto",profile:String = "baseline"):void;
  [API("692")]
  native public function requestContext3DMatchingProfiles(profiles:Vector.<String>):void;
  native public function get x():Number;

  native public function set x(value:Number):void;
  native public function get y():Number;
  native public function set y(value:Number):void;
  native public function get visible():Boolean;
  native public function set visible(value:Boolean):void;
}


[API("668")]
[native(cls="GeolocationClass",instance="GeolocationObject",methods="auto")]
[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="update",type="flash.events.GeolocationEvent")]
public class flash.sensors.Geolocation extends flash.events.EventDispatcher
{

  native public function Geolocation():*;
  native public function setRequestedUpdateInterval(interval:Number):void;
  native public function get muted():Boolean;
  static native public final function get isSupported():Boolean;
}


[native(cls="ErrorClass",gc="exact",instance="ErrorObject",methods="auto")]
public dynamic class Error extends Object
{
  native public function Error(message:* = "",id:* = 0):*;

  native public var message:*;
  native public var name:*;
  native public function getStackTrace():String;
  native private var _errorID:int;
  native public function get errorID():int;

  static native public const length:int = 1;
  static native public final function getErrorMessage(index:int):String;
  static native public final function throwError(type:Class,index:uint,... rest):*;
}

[native(cls="DefinitionErrorClass",gc="exact",instance="DefinitionErrorObject",methods="auto")]
public dynamic class DefinitionError extends Error
{
  native public function DefinitionError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="EvalErrorClass",gc="exact",instance="EvalErrorObject",methods="auto")]
public dynamic class EvalError extends Error
{

  native public function EvalError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="RangeErrorClass",gc="exact",instance="RangeErrorObject",methods="auto")]
public dynamic class RangeError extends Error
{
  native public function RangeError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="ReferenceErrorClass",gc="exact",instance="ReferenceErrorObject",methods="auto")]
public dynamic class ReferenceError extends Error
{
  native public function ReferenceError(message:* = "",id:* = 0):*;

  static native public const length:int = 1;
}

[native(cls="SecurityErrorClass",gc="exact",instance="SecurityErrorObject",methods="auto")]
public dynamic class SecurityError extends Error
{
  native public function SecurityError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="SyntaxErrorClass",gc="exact",instance="SyntaxErrorObject",methods="auto")]
public dynamic class SyntaxError extends Error
{
  native public function SyntaxError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="TypeErrorClass",gc="exact",instance="TypeErrorObject",methods="auto")]
public dynamic class TypeError extends Error
{

  native public function TypeError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="URIErrorClass",gc="exact",instance="URIErrorObject",methods="auto")]
public dynamic class URIError extends Error
{
  native public function URIError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="VerifyErrorClass",gc="exact",instance="VerifyErrorObject",methods="auto")]
public dynamic class VerifyError extends Error
{
  native public function VerifyError(message:* = "",id:* = 0):*;

  static native public const length:int = 1;
}

[native(cls="UninitializedErrorClass",gc="exact",instance="UninitializedErrorObject",methods="auto")]
public dynamic class UninitializedError extends Error
{
  native public function UninitializedError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

[native(cls="ArgumentErrorClass",gc="exact",instance="ArgumentErrorObject",methods="auto")]
public dynamic class ArgumentError extends Error
{
  native public function ArgumentError(message:* = "",id:* = 0):*;
  static native public const length:int = 1;
}

public dynamic class flash.errors.IOError extends Error
{

  native public function IOError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.EOFError extends flash.errors.IOError
{
  native public function EOFError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.MemoryError extends Error
{
  native public function MemoryError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.IllegalOperationError extends Error
{
  native public function IllegalOperationError(message:String = "",id:int = 0):*;
}


[native(cls="ContentElementClass",instance="ContentElementObject",methods="auto")]
[Version("10")]
public class flash.text.engine.ContentElement extends Object
{
  native public function ContentElement(elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;

  native public var userData:*;
  native public function get textBlock():flash.text.engine.TextBlock;
  native public function get textBlockBeginIndex():int;
  native public function get elementFormat():flash.text.engine.ElementFormat;
  native public function set elementFormat(value:flash.text.engine.ElementFormat):void;

  native public function get eventMirror():flash.events.EventDispatcher;
  native public function set eventMirror(value:flash.events.EventDispatcher):void;
  native public function get groupElement():flash.text.engine.GroupElement;
  native public function get rawText():String;
  native public function get text():String;

  native public function get textRotation():String;
  native public function set textRotation(value:String):void;
  static native public const GRAPHIC_ELEMENT:uint = 65007;
}


[native(cls="TextElementClass",instance="TextElementObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.TextElement extends flash.text.engine.ContentElement
{
  native public function TextElement(text:String = null,elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;
  native public function set text(value:String):void;

  native public function replaceText(beginIndex:int,endIndex:int,newText:String):void;
}


[native(cls="MutexClass",instance="MutexObject",gc="exact")]
[API("684")]
public final class flash.concurrent.Mutex extends Object
{
  native public function Mutex():*;
  native public function lock():void;
  native public function tryLock():Boolean;
  native public function unlock():void;

  native private function ctor():void;
  static native public final function get isSupported():Boolean;
}

[native(cls="ConditionClass",instance="ConditionObject",gc="exact")]
[API("684")]
public final class flash.concurrent.Condition extends Object
{
  native public function Condition(mutex:flash.concurrent.Mutex):*;
  native public function get mutex():flash.concurrent.Mutex;
  native public function wait(timeout:Number = -1):Boolean;

  native public function notify():void;
  native public function notifyAll():void;
  native private function ctor(mutex:flash.concurrent.Mutex):void;
  static native public final function get isSupported():Boolean;
}
[native("ConcurrentMemory::mfence")]
[API("684")]
native public function avm2.intrinsics.memory.mfence():void;

[native("ConcurrentMemory::casi32")]
[API("684")]
native public function avm2.intrinsics.memory.casi32(addr:int,expectedVal:int,newVal:int):int;


[native(cls="MenuClass",gc="exact",instance="MenuObject",methods="auto",construct="check")]
[API("667")]
[Event(name="preparing",type="flash.events.Event")]
[Event(name="displaying",type="flash.events.Event")]
[Event(name="select",type="flash.events.Event")]
public class flash.display.NativeMenu extends flash.events.EventDispatcher
{
  native public function NativeMenu():*;
  native public function get parent():NativeMenu;
  native public function get numItems():int;
  native private function get _numItems():int;

  native public function get items():Array;
  native public function set items(itemArray:Array):void;
  native public function addItem(item:flash.display.NativeMenuItem):flash.display.NativeMenuItem;
  native public function addItemAt(item:flash.display.NativeMenuItem,index:int):flash.display.NativeMenuItem;
  native private function _addItemAt(item:flash.display.NativeMenuItem,index:int):flash.display.NativeMenuItem;

  native public function containsItem(item:flash.display.NativeMenuItem):Boolean;
  native private function _containsItem(item:flash.display.NativeMenuItem):Boolean;
  native public function getItemAt(index:int):flash.display.NativeMenuItem;
  native private function _getItemAt(index:int):flash.display.NativeMenuItem;
  native public function getItemByName(name:String):flash.display.NativeMenuItem;

  native private function _getItemByName(name:String):flash.display.NativeMenuItem;
  native public function removeItem(item:flash.display.NativeMenuItem):flash.display.NativeMenuItem;
  native public function removeItemAt(index:int):flash.display.NativeMenuItem;
  native private function _removeItemAt(index:int):flash.display.NativeMenuItem;
  native public function removeAllItems():void;

  native public function getItemIndex(item:flash.display.NativeMenuItem):int;
  native private function _getItemIndex(item:flash.display.NativeMenuItem):int;
  native public function setItemIndex(item:flash.display.NativeMenuItem,index:int):void;
  native public function addSubmenuAt(submenu:NativeMenu,index:int,label:String):flash.display.NativeMenuItem;
  native public function addSubmenu(submenu:NativeMenu,label:String):flash.display.NativeMenuItem;

  native public function display(stage:flash.display.Stage,stageX:Number,stageY:Number):void;
  native public function clone():NativeMenu;
  native private function _dispatchPreparingEvent():void;
  [cppcall]
  native private function willPerformKeyEquivalent(event:flash.events.KeyboardEvent):Boolean;
  native private function _menuItemWillPerformKeyEquivalent(item:flash.display.NativeMenuItem,event:flash.events.KeyboardEvent):Boolean;

  [cppcall]
  native private function performKeyEquivalent(event:flash.events.KeyboardEvent,usingCharcode:int):Boolean;
  native private function _menuItemPerformKeyEquivalent(item:flash.display.NativeMenuItem,event:flash.events.KeyboardEvent,usingCharcode:int):Boolean;
  native private function _display(stage:flash.display.Stage,stageX:Number,stageY:Number):void;
  native public function dispatchContextMenuSelect(event:flash.events.MouseEvent):*;
  static native public final function get isSupported():Boolean;
}


[native(cls="ContextMenuClass",gc="exact",instance="ContextMenuObject",methods="auto",construct="check")]
[Event(name="menuSelect",type="flash.events.ContextMenuEvent")]
public final class flash.ui.ContextMenu extends flash.display.NativeMenu
{

  native public function ContextMenu():*;
  [cppcall]
  native public function hideBuiltInItems():void;
  native public function get builtInItems():flash.ui.ContextMenuBuiltInItems;
  native public function set builtInItems(value:flash.ui.ContextMenuBuiltInItems):void;
  native public function get customItems():Array;

  native public function set customItems(value:Array):void;
  [Version("10")]
  native public function get link():flash.net.URLRequest;
  [Version("10")]
  native public function set link(value:flash.net.URLRequest):void;
  [Version("10")]
  native public function get clipboardMenu():Boolean;
  [Version("10")]
  native public function set clipboardMenu(value:Boolean):void;

  [Version("10")]
  native public function get clipboardItems():flash.ui.ContextMenuClipboardItems;
  [Version("10")]
  native public function set clipboardItems(value:flash.ui.ContextMenuClipboardItems):void;
  native private function cloneLinkAndClipboardProperties(c:ContextMenu):void;
  native public override function clone():flash.display.NativeMenu;
  native public override function get numItems():int;

  native public override function get items():Array;
  native public override function set items(itemArray:Array):void;
  native public override function addItemAt(item:flash.display.NativeMenuItem,index:int):flash.display.NativeMenuItem;
  native public override function containsItem(item:flash.display.NativeMenuItem):Boolean;
  native public override function getItemAt(index:int):flash.display.NativeMenuItem;

  native public override function removeItemAt(index:int):flash.display.NativeMenuItem;
  native public override function getItemIndex(item:flash.display.NativeMenuItem):int;
  native public override function removeAllItems():void;
  native public override function display(stage:flash.display.Stage,stageX:Number,stageY:Number):void;
  [cppcall]
  native private function configureCustomItems(value:Array,link:Boolean,showClipboardMenu:Boolean,clipboardItems:flash.ui.ContextMenuClipboardItems):Array;

  [API("667")]
  static native public final function get isSupported():Boolean;
  static native private final function _checkSupported():Boolean;
}


[API("675")]
[native(cls="CameraRollBrowseOptionsClass",instance="CameraRollBrowseOptionsObject",methods="auto")]
public class flash.media.CameraRollBrowseOptions extends Object
{
  native public function CameraRollBrowseOptions():*;
  native public function get width():Number;
  native public function set width(value:Number):void;

  native public function get height():Number;
  native public function set height(value:Number):void;
  native public function get origin():flash.geom.Rectangle;
  native public function set origin(value:flash.geom.Rectangle):void;
}


[native(cls="DRMManagerSessionClass",instance="DRMManagerSessionObject",methods="auto")]
public class flash.net.drm.DRMManagerSession extends flash.events.EventDispatcher
{
  native public function DRMManagerSession():*;

  native public function onSessionError():void;
  native public function onSessionComplete():void;
  native public function setTimerUp():void;
  native public function get metadata():flash.net.drm.DRMContentData;
  native public function set metadata(inData:flash.net.drm.DRMContentData):void;

  native public function checkStatus():uint;
  native private function isAutoResetError(errorCode:uint):Boolean;
  native private function doAutoReset():void;
  native private function onCheckStatus(ev:flash.events.TimerEvent):*;
  native private var m_metadata:flash.net.drm.DRMContentData;

  native private var m_checkStatusTimer:flash.utils.Timer;
  native public var m_isInSession:Boolean;
  native public function getLastError():uint;
  native public function getLastSubErrorID():uint;
  native public function getLastServerErrorString():String;

  native public function issueDRMStatusEvent(inMetadata:flash.net.drm.DRMContentData,voucher:flash.net.drm.DRMVoucher):*;
  native private function issueDRMStatusEventInner(specificEventType:String,metadata:flash.net.drm.DRMContentData,voucher:flash.net.drm.DRMVoucher,isLocal:Boolean):void;
  native public function issueDRMErrorEvent(metadata:flash.net.drm.DRMContentData,errorID:int,subErrorID:int,serverErrorString:String):void;
  native public function errorCodeToThrow(errorCode:uint):void;
  native private function checkStatusInner():uint;

  static native internal const STATUS_READY:uint = 0;
  static native internal const STATUS_NOTREADY:uint = 1;
  static native internal const STATUS_FAILED:uint = 2;
  static native internal const STATUS_UNKNOWN:uint = 3;
}

[native(cls="DRMAuthenticationContextClass",instance="DRMAuthenticationContextObject",methods="auto")]
public class flash.net.drm.DRMAuthenticationContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMAuthenticationContext():*;

  native public function authenticate(url:String,domain:String,username:String,password:String):void;
  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native public function get authenticationToken():flash.utils.ByteArray;
  native private function authenticateInner(url:String,domain:String,username:String,password:String):uint;

  native private function getTokenInner(outToken:flash.utils.ByteArray):void;
  native private var m_url:String;
  native private var m_domain:String;
}

[native(construct="native",friend="DRMVoucherObject")]
[API("667")]
public class flash.net.drm.DRMPlaybackTimeWindow extends Object
{
  native public function DRMPlaybackTimeWindow():*;
  [cppcall]
  native private function init(length:Number,start:Number,end:Number):void;

  native private var m_length:uint;
  native private var m_startDate:Date;
  native private var m_endDate:Date;
  native public function get period():uint;
  native public function get startDate():Date;

  native public function get endDate():Date;
}

[native(cls="DRMVoucherClass",instance="DRMVoucherObject",methods="auto",construct="native")]
[API("667")]
public class flash.net.drm.DRMVoucher extends Object
{
  native public function DRMVoucher():*;
  native public function get serverURL():String;
  native private function get FMRMSURL():String;
  native public function get voucherStartDate():Date;

  native public function get voucherEndDate():Date;
  native public function get offlineLeaseStartDate():Date;
  native public function get offlineLeaseEndDate():Date;
  native private function getEndDateInner():Number;
  native private function getStartDateInner():Number;

  native private function getOfflineLeaseStartDateInner():Number;
  native private function getOfflineLeaseExpirationDateInner():Number;
  native public function get policies():Object;
  native public function get licenseID():String;
  native private function getLicenseIDInner():String;

  native private var m_licenseID:String;
  native public function get policyID():String;
  native private function getPolicyIDInner():String;
  native private var m_policyID:String;
  native private function createCustomPolicyObject():void;

  [cppcall]
  native private function setCustomPolicyObject(customPolicyObject:Object):void;
  native private function get playStartTime():Number;
  native private function get playbackEndTime():Number;
  native private function get playbackWindow():Number;
  native public function get playbackTimeWindow():flash.net.drm.DRMPlaybackTimeWindow;

  native public function toByteArray():flash.utils.ByteArray;
  native private var m_endDate:Date;
  native private var m_startDate:Date;
  native private var m_offlineLeaseStartDate:Date;
  native private var m_offlineLeaseExpirationDate:Date;

  native private var m_customPolicies:Object;
  native private var m_playbackTimeWindow:flash.net.drm.DRMPlaybackTimeWindow;
  native private function createDRMPlaybackTimeWindow(length:Number,start:Number,end:Number):flash.net.drm.DRMPlaybackTimeWindow;
  native private function toByteArrayInner():flash.utils.ByteArray;
}

[native(cls="DRMResetContextClass",instance="DRMResetContextObject",methods="auto")]
public class flash.net.drm.DRMResetContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMResetContext(isAutoReset:Boolean):*;

  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native public function doReset():void;
  native private function resetInner(isAutoReset:Boolean):uint;
  native public var m_isAutoReset:Boolean;
}

[native(cls="DRMStoreVoucherContextClass",instance="DRMStoreVoucherContextObject",methods="auto")]
public class flash.net.drm.DRMStoreVoucherContext extends flash.net.drm.DRMManagerSession
{

  native public function DRMStoreVoucherContext(voucher:flash.utils.ByteArray):*;
  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native public function doStoreVoucher():void;
  native private function storeVoucherInner(voucher:flash.utils.ByteArray):uint;

  native private var m_voucher:flash.utils.ByteArray;
}

[native(cls="DRMVoucherDownloadContextClass",instance="DRMVoucherDownloadContextObject",methods="auto")]
public class flash.net.drm.DRMVoucherDownloadContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMVoucherDownloadContext():*;
  native public function download(inMetadata:flash.net.drm.DRMContentData,previewVoucher:Boolean = false):void;
  native public override function onSessionComplete():void;
  native public override function onSessionError():void;

  native public function get voucher():flash.net.drm.DRMVoucher;
  native private function downloadInner(metadata:flash.net.drm.DRMContentData,previewVoucher:Boolean):uint;
  native private function getVoucherInner():flash.net.drm.DRMVoucher;
}

[native(cls="DRMVoucherStoreContextClass",instance="DRMVoucherStoreContextObject",methods="auto")]
public class flash.net.drm.DRMVoucherStoreContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMVoucherStoreContext():*;
  native public function getVoucherFromStore(inMetadata:flash.net.drm.DRMContentData):void;

  native public function get voucher():flash.net.drm.DRMVoucher;
  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native private function getVoucherFromStoreInner(data:flash.net.drm.DRMContentData):uint;
  native private function getVoucherInner():flash.net.drm.DRMVoucher;
}

[native(cls="DRMAddToDeviceGroupContextClass",instance="DRMAddToDeviceGroupContextObject",methods="auto")]
public class flash.net.drm.DRMAddToDeviceGroupContext extends flash.net.drm.DRMManagerSession
{

  native public function DRMAddToDeviceGroupContext():*;
  native public function addToDeviceGroup(deviceGroup:flash.net.drm.DRMDeviceGroup,forceRefresh:Boolean):void;
  native public override function onSessionComplete():void;
  native private function getResultInner():String;
  native public override function onSessionError():void;

  native private function addToDeviceGroupInner(deviceGroup:flash.net.drm.DRMDeviceGroup,forceRefresh:Boolean):uint;
  native private var m_deviceGroup:flash.net.drm.DRMDeviceGroup;
}

[native(cls="DRMRemoveFromDeviceGroupContextClass",instance="DRMRemoveFromDeviceGroupContextObject",methods="auto")]
public class flash.net.drm.DRMRemoveFromDeviceGroupContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMRemoveFromDeviceGroupContext():*;
  native public function removeFromDeviceGroup(deviceGroup:flash.net.drm.DRMDeviceGroup):void;
  native public override function onSessionComplete():void;

  native public override function onSessionError():void;
  native private function removeFromDeviceGroupInner(deviceGroup:flash.net.drm.DRMDeviceGroup):uint;
  native private var m_deviceGroup:flash.net.drm.DRMDeviceGroup;
}

[native(cls="DRMReturnVoucherContextClass",instance="DRMReturnVoucherContextObject",methods="auto")]
public class flash.net.drm.DRMReturnVoucherContext extends flash.net.drm.DRMManagerSession
{
  native public function DRMReturnVoucherContext():*;
  native public function returnVoucher(inServerURL:String,immediateCommit:Boolean,licenseID:String,policyID:String):void;

  native public override function onSessionComplete():void;
  native public override function onSessionError():void;
  native private function returnVoucherInner(inServerURL:String,immediateCommit:Boolean,licenseID:String,policyID:String):uint;
  native private function getResultInner():int;
  native private var m_serverURL:String;

  native private var m_licenseID:String;
  native private var m_policyID:String;
  native private var m_immediateCommit:Boolean;
}

[native(cls="DRMManagerClass",instance="DRMManagerObject",methods="auto",construct="native")]
[API("667")]
[Event(name="drmError",type="flash.events.DRMErrorEvent")]
[Event(name="drmStatus",type="flash.events.DRMStatusEvent")]
[Event(name="authenticationError",type="flash.events.DRMAuthenticationErrorEvent")]
[Event(name="authenticationComplete",type="flash.events.DRMAuthenticationCompleteEvent")]
public class flash.net.drm.DRMManager extends flash.events.EventDispatcher
{
  native public function DRMManager():*;
  native public function authenticate(serverURL:String,domain:String,username:String,password:String):void;

  native public function setAuthenticationToken(serverUrl:String,domain:String,token:flash.utils.ByteArray):void;
  native public function loadVoucher(contentData:flash.net.drm.DRMContentData,setting:String):void;
  [API("667")]
  native public function loadPreviewVoucher(contentData:flash.net.drm.DRMContentData):void;
  native private function downloadVoucher(contentData:flash.net.drm.DRMContentData,previewVoucher:Boolean = false):void;
  native private function resetDRMVouchersAllowed(isAutoReset:Boolean):Boolean;

  [cppcall]
  native internal function resetDRMVouchersInternal(isAutoReset:Boolean):void;
  [API("690")]
  native public function resetDRMVouchers():void;
  [API("692")]
  native public function addToDeviceGroup(deviceGroup:flash.net.drm.DRMDeviceGroup,forceRefresh:Boolean = false):void;
  [API("692")]
  native public function removeFromDeviceGroup(deviceGroup:flash.net.drm.DRMDeviceGroup):void;
  native private function onDeviceGroupOperationComplete(theEvent:flash.events.DRMDeviceGroupEvent):void;

  native private function onDeviceGroupOperationError(theEvent:flash.events.DRMDeviceGroupErrorEvent):void;
  [API("674")]
  native public function storeVoucher(voucher:flash.utils.ByteArray):void;
  [API("690")]
  native public function returnVoucher(inServerURL:String,immediateCommit:Boolean,licenseID:String,policyID:String):void;
  native private function setSAMLTokenInner(serverUrl:String,domain:String,token:flash.utils.ByteArray):uint;
  native private function onAuthenticationComplete(theEvent:flash.events.DRMAuthenticationCompleteEvent):void;

  native private function onAuthenticationError(theEvent:flash.events.DRMAuthenticationErrorEvent):void;
  native private function onGetVoucherFromStoreComplete(theEvent:flash.events.DRMStatusEvent):void;
  native private function onGetVoucherFromStoreError(theEvent:flash.events.DRMErrorEvent):void;
  native private function onDownloadVoucherComplete(theEvent:flash.events.DRMStatusEvent):void;
  native private function onGetVoucherFromStoreWithAllowServerComplete(theEvent:flash.events.DRMStatusEvent):void;

  native private function onDownloadVoucherError(theEvent:flash.events.DRMErrorEvent):void;
  native private function onGetVoucherFromStoreWithAllowServerError(theEvent:flash.events.DRMErrorEvent):void;
  native private function onResetComplete(theEvent:flash.events.DRMStatusEvent):void;
  native private function onResetError(theEvent:flash.events.DRMErrorEvent):void;
  native private function onStoreVoucherComplete(theEvent:flash.events.DRMStatusEvent):void;

  native private function onStoreVoucherError(theEvent:flash.events.DRMErrorEvent):void;
  native private function onReturnVoucherComplete(theEvent:flash.events.DRMReturnVoucherCompleteEvent):void;
  native private function onReturnVoucherError(theEvent:flash.events.DRMReturnVoucherErrorEvent):void;
  native private function errorCodeToThrow(errorCode:uint):void;
  native private function issueDRMStatusEvent(specificEventType:String,metadata:flash.net.drm.DRMContentData,voucher:flash.net.drm.DRMVoucher,isLocal:Boolean):void;

  native private function issueDRMErrorEvent(metadata:flash.net.drm.DRMContentData,errorID:int,subErrorID:int,serverErrorString:String):void;
  static native private var theManager:DRMManager = null;
  static native private var mNetworkIdleTimeoutInMS:Number = 120000;
  [cppcall]
  static native internal final function getDRMManagerInternal():DRMManager;
  static native public final function getDRMManager():DRMManager;

  static native private final function createDRMManager():DRMManager;
  static native public final function set networkIdleTimeout(timeoutInMS:Number):void;
  static native public final function get networkIdleTimeout():Number;
  [API("667")]
  static native public final function get isSupported():Boolean;
  static native private final function _checkSupported():Boolean;

  static native private final function checkRemoteSWFInvocation():void;
  static native private final function isCalledFromRemoteSWF():Boolean;
}

[native(cls="DRMModuleCycleProviderClass",instance="DRMModuleCycleProviderObject",methods="auto",construct="native")]
public class flash.net.drm.DRMModuleCycleProvider extends Object
{
  native public function DRMModuleCycleProvider():*;
  [cppcall]
  native private function startTimer():void;
  native private function onHeartBeat(ev:flash.events.TimerEvent):*;

  native private function iHeartBeat():Boolean;
  native private var m_heartBeatTimer:flash.utils.Timer;
}

[native(cls="DRMURLDownloadContextClass",instance="DRMURLDownloadContextObject",methods="auto",construct="native")]
public class flash.net.drm.DRMURLDownloadContext extends flash.events.EventDispatcher
{
  native public function DRMURLDownloadContext():*;
  [cppcall]
  [API("708")]
  native public function httpPostAndReceiveASync(url:String,headerName:String,headerValue:String,data:flash.utils.ByteArray,serverType:uint):void;
  [cppcall]
  [API("708")]
  native public function httpGetASync(url:String):void;

  native private function doURLDownload(urlRequest:flash.net.URLRequest):void;
  native private function onTimer(ev:flash.events.TimerEvent):*;
  native private function onProgress(event:flash.events.ProgressEvent):void;
  native private function onAsyncDownloadComplete(event:flash.events.Event):void;
  native private function onAsyncIOError(event:flash.events.Event):void;

  native private function onAsyncSecurityError(event:flash.events.Event):void;
  native private function onHTTPStatus(event:flash.events.Event):void;
  native private function cleanUp():void;
  native private function iOnDownloadComplete(result:flash.utils.ByteArray):void;
  native private function iOnTimeoutError(subErrorCode:uint):void;

  native private function iOnIOError(subErrorCode:uint,msg:String):void;
  native private function iOnSecurityError(msg:String):void;
  native private var httpStatus:uint;
  native private var urlLoader:flash.net.URLLoader;
  native private var networkTimeOutTimer:flash.utils.Timer;

  native private var isDownloading:Boolean;
}


[API("661")]
[native(cls="IconClass",instance="IconObject",methods="auto")]
public class flash.desktop.Icon extends flash.events.EventDispatcher
{
  native public function Icon():*;
  native public function get bitmaps():Array;
  native public function set bitmaps(ba:Array):void;
  native private var _bitmaps:Array;
}


public interface flash.display.IBitmapDrawable
{
}


[native(cls="DisplayObjectClass",gc="exact",instance="DisplayObject",methods="auto",construct="abstract-restricted")]
[Event(name="render",type="flash.events.Event")]
[Event(name="removedFromStage",type="flash.events.Event")]
[Event(name="removed",type="flash.events.Event")]
[Event(name="exitFrame",type="flash.events.Event")]
[Event(name="frameConstructed",type="flash.events.Event")]
[Event(name="enterFrame",type="flash.events.Event")]
[Event(name="addedToStage",type="flash.events.Event")]
[Event(name="added",type="flash.events.Event")]
public class flash.display.DisplayObject extends flash.events.EventDispatcher
  implements flash.display.IBitmapDrawable
{

  native public function DisplayObject():*;
  native public function get root():DisplayObject;
  native public function get stage():flash.display.Stage;
  native public function get name():String;
  native public function set name(value:String):void;

  native public function get parent():flash.display.DisplayObjectContainer;
  native public function get mask():DisplayObject;
  native public function set mask(value:DisplayObject):void;
  native public function get visible():Boolean;
  native public function set visible(value:Boolean):void;

  native public function get x():Number;
  native public function set x(value:Number):void;
  native public function get y():Number;
  native public function set y(value:Number):void;
  [Version("10")]
  native public function get z():Number;

  [Version("10")]
  native public function set z(value:Number):void;
  native public function get scaleX():Number;
  native public function set scaleX(value:Number):void;
  native public function get scaleY():Number;
  native public function set scaleY(value:Number):void;

  [Version("10")]
  native public function get scaleZ():Number;
  [Version("10")]
  native public function set scaleZ(value:Number):void;
  native public function get mouseX():Number;
  native public function get mouseY():Number;
  native public function get rotation():Number;

  native public function set rotation(value:Number):void;
  [Version("10")]
  native public function get rotationX():Number;
  [Version("10")]
  native public function set rotationX(value:Number):void;
  [Version("10")]
  native public function get rotationY():Number;
  [Version("10")]
  native public function set rotationY(value:Number):void;

  [Version("10")]
  native public function get rotationZ():Number;
  [Version("10")]
  native public function set rotationZ(value:Number):void;
  native public function get alpha():Number;
  native public function set alpha(value:Number):void;
  native public function get width():Number;

  native public function set width(value:Number):void;
  native public function get height():Number;
  native public function set height(value:Number):void;
  native public function get cacheAsBitmap():Boolean;
  native public function set cacheAsBitmap(value:Boolean):void;

  native public function get opaqueBackground():Object;
  native public function set opaqueBackground(value:Object):void;
  native public function get scrollRect():flash.geom.Rectangle;
  native public function set scrollRect(value:flash.geom.Rectangle):void;
  native public function get filters():Array;

  native public function set filters(value:Array):void;
  native public function get blendMode():String;
  native public function set blendMode(value:String):void;
  native public function get transform():flash.geom.Transform;
  native public function set transform(value:flash.geom.Transform):void;

  native public function get scale9Grid():flash.geom.Rectangle;
  native public function set scale9Grid(innerRectangle:flash.geom.Rectangle):void;
  native public function globalToLocal(point:flash.geom.Point):flash.geom.Point;
  native public function localToGlobal(point:flash.geom.Point):flash.geom.Point;
  native public function getBounds(targetCoordinateSpace:DisplayObject):flash.geom.Rectangle;

  native public function getRect(targetCoordinateSpace:DisplayObject):flash.geom.Rectangle;
  native public function get loaderInfo():flash.display.LoaderInfo;
  native public function hitTestObject(obj:DisplayObject):Boolean;
  native public function hitTestPoint(x:Number,y:Number,shapeFlag:Boolean = false):Boolean;
  native private function _hitTest(use_xy:Boolean,x:Number,y:Number,useShape:Boolean,hitTestObject:DisplayObject):Boolean;

  native public function get accessibilityProperties():flash.accessibility.AccessibilityProperties;
  native public function set accessibilityProperties(value:flash.accessibility.AccessibilityProperties):void;
  [Version("10")]
  native public function globalToLocal3D(point:flash.geom.Point):flash.geom.Vector3D;
  [Version("10")]
  native public function local3DToGlobal(point3d:flash.geom.Vector3D):flash.geom.Point;
  [Version("10")]
  native public function set blendShader(value:flash.display.Shader):void;

  [API("686")]
  native public function get metaData():Object;
  [API("686")]
  native public function set metaData(data:Object):void;
  [API("668")]
  native public function get cacheAsBitmapMatrix():flash.geom.Matrix;
  [API("668")]
  native public function set cacheAsBitmapMatrix(value:flash.geom.Matrix):void;
}


[native(cls="BitmapClass",gc="exact",instance="BitmapObject",methods="auto")]
public class flash.display.Bitmap extends flash.display.DisplayObject
{
  native public function Bitmap(bitmapData:flash.display.BitmapData = null,pixelSnapping:String = "auto",smoothing:Boolean = false):*;

  native private function ctor(bitmapData:flash.display.BitmapData,pixelSnapping:String,smoothing:Boolean):void;
  native public function get pixelSnapping():String;
  native public function set pixelSnapping(value:String):void;
  native public function get smoothing():Boolean;
  native public function set smoothing(value:Boolean):void;

  native public function get bitmapData():flash.display.BitmapData;
  native public function set bitmapData(value:flash.display.BitmapData):void;
}


[native(cls="DateTimeFormatterClass",instance="DateTimeFormatterObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.DateTimeFormatter extends Object
{
  native public function DateTimeFormatter(requestedLocaleIDName:String,dateStyle:String = "long",timeStyle:String = "long"):*;
  native private function ctor(requestedLocaleIDName:String,dateStyle:String,timeStyle:String):void;
  native public function setDateTimeStyles(dateStyle:String,timeStyle:String):void;

  native public function getTimeStyle():String;
  native public function getDateStyle():String;
  native public function get lastOperationStatus():String;
  native public function get requestedLocaleIDName():String;
  native public function get actualLocaleIDName():String;

  native public function format(dateTime:Date):String;
  native private function formatImplementation(dateTime:Date,utc:Boolean):String;
  native public function formatUTC(dateTime:Date):String;
  native public function getMonthNames(nameStyle:String = "full",context:String = "standalone"):Vector.<String>;
  native public function getWeekdayNames(nameStyle:String = "full",context:String = "standalone"):Vector.<String>;

  native public function getFirstWeekday():int;
  native public function getDateTimePattern():String;
  native public function setDateTimePattern(pattern:String):void;
  static native public final function getAvailableLocaleIDNames():Vector.<String>;
}


[API("670")]
public final class flash.media.VideoStatus extends Object
{
  native public function VideoStatus():*;

  static native public const UNAVAILABLE:String = "unavailable";
  static native public const SOFTWARE:String = "software";
  static native public const ACCELERATED:String = "accelerated";
}

native public function flash.system.fscommand(command:String,args:String = ""):void;

[native(cls="FSCommandClass",methods="auto",construct="none")]
public final class flash.system.FSCommand extends Object
{
  native public function FSCommand():*;

  static native public final function _fscommand(command:String,args:String):void;
}

[native("MacromediaUtilScript::MMExecute")]
native public function adobe.utils.MMExecute(name:String):String;
[native("MacromediaUtilScript::MMEndCommand")]
[Version("10")]
native public function adobe.utils.MMEndCommand(endStatus:Boolean,notifyString:String):void;


[native(cls="ExternalInterfaceClass",methods="auto",construct="none")]
public final class flash.external.ExternalInterface extends Object
{
  native public function ExternalInterface():*;
  static native public final function get available():Boolean;

  static native public var marshallExceptions:Boolean = false;
  static native public final function addCallback(functionName:String,closure:Function):void;
  static native public final function call(functionName:String,... rest):*;
  static native private final function _initJS():void;
  static native private final function _getPropNames(obj:Object):Array;

  static native public final function get objectID():String;
  static native private final function get activeX():Boolean;
  static native private final function _addCallback(functionName:String,closure:Function,hasNullCallback:Boolean):void;
  static native private final function _evalJS(expression:String):String;
  static native private final function _callOut(request:String):String;

  static native private final function _callIn(closure:Function,request:String,args:Array):String;
  static native private final function _arrayToXML(obj:Array):String;
  static native private final function _argumentsToXML(obj:Array):String;
  static native private final function _objectToXML(obj:*):String;
  static native private final function _escapeXML(s:String):String;

  static native private final function _toXML(value:*):String;
  static native private final function _objectToAS(obj:Object):*;
  static native private final function _arrayToAS(obj:Object):*;
  static native private final function _toAS(obj:Object):*;
  static native private final function _argumentsToAS(obj:*):Array;

  static native private final function _arrayToJS(value:Array):String;
  static native private final function _objectToJS(value:*):String;
  static native private final function _quotedStringFromError(err:Error):String;
  static native private final function _quotedStringFromString(str:String):String;
  static native private final function _toJS(value:*):String;
}


[API("668")]
public final class flash.security.CertificateStatus extends Object
{

  native public function CertificateStatus():*;
  static native public const TRUSTED:String = "trusted";
  static native public const UNKNOWN:String = "unknown";
  static native public const INVALID:String = "invalid";
  static native public const EXPIRED:String = "expired";

  static native public const NOT_YET_VALID:String = "notYetValid";
  static native public const PRINCIPAL_MISMATCH:String = "principalMismatch";
  static native public const UNTRUSTED_SIGNERS:String = "untrustedSigners";
  static native public const REVOKED:String = "revoked";
  static native public const INVALID_CHAIN:String = "invalidChain";
}


[native(cls="SecurityClass",gc="exact",methods="auto",construct="none")]
public final class flash.system.Security extends Object
{

  native public function Security():*;
  static native public final function allowDomain(... rest):void;
  static native public final function allowInsecureDomain(... rest):void;
  static native public final function loadPolicyFile(url:String):void;
  static native public final function get exactSettings():Boolean;

  static native public final function set exactSettings(value:Boolean):void;
  [Inspectable(environment="none")]
  static native public final function get disableAVM1Loading():Boolean;
  static native public final function set disableAVM1Loading(value:Boolean):void;
  static native internal final function duplicateSandboxBridgeInputArguments(toplevel:Object,args:Array):Array;
  static native internal final function duplicateSandboxBridgeOutputArgument(toplevel:Object,arg:*):*;

  [cppcall]
  static native private final function createSandboxBridgeProxyFunction(targetFunc:Object,targetObj:Object,srcToplevel:Object,destToplevel:Object):Object;
  static native public final function showSettings(panel:String = "default"):void;
  static native public final function get sandboxType():String;
  static native public const REMOTE:String = "remote";
  static native public const LOCAL_WITH_FILE:String = "localWithFile";

  static native public const LOCAL_WITH_NETWORK:String = "localWithNetwork";
  static native public const LOCAL_TRUSTED:String = "localTrusted";
  [API("661")]
  static native public const APPLICATION:String = "application";
  [API("672")]
  static native public final function get pageDomain():String;
}


[native(cls="EventClass",gc="exact",instance="EventObject",methods="auto")]
public class flash.events.Event extends Object
{
  native public function Event(type:String,bubbles:Boolean = false,cancelable:Boolean = false):*;

  native public function formatToString(className:String,... rest):String;
  native private function ctor(type:String,bubbles:Boolean,cancelable:Boolean):void;
  native public function clone():Event;
  native public function toString():String;
  native public function get type():String;

  native public function get bubbles():Boolean;
  native public function get cancelable():Boolean;
  native public function get target():Object;
  native public function get currentTarget():Object;
  native public function get eventPhase():uint;

  native public function stopPropagation():void;
  native public function stopImmediatePropagation():void;
  native public function preventDefault():void;
  native public function isDefaultPrevented():Boolean;
  static native public const ACTIVATE:String = "activate";

  static native public const ADDED:String = "added";
  static native public const ADDED_TO_STAGE:String = "addedToStage";
  static native public const BROWSER_ZOOM_CHANGE:String = "browserZoomChange";
  static native public const CANCEL:String = "cancel";
  static native public const CHANGE:String = "change";

  static native public const CLEAR:String = "clear";
  static native public const CLOSE:String = "close";
  static native public const COMPLETE:String = "complete";
  static native public const CONNECT:String = "connect";
  static native public const COPY:String = "copy";

  static native public const CUT:String = "cut";
  static native public const DEACTIVATE:String = "deactivate";
  static native public const ENTER_FRAME:String = "enterFrame";
  static native public const FRAME_CONSTRUCTED:String = "frameConstructed";
  static native public const EXIT_FRAME:String = "exitFrame";

  static native public const FRAME_LABEL:String = "frameLabel";
  static native public const ID3:String = "id3";
  static native public const INIT:String = "init";
  static native public const MOUSE_LEAVE:String = "mouseLeave";
  static native public const OPEN:String = "open";

  static native public const PASTE:String = "paste";
  static native public const REMOVED:String = "removed";
  static native public const REMOVED_FROM_STAGE:String = "removedFromStage";
  static native public const RENDER:String = "render";
  static native public const RESIZE:String = "resize";

  static native public const SCROLL:String = "scroll";
  static native public const TEXT_INTERACTION_MODE_CHANGE:String = "textInteractionModeChange";
  static native public const SELECT:String = "select";
  static native public const SELECT_ALL:String = "selectAll";
  static native public const SOUND_COMPLETE:String = "soundComplete";

  static native public const TAB_CHILDREN_CHANGE:String = "tabChildrenChange";
  static native public const TAB_ENABLED_CHANGE:String = "tabEnabledChange";
  static native public const TAB_INDEX_CHANGE:String = "tabIndexChange";
  static native public const UNLOAD:String = "unload";
  static native public const FULLSCREEN:String = "fullScreen";

  [API("667")]
  static native public const CONTEXT3D_CREATE:String = "context3DCreate";
  [API("667")]
  static native public const TEXTURE_READY:String = "textureReady";
  [API("682")]
  static native public const VIDEO_FRAME:String = "videoFrame";
  [API("681")]
  static native public const SUSPEND:String = "suspend";
  [API("682")]
  static native public const CHANNEL_MESSAGE:String = "channelMessage";

  [API("682")]
  static native public const CHANNEL_STATE:String = "channelState";
  [API("682")]
  static native public const WORKER_STATE:String = "workerState";
  static native public const CLOSING:String = "closing";
  static native public const EXITING:String = "exiting";
  static native public const DISPLAYING:String = "displaying";

  [API("671")]
  static native public const PREPARING:String = "preparing";
  static native public const NETWORK_CHANGE:String = "networkChange";
  static native public const USER_IDLE:String = "userIdle";
  static native public const USER_PRESENT:String = "userPresent";
  [API("668")]
  static native public const STANDARD_OUTPUT_CLOSE:String = "standardOutputClose";

  [API("668")]
  static native public const STANDARD_ERROR_CLOSE:String = "standardErrorClose";
  [API("668")]
  static native public const STANDARD_INPUT_CLOSE:String = "standardInputClose";
  static native public const HTML_BOUNDS_CHANGE:String = "htmlBoundsChange";
  static native public const HTML_RENDER:String = "htmlRender";
  static native public const HTML_DOM_INITIALIZE:String = "htmlDOMInitialize";

  static native public const LOCATION_CHANGE:String = "locationChange";
}


[native(cls="KeyboardEventClass",gc="exact",instance="KeyboardEventObject",methods="auto")]
public class flash.events.KeyboardEvent extends flash.events.Event
{
  native public function KeyboardEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,charCodeValue:uint = 0,keyCodeValue:uint = 0,keyLocationValue:uint = 0,ctrlKeyValue:Boolean = false,altKeyValue:Boolean = false,shiftKeyValue:Boolean = false,controlKeyValue:Boolean = false,commandKeyValue:Boolean = false):*;
  native private var m_keyLocation:uint;
  native private var m_keyCode:uint;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native public function get charCode():uint;
  native public function set charCode(value:uint):void;
  native public function get keyCode():uint;
  native public function set keyCode(value:uint):void;

  native public function get keyLocation():uint;
  native public function set keyLocation(value:uint):void;
  native public function get ctrlKey():Boolean;
  native public function set ctrlKey(value:Boolean):void;
  native public function get altKey():Boolean;

  native public function set altKey(value:Boolean):void;
  native public function get shiftKey():Boolean;
  native public function set shiftKey(value:Boolean):void;
  native public function updateAfterEvent():void;
  native private var m_controlKey:Boolean;

  [API("661")]
  native public function get controlKey():Boolean;
  [API("661")]
  native public function set controlKey(value:Boolean):void;
  [API("661")]
  native public function get commandKey():Boolean;
  [API("661")]
  native public function set commandKey(value:Boolean):void;
  static native public const KEY_DOWN:String = "keyDown";

  static native public const KEY_UP:String = "keyUp";
}


public class flash.desktop.NativeDragOptions extends Object
{
  native public function NativeDragOptions():*;
  native public var allowCopy:Boolean = true;
  native public var allowMove:Boolean = true;
  native public var allowLink:Boolean = true;

  native public function toString():String;
}

public class flash.desktop.NativeDragActions extends Object
{
  native public function NativeDragActions():*;
  static native public const COPY:String = "copy";
  static native public const MOVE:String = "move";
  static native public const LINK:String = "link";

  static native public const NONE:String = "none";
}

[native("FlashNetScript::navigateToURL")]
native public function flash.net.navigateToURL(request:flash.net.URLRequest,window:String = null):void;
[native("FlashNetScript::sendToURL")]
native public function flash.net.sendToURL(request:flash.net.URLRequest):void;


[API("670")]
public class flash.events.SoftKeyboardTrigger extends Object
{
  native public function SoftKeyboardTrigger():*;
  static native public const CONTENT_TRIGGERED:String = "contentTriggered";

  static native public const USER_TRIGGERED:String = "userTriggered";
}


[API("686")]
public final class flash.display3D.Context3DTextureFilter extends Object
{
  native public function Context3DTextureFilter():*;
  static native public const NEAREST:String = "nearest";
  static native public const LINEAR:String = "linear";
  [API("698")]
  static native public const ANISOTROPIC2X:String = "anisotropic2x";

  [API("698")]
  static native public const ANISOTROPIC4X:String = "anisotropic4x";
  [API("698")]
  static native public const ANISOTROPIC8X:String = "anisotropic8x";
  [API("698")]
  static native public const ANISOTROPIC16X:String = "anisotropic16x";
}


[native(cls="FilePromiseWrapperClass",instance="FilePromiseWrapperObject",methods="auto")]
public class flash.desktop.FilePromiseWrapper extends Object
{
  native public function FilePromiseWrapper(fp:flash.desktop.IFilePromise):*;
  native private function nativeInitMethodClosures(promiseOpenClosure:Function,promiseCloseClosure:Function,promiseReportErrorClosure:Function,promiseFilePathClosure:Function,promiseIsAsyncClosure:Function):void;

  native private function nativeOnDataSourceEvent(type:String):void;
  native private function nativeOnDataSourceProgress(bytesLoaded:int,bytesTotal:int):void;
  native private function nativeOnDataSourceIOError(errorText:String,errorCode:int,e:flash.events.ErrorEvent):void;
  native private function nativeOnDataSourceSecurityError(errorText:String,errorCode:int,e:flash.events.ErrorEvent):void;
  native private function nativeOnHTTPStatus(status:int,e:flash.events.Event):void;

  native private var _filePromise:flash.desktop.IFilePromise;
  native private var _dataSource:flash.utils.IDataInput;
  native private function registerEventHandlers(obj:flash.events.IEventDispatcher):void;
  native private function unregisterEventHandlers(obj:flash.events.IEventDispatcher):void;
  native private function onDataSourceEvent(e:flash.events.Event):void;

  native private function onDataSourceProgress(e:flash.events.ProgressEvent):void;
  native private function onDataSourceIOError(e:flash.events.IOErrorEvent):void;
  native private function onDataSourceSecurityError(e:flash.events.SecurityErrorEvent):void;
  native private function onHTTPStatus(e:flash.events.HTTPStatusEvent):void;
  native private function open():flash.utils.IDataInput;

  native private function close():void;
  native private function reportError(e:flash.events.ErrorEvent):void;
  native private function relativePath():String;
  native private function isAsync():Boolean;
  native public function get filePromise():flash.desktop.IFilePromise;
}


[API("674")]
public final class flash.display3D.Context3DRenderMode extends Object
{

  native public function Context3DRenderMode():*;
  static native public const AUTO:String = "auto";
  static native public const SOFTWARE:String = "software";
}


[native(cls="GameInputControlClass",instance="GameInputControlObject",methods="auto",construct="native")]
[API("688")]
[Event(name="change",type="flash.events.Event")]
public dynamic class flash.ui.GameInputControl extends flash.events.EventDispatcher
{
  native public function GameInputControl():*;
  native public function get value():Number;

  native public function get minValue():Number;
  native public function get maxValue():Number;
  native public function get device():flash.ui.GameInputDevice;
  native public function get id():String;
}


[native(cls="MatrixClass",gc="exact",instance="MatrixObject",methods="auto")]
public class flash.geom.Matrix extends Object
{
  native public function Matrix(a:Number = 1,b:Number = 0,c:Number = 0,d:Number = 1,tx:Number = 0,ty:Number = 0):*;

  native public var a:Number;
  native public var b:Number;
  native public var c:Number;
  native public var d:Number;
  native public var tx:Number;

  native public var ty:Number;
  native public function clone():Matrix;
  native public function concat(m:Matrix):void;
  native public function invert():void;
  native public function identity():void;

  native public function createBox(scaleX:Number,scaleY:Number,rotation:Number = 0,tx:Number = 0,ty:Number = 0):void;
  native public function createGradientBox(width:Number,height:Number,rotation:Number = 0,tx:Number = 0,ty:Number = 0):void;
  native public function rotate(angle:Number):void;
  native public function translate(dx:Number,dy:Number):void;
  native public function scale(sx:Number,sy:Number):void;

  native public function deltaTransformPoint(point:flash.geom.Point):flash.geom.Point;
  native public function transformPoint(point:flash.geom.Point):flash.geom.Point;
  native public function toString():String;
  [API("674")]
  native public function copyFrom(sourceMatrix:Matrix):void;
  [API("674")]
  native public function setTo(aa:Number,ba:Number,ca:Number,da:Number,txa:Number,tya:Number):void;

  [API("674")]
  native public function copyRowTo(row:uint,vector3D:flash.geom.Vector3D):void;
  [API("674")]
  native public function copyColumnTo(column:uint,vector3D:flash.geom.Vector3D):void;
  [API("674")]
  native public function copyRowFrom(row:uint,vector3D:flash.geom.Vector3D):void;
  [API("674")]
  native public function copyColumnFrom(column:uint,vector3D:flash.geom.Vector3D):void;
}


[API("676")]
public final class flash.events.ThrottleType extends Object
{
  native public function ThrottleType():*;

  static native public const THROTTLE:String = "throttle";
  static native public const PAUSE:String = "pause";
  static native public const RESUME:String = "resume";
}


[Version("air2.0")]
public class flash.events.StageOrientationEvent extends flash.events.Event
{
  native public function StageOrientationEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,beforeOrientation:String = null,afterOrientation:String = null):*;
  native private var m_beforeOrientation:String;

  native private var m_afterOrientation:String;
  native public override function clone():flash.events.Event;
  native public function get beforeOrientation():String;
  native public function get afterOrientation():String;
  native public override function toString():String;

  static native public const ORIENTATION_CHANGING:String = "orientationChanging";
  static native public const ORIENTATION_CHANGE:String = "orientationChange";
}


[API("670")]
public final class flash.text.TextInteractionMode extends Object
{
  native public function TextInteractionMode():*;
  static native public const NORMAL:String = "normal";
  static native public const SELECTION:String = "selection";
}


[API("661")]
public class flash.events.FileListEvent extends flash.events.Event
{

  native public function FileListEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,files:Array = null):*;
  [ArrayElementType("flash.filesystem.File")]
  native public var files:Array;
  static native public const DIRECTORY_LISTING:String = "directoryListing";
  static native public const SELECT_MULTIPLE:String = "selectMultiple";
}


public final class flash.filters.DisplacementMapFilterMode extends Object
{
  native public function DisplacementMapFilterMode():*;

  static native public const WRAP:String = "wrap";
  static native public const CLAMP:String = "clamp";
  static native public const IGNORE:String = "ignore";
  static native public const COLOR:String = "color";
}


[native(cls="RectangleClass",gc="exact",instance="RectangleObject",methods="auto")]
public class flash.geom.Rectangle extends Object
{
  native public function Rectangle(x:Number = 0,y:Number = 0,width:Number = 0,height:Number = 0):*;

  native public var x:Number;
  native public var y:Number;
  native public var width:Number;
  native public var height:Number;
  native public function get left():Number;

  native public function set left(value:Number):void;
  native public function get right():Number;
  native public function set right(value:Number):void;
  native public function get top():Number;
  native public function set top(value:Number):void;

  native public function get bottom():Number;
  native public function set bottom(value:Number):void;
  native public function get topLeft():flash.geom.Point;
  native public function set topLeft(value:flash.geom.Point):void;
  native public function get bottomRight():flash.geom.Point;

  native public function set bottomRight(value:flash.geom.Point):void;
  native public function get size():flash.geom.Point;
  native public function set size(value:flash.geom.Point):void;
  native public function clone():Rectangle;
  native public function isEmpty():Boolean;

  native public function setEmpty():void;
  native public function inflate(dx:Number,dy:Number):void;
  native public function inflatePoint(point:flash.geom.Point):void;
  native public function offset(dx:Number,dy:Number):void;
  native public function offsetPoint(point:flash.geom.Point):void;

  native public function contains(x:Number,y:Number):Boolean;
  native public function containsPoint(point:flash.geom.Point):Boolean;
  native public function containsRect(rect:Rectangle):Boolean;
  native public function intersection(toIntersect:Rectangle):Rectangle;
  native public function intersects(toIntersect:Rectangle):Boolean;

  native public function union(toUnion:Rectangle):Rectangle;
  native public function equals(toCompare:Rectangle):Boolean;
  native public function toString():String;
  [API("674")]
  native public function copyFrom(sourceRect:Rectangle):void;
  [API("674")]
  native public function setTo(xa:Number,ya:Number,widtha:Number,heighta:Number):void;
}


[native(construct="native")]
[API("661")]
public class flash.desktop.JSClipboard extends Object
{

  native public function JSClipboard(writable:Boolean,forDragging:Boolean,clipboard:flash.desktop.Clipboard = null,dragOptions:flash.desktop.NativeDragOptions = null):*;
  native private var _writable:Boolean;
  native private var _forDragging:Boolean;
  native private var _clipboard:flash.desktop.Clipboard;
  native private var _dragOptions:flash.desktop.NativeDragOptions;

  native private var _dropAction:String;
  native private var _propagationStopped:Boolean = false;
  native public function get dropEffect():String;
  native public function set dropEffect(effect:String):void;
  native public function get effectAllowed():String;

  native public function set effectAllowed(effectAllowed:String):void;
  native public function get propagationStopped():Boolean;
  native public function set propagationStopped(stopped:Boolean):void;
  native public function getData(mimeType:String):Object;
  native public function setData(mimeType:String,data:Object):Boolean;

  native public function clearData(mimeType:String):void;
  native public function clearAllData():void;
  native public function get types():Array;
  native public function get dragOptions():flash.desktop.NativeDragOptions;
  native public function set dragOptions(dragOptions:flash.desktop.NativeDragOptions):void;

  native public function get clipboard():flash.desktop.Clipboard;
  static native private const TEXT_TYPE:String = "text/plain";
  static native private const HTML_TYPE:String = "text/html";
  static native private const URI_LIST_TYPE:String = "text/uri-list";
  static native private const BITMAP_TYPE:String = "image/x-vnd.adobe.air.bitmap";

  static native private const FILE_LIST_TYPE:String = "application/x-vnd.adobe.air.file-list";
  static native private const _dropEffectNames:Array;
  static native public final function urisFromURIList(uriList:String):Array;
}

[API("661")]
[native(cls="DragManagerClass",methods="auto",construct="none")]
public class flash.desktop.NativeDragManager extends Object
{
  native public function NativeDragManager():*;
  static native public final function get dropAction():String;

  static native public final function set dropAction(dropAction:String):void;
  static native public final function acceptDragDrop(target:flash.display.InteractiveObject):void;
  static native public final function get isDragging():Boolean;
  static native public final function get dragInitiator():flash.display.InteractiveObject;
  static native public final function doDrag(dragInitiator:flash.display.InteractiveObject,clipboard:flash.desktop.Clipboard,dragImage:flash.display.BitmapData = null,offset:flash.geom.Point = null,allowedActions:flash.desktop.NativeDragOptions = null):void;

  [Version("air2.0")]
  static native public final function get isSupported():Boolean;
}


[API("667")]
public final class flash.net.drm.AuthenticationMethod extends Object
{
  native public function AuthenticationMethod():*;
  static native public const ANONYMOUS:String = "anonymous";
  static native public const USERNAME_AND_PASSWORD:String = "usernameAndPassword";
}

[API("667")]
public final class flash.net.drm.LoadVoucherSetting extends Object
{
  native public function LoadVoucherSetting():*;

  static native public const FORCE_REFRESH:String = "forceRefresh";
  static native public const LOCAL_ONLY:String = "localOnly";
  static native public const ALLOW_SERVER:String = "allowServer";
}

public final class flash.net.drm.AddToDeviceGroupSetting extends Object
{
  native public function AddToDeviceGroupSetting():*;
  static native public const FORCE_REFRESH:String = "forceRefresh";

  static native public const LOCAL_ONLY:String = "localOnly";
  static native public const ALLOW_SERVER:String = "allowServer";
}


[native(cls="TimerClass",gc="exact",instance="TimerObject",methods="auto")]
[Event(name="timerComplete",type="flash.events.TimerEvent")]
[Event(name="timer",type="flash.events.TimerEvent")]
public class flash.utils.Timer extends flash.events.EventDispatcher
{
  native public function Timer(delay:Number,repeatCount:int = 0):*;
  native private var m_delay:Number;
  native private var m_repeatCount:int;

  native private var m_iteration:int;
  native public function get delay():Number;
  native public function get repeatCount():int;
  native public function set repeatCount(value:int):void;
  native public function get currentCount():int;

  native public function get running():Boolean;
  native public function set delay(value:Number):void;
  native private function tick():void;
  native public function start():void;
  native public function reset():void;

  native private function _start(delay:Number,closure:Function):void;
  native private function _timerDispatch():void;
  native public function stop():void;
}


public final class flash.utils.SetIntervalTimer extends flash.utils.Timer
{
  native public function SetIntervalTimer(closure:Function,delay:Number,repeats:Boolean,rest:Array):*;
  native private function onTimer(event:flash.events.Event):void;

  native internal var id:uint;
  native private var closure:Function;
  native private var rest:Array;
  static native internal final function clearInterval(id_to_clear:uint):void;
  static native private var intervals:Array;
}

native public function flash.utils.setInterval(closure:Function,delay:Number,... rest):uint;
native public function flash.utils.setTimeout(closure:Function,delay:Number,... rest):uint;
native public function flash.utils.clearInterval(id:uint):void;
native public function flash.utils.clearTimeout(id:uint):void;


[Version("air2.0")]
public final class flash.printing.PaperSize extends Object
{
  native public function PaperSize():*;

  static native public const LETTER:String = "letter";
  static native public const LEGAL:String = "legal";
  static native public const EXECUTIVE:String = "executive";
  static native public const STATEMENT:String = "statement";
  static native public const FOLIO:String = "folio";

  static native public const ENV_10:String = "env_10";
  static native public const ENV_MONARCH:String = "env_monarch";
  static native public const A4:String = "a4";
  static native public const A5:String = "a5";
  static native public const A6:String = "a6";

  static native public const ENV_B5:String = "env_b5";
  static native public const JIS_B5:String = "jis_b5";
  static native public const ENV_DL:String = "env_dl";
  static native public const ENV_C5:String = "env_c5";
  static native public const CHOUKEI3GOU:String = "choukei3gou";

  static native public const CHOUKEI4GOU:String = "choukei4gou";
  static native public const ENV_PERSONAL:String = "env_personal";
}


[native(cls="TextJustifierClass",instance="TextJustifierObject",methods="auto")]
[Version("10")]
public class flash.text.engine.TextJustifier extends Object
{
  native public function TextJustifier(locale:String,lineJustification:String):*;
  native public function get locale():String;
  native private function setLocale(value:String):void;

  native public function get lineJustification():String;
  native public function set lineJustification(value:String):void;
  native public function clone():TextJustifier;
  static native public final function getJustifierForLocale(locale:String):TextJustifier;
}


[API("661")]
public class flash.data.SQLMode extends Object
{
  native public function SQLMode():*;

  static native public const CREATE:String = "create";
  static native public const READ:String = "read";
  static native public const UPDATE:String = "update";
}


[native(cls="AccelerometerClass",instance="AccelerometerObject",methods="auto")]
[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="update",type="flash.events.AccelerometerEvent")]
[Version("10.1")]
public class flash.sensors.Accelerometer extends flash.events.EventDispatcher
{
  native public function Accelerometer():*;
  native public function setRequestedUpdateInterval(interval:Number):void;

  native public function get muted():Boolean;
  static native public final function get isSupported():Boolean;
}


[native(cls="MicrophoneClass",instance="MicrophoneObject",methods="auto",construct="check")]
public final class flash.media.Microphone extends flash.events.EventDispatcher
{
  native public function Microphone():*;
  native public function set gain(gain:Number):void;
  native public function set rate(rate:int):void;

  native public function get rate():int;
  [Version("10")]
  native public function set codec(codec:String):void;
  [Version("10")]
  native public function get codec():String;
  [Version("10")]
  native public function get framesPerPacket():int;
  [Version("10")]
  native public function set framesPerPacket(frames:int):void;

  [Version("10")]
  native public function get encodeQuality():int;
  [Version("10")]
  native public function set encodeQuality(quality:int):void;
  [Version("10.1")]
  native public function get noiseSuppressionLevel():int;
  [Version("10.1")]
  native public function set noiseSuppressionLevel(level:int):void;
  [Version("10.1")]
  native public function get enableVAD():Boolean;

  [Version("10.1")]
  native public function set enableVAD(enable:Boolean):void;
  native public function setSilenceLevel(silenceLevel:Number,timeout:int = -1):void;
  native public function setUseEchoSuppression(useEchoSuppression:Boolean):void;
  native public function get activityLevel():Number;
  native public function get gain():Number;

  native public function get index():int;
  native public function get muted():Boolean;
  native public function get name():String;
  native public function get silenceLevel():Number;
  native public function get silenceTimeout():int;

  native public function get useEchoSuppression():Boolean;
  native public function setLoopBack(state:Boolean = true):void;
  native public function get soundTransform():flash.media.SoundTransform;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  [API("672")]
  native public function get enhancedOptions():flash.media.MicrophoneEnhancedOptions;

  [API("672")]
  native public function set enhancedOptions(options:flash.media.MicrophoneEnhancedOptions):void;
  static native public final function getMicrophone(index:int = -1):Microphone;
  static native public final function get names():Array;
  [Version("10.1")]
  static native public final function get isSupported():Boolean;
  [API("672")]
  static native public final function getEnhancedMicrophone(index:int = -1):Microphone;
}


[API("661")]
public final class flash.display.NativeWindowSystemChrome extends Object
{

  native public function NativeWindowSystemChrome():*;
  static native public const NONE:String = "none";
  static native public const STANDARD:String = "standard";
  static native public const ALTERNATE:String = "alternate";
}


[native(cls="TextureBase3DClass",instance="TextureBase3DObject",methods="auto")]
[API("674")]
public class flash.display3D.textures.TextureBase extends flash.events.EventDispatcher
{
  native public function TextureBase():*;

  native public function dispose():void;
}


[native(cls="Texture3DClass",instance="Texture3DObject",methods="auto",construct="native")]
[API("674")]
public final class flash.display3D.textures.Texture extends flash.display3D.textures.TextureBase
{
  native public function Texture():*;
  native public function uploadFromBitmapData(source:flash.display.BitmapData,miplevel:uint = 0):void;
  native public function uploadFromByteArray(data:flash.utils.ByteArray,byteArrayOffset:uint,miplevel:uint = 0):void;
  native public function uploadCompressedTextureFromByteArray(data:flash.utils.ByteArray,byteArrayOffset:uint,async:Boolean = false):void;
}


[native(cls="DRMDeviceGroupClass",instance="DRMDeviceGroupObject",methods="auto",friend="DRMContentDataObject")]
[API("692")]
public final class flash.net.drm.DRMDeviceGroup extends Object
{

  native public function DRMDeviceGroup():*;
  native public function get serverURL():String;
  native public function get authenticationMethod():String;
  native public function get domain():String;
  native public function get name():String;

  native public function set name(value:String):void;
  native private var m_authMethod:String;
  native private var m_url:String;
  native private var m_domain:String;
  [cppcall]
  native private function setFields(inUrl:String,inAuthMethod:String,inDomain:String):*;
}


[native(cls="TextureVideo3DClass",instance="TextureVideo3DObject",methods="auto",construct="native")]
[Event(name="renderState",type="flash.events.TextureVideoEvent")]
public final class flash.display3D.textures.VideoTexture extends flash.display3D.textures.TextureBase
{

  native public function VideoTexture():*;
  [API("705")]
  native public function attachNetStream(netStream:flash.net.NetStream):void;
  [API("705")]
  native public function attachCamera(theCamera:flash.media.Camera):void;
  [API("705")]
  native public function get videoWidth():int;
  [API("705")]
  native public function get videoHeight():int;
}


[API("683")]
public final class flash.events.RemoteNotificationEvent extends flash.events.Event
{

  native public function RemoteNotificationEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,data:Object = null,tokenId:String = null):*;
  native private var m_data:Object;
  native private var m_tokenId:String;
  native public function get data():Object;
  native public function get tokenId():String;

  static native public const NOTIFICATION:String = "notification";
  static native public const TOKEN:String = "token";
}


[native(cls="InteractiveObjectClass",gc="exact",instance="InteractiveObject",methods="auto",construct="abstract-restricted")]
[Event(name="softKeyboardDeactivate",type="flash.events.SoftKeyboardEvent")]
[Event(name="softKeyboardActivate",type="flash.events.SoftKeyboardEvent")]
[Event(name="softKeyboardActivating",type="flash.events.SoftKeyboardEvent")]
[Event(name="textInput",type="flash.events.TextEvent")]
[Event(name="imeStartComposition",type="flash.events.IMEEvent")]
[Event(name="contextMenu",type="flash.events.MouseEvent")]
[Event(name="nativeDragComplete",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragUpdate",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragStart",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragExit",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragDrop",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragOver",type="flash.events.NativeDragEvent")]
[Event(name="nativeDragEnter",type="flash.events.NativeDragEvent")]
[Event(name="tabIndexChange",type="flash.events.Event")]
[Event(name="tabEnabledChange",type="flash.events.Event")]
[Event(name="tabChildrenChange",type="flash.events.Event")]
[Event(name="keyUp",type="flash.events.KeyboardEvent")]
[Event(name="keyDown",type="flash.events.KeyboardEvent")]
[Event(name="rightMouseUp",type="flash.events.MouseEvent")]
[Event(name="rightMouseDown",type="flash.events.MouseEvent")]
[Event(name="rightClick",type="flash.events.MouseEvent")]
[Event(name="middleMouseUp",type="flash.events.MouseEvent")]
[Event(name="middleMouseDown",type="flash.events.MouseEvent")]
[Event(name="middleClick",type="flash.events.MouseEvent")]
[Event(name="gestureSwipe",type="flash.events.TransformGestureEvent")]
[Event(name="gestureZoom",type="flash.events.TransformGestureEvent")]
[Event(name="gestureRotate",type="flash.events.TransformGestureEvent")]
[Event(name="gestureTap",type="flash.events.TapGestureEvent")]
[Event(name="gesturePan",type="flash.events.TransformGestureEvent")]
[Event(name="gestureLongPress",type="flash.events.TapGestureEvent")]
[Event(name="touchTap",type="flash.events.TouchEvent")]
[Event(name="touchRollOver",type="flash.events.TouchEvent")]
[Event(name="touchRollOut",type="flash.events.TouchEvent")]
[Event(name="touchOver",type="flash.events.TouchEvent")]
[Event(name="touchOut",type="flash.events.TouchEvent")]
[Event(name="proximityRollOver",type="flash.events.TouchEvent")]
[Event(name="proximityRollOut",type="flash.events.TouchEvent")]
[Event(name="proximityOver",type="flash.events.TouchEvent")]
[Event(name="proximityOut",type="flash.events.TouchEvent")]
[Event(name="proximityMove",type="flash.events.TouchEvent")]
[Event(name="proximityEnd",type="flash.events.TouchEvent")]
[Event(name="proximityBegin",type="flash.events.TouchEvent")]
[Event(name="touchMove",type="flash.events.TouchEvent")]
[Event(name="touchEnd",type="flash.events.TouchEvent")]
[Event(name="touchBegin",type="flash.events.TouchEvent")]
[Event(name="rollOver",type="flash.events.MouseEvent")]
[Event(name="rollOut",type="flash.events.MouseEvent")]
[Event(name="mouseWheel",type="flash.events.MouseEvent")]
[Event(name="releaseOutside",type="flash.events.MouseEvent")]
[Event(name="mouseUp",type="flash.events.MouseEvent")]
[Event(name="mouseOver",type="flash.events.MouseEvent")]
[Event(name="mouseOut",type="flash.events.MouseEvent")]
[Event(name="mouseMove",type="flash.events.MouseEvent")]
[Event(name="mouseDown",type="flash.events.MouseEvent")]
[Event(name="doubleClick",type="flash.events.MouseEvent")]
[Event(name="click",type="flash.events.MouseEvent")]
[Event(name="mouseFocusChange",type="flash.events.FocusEvent")]
[Event(name="keyFocusChange",type="flash.events.FocusEvent")]
[Event(name="focusOut",type="flash.events.FocusEvent")]
[Event(name="focusIn",type="flash.events.FocusEvent")]
[Event(name="selectAll",type="flash.events.Event")]
[Event(name="paste",type="flash.events.Event")]
[Event(name="cut",type="flash.events.Event")]
[Event(name="copy",type="flash.events.Event")]
[Event(name="clear",type="flash.events.Event")]
public class flash.display.InteractiveObject extends flash.display.DisplayObject
{
  native public function InteractiveObject():*;
  native public function get tabEnabled():Boolean;
  native public function set tabEnabled(enabled:Boolean):void;

  native public function get tabIndex():int;
  native public function set tabIndex(index:int):void;
  native public function get focusRect():Object;
  native public function set focusRect(focusRect:Object):void;
  native public function get mouseEnabled():Boolean;

  native public function set mouseEnabled(enabled:Boolean):void;
  native public function get doubleClickEnabled():Boolean;
  native public function set doubleClickEnabled(enabled:Boolean):void;
  [Inspectable(environment="none")]
  native public function get accessibilityImplementation():flash.accessibility.AccessibilityImplementation;
  native public function set accessibilityImplementation(value:flash.accessibility.AccessibilityImplementation):void;

  [API("670")]
  native public function get softKeyboardInputAreaOfInterest():flash.geom.Rectangle;
  [API("670")]
  native public function set softKeyboardInputAreaOfInterest(value:flash.geom.Rectangle):void;
  [API("670")]
  native public function get needsSoftKeyboard():Boolean;
  [API("670")]
  native public function set needsSoftKeyboard(value:Boolean):void;
  [API("670")]
  native public function requestSoftKeyboard():Boolean;

  native private var m_contextMenu:flash.display.NativeMenu = null;
  native public function get contextMenu():flash.display.NativeMenu;
  native public function set contextMenu(cm:flash.display.NativeMenu):void;
  native private function _getEditString(key:String):String;
  native private function _doCommand(cmd:String):void;

  native private var _cutItem:flash.display.NativeMenuItem;
  native private var _copyItem:flash.display.NativeMenuItem;
  native private var _deleteItem:flash.display.NativeMenuItem;
  native private var _pasteItem:flash.display.NativeMenuItem;
  native private var _selectAllItem:flash.display.NativeMenuItem;

  native private function _defaultFP9ContextMenu():flash.display.NativeMenu;
  native private function onContextMenuEvent(event:flash.events.MouseEvent):void;
  native private function _setContextMenuOwner():void;
  native private function _isRichTextEditor():Boolean;
  native private function _getTextLinkAtMouse(event:flash.events.MouseEvent):String;

  native private function get clipboardItems():flash.ui.ContextMenuClipboardItems;
  native private function configureClipboardItems(items:flash.ui.ContextMenuClipboardItems):*;
  native private function _textCanCut():Boolean;
  native private function _textCanCopy():Boolean;
  native private function _textCanPaste():Boolean;

  native private function _textCanClear():Boolean;
}


[native(cls="ContainerClass",gc="exact",instance="ContainerObject",methods="auto",construct="abstract-restricted")]
public class flash.display.DisplayObjectContainer extends flash.display.InteractiveObject
{
  native public function DisplayObjectContainer():*;
  [cppcall]
  native public function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  native public function removeChild(child:flash.display.DisplayObject):flash.display.DisplayObject;

  native public function removeChildAt(index:int):flash.display.DisplayObject;
  native public function getChildIndex(child:flash.display.DisplayObject):int;
  native public function setChildIndex(child:flash.display.DisplayObject,index:int):void;
  native public function getChildAt(index:int):flash.display.DisplayObject;
  native public function getChildByName(name:String):flash.display.DisplayObject;

  native public function get numChildren():int;
  native public function get textSnapshot():flash.text.TextSnapshot;
  native public function getObjectsUnderPoint(point:flash.geom.Point):Array;
  native public function areInaccessibleObjectsUnderPoint(point:flash.geom.Point):Boolean;
  native public function get tabChildren():Boolean;

  native public function set tabChildren(enable:Boolean):void;
  native public function get mouseChildren():Boolean;
  native public function set mouseChildren(enable:Boolean):void;
  native public function contains(child:flash.display.DisplayObject):Boolean;
  native public function swapChildrenAt(index1:int,index2:int):void;

  native public function swapChildren(child1:flash.display.DisplayObject,child2:flash.display.DisplayObject):void;
  [API("674")]
  native public function removeChildren(beginIndex:int = 0,endIndex:int = 2147483647):void;
  [API("690")]
  native public function stopAllMovieClips():void;
}


[API("661")]
public final class flash.display.FocusDirection extends Object
{
  native public function FocusDirection():*;
  static native public const TOP:String = "top";

  static native public const BOTTOM:String = "bottom";
  static native public const NONE:String = "none";
}

[native(cls="StageClass",gc="exact",instance="StageObject",methods="auto",construct="native")]
[Event(name="stageVideoAvailability",type="flash.events.StageVideoAvailabilityEvent")]
[Event(name="orientationChange",type="flash.events.StageOrientationEvent")]
[Event(name="orientationChanging",type="flash.events.StageOrientationEvent")]
[Event(name="fullScreen",type="flash.events.FullScreenEvent")]
[Event(name="browserZoomChange",type="flash.events.Event")]
[Event(name="resize",type="flash.events.Event")]
[Event(name="mouseLeave",type="flash.events.Event")]
public class flash.display.Stage extends flash.display.DisplayObjectContainer
{
  native public function Stage():*;
  [Exclude(name="y",kind="property")]
  [Exclude(name="x",kind="property")]
  [Exclude(name="visible",kind="property")]
  [Exclude(name="transform",kind="property")]
  [Exclude(name="tabIndex",kind="property")]
  [Exclude(name="tabEnabled",kind="property")]
  [Exclude(name="scrollRect",kind="property")]
  [Exclude(name="scaleY",kind="property")]
  [Exclude(name="scaleX",kind="property")]
  [Exclude(name="scale9Grid",kind="property")]
  [Exclude(name="rotation",kind="property")]
  [Exclude(name="opaqueBackground",kind="property")]
  [Exclude(name="name",kind="property")]
  [Exclude(name="mouseEnabled",kind="property")]
  [Exclude(name="mask",kind="property")]
  [Exclude(name="loaderInfo",kind="property")]
  [Exclude(name="focusRect",kind="property")]
  [Exclude(name="filters",kind="property")]
  [Exclude(name="contextMenu",kind="property")]
  [Exclude(name="cacheAsBitmap",kind="property")]
  [Exclude(name="blendMode",kind="property")]
  [Exclude(name="alpha",kind="property")]
  [Exclude(name="accessibilityProperties",kind="property")]
  [Exclude(name="accessibilityImplementation",kind="property")]
  native public function get frameRate():Number;
  native public function set frameRate(value:Number):void;

  native public function invalidate():void;
  native public function get scaleMode():String;
  native public function set scaleMode(value:String):void;
  native public function get align():String;
  native public function set align(value:String):void;

  native public function get stageWidth():int;
  native public function set stageWidth(value:int):void;
  native public function get stageHeight():int;
  native public function set stageHeight(value:int):void;
  native public function get showDefaultContextMenu():Boolean;

  native public function set showDefaultContextMenu(value:Boolean):void;
  native public function get focus():flash.display.InteractiveObject;
  native public function set focus(newFocus:flash.display.InteractiveObject):void;
  [Version("10")]
  native public function get colorCorrection():String;
  [Version("10")]
  native public function set colorCorrection(value:String):void;

  [Version("10")]
  native public function get colorCorrectionSupport():String;
  native public function isFocusInaccessible():Boolean;
  native public function get stageFocusRect():Boolean;
  native public function set stageFocusRect(on:Boolean):void;
  native public function get quality():String;

  native public function set quality(value:String):void;
  native public function get displayState():String;
  native public function set displayState(value:String):void;
  native public function get fullScreenSourceRect():flash.geom.Rectangle;
  native public function set fullScreenSourceRect(value:flash.geom.Rectangle):void;

  [API("678")]
  native public function get mouseLock():Boolean;
  [API("678")]
  native public function set mouseLock(value:Boolean):void;
  [API("667")]
  native public function get stageVideos():Vector.<flash.media.StageVideo>;
  [API("674")]
  native public function get stage3Ds():Vector.<flash.display.Stage3D>;
  [API("670")]
  native public function get color():uint;

  [API("670")]
  native public function set color(color:uint):void;
  native public function get fullScreenWidth():uint;
  native public function get fullScreenHeight():uint;
  [Version("10.0.32")]
  native public function get wmodeGPU():Boolean;
  [API("670")]
  native public function get softKeyboardRect():flash.geom.Rectangle;

  native public override function set name(value:String):void;
  native public override function set mask(value:flash.display.DisplayObject):void;
  native public override function set visible(value:Boolean):void;
  native public override function set x(value:Number):void;
  native public override function set y(value:Number):void;

  [Version("10")]
  native public override function set z(value:Number):void;
  native public override function set scaleX(value:Number):void;
  native public override function set scaleY(value:Number):void;
  [Version("10")]
  native public override function set scaleZ(value:Number):void;
  native public override function set rotation(value:Number):void;

  [Version("10")]
  native public override function set rotationX(value:Number):void;
  [Version("10")]
  native public override function set rotationY(value:Number):void;
  [Version("10")]
  native public override function set rotationZ(value:Number):void;
  native public override function set alpha(value:Number):void;
  native public override function set cacheAsBitmap(value:Boolean):void;

  native public override function set opaqueBackground(value:Object):void;
  native public override function set scrollRect(value:flash.geom.Rectangle):void;
  native public override function set filters(value:Array):void;
  native public override function set blendMode(value:String):void;
  native public override function set transform(value:flash.geom.Transform):void;

  native public override function set accessibilityProperties(value:flash.accessibility.AccessibilityProperties):void;
  native public override function set scale9Grid(value:flash.geom.Rectangle):void;
  native public override function set tabEnabled(value:Boolean):void;
  native public override function set tabIndex(value:int):void;
  native public override function set focusRect(value:Object):void;

  native public override function set mouseEnabled(value:Boolean):void;
  native public override function set accessibilityImplementation(value:flash.accessibility.AccessibilityImplementation):void;
  native public override function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public override function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  native public override function setChildIndex(child:flash.display.DisplayObject,index:int):void;

  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native public override function dispatchEvent(event:flash.events.Event):Boolean;
  native public override function hasEventListener(type:String):Boolean;
  native public override function willTrigger(type:String):Boolean;
  native public override function get width():Number;

  native public override function set width(value:Number):void;
  native public override function get height():Number;
  native public override function set height(value:Number):void;
  native public override function get textSnapshot():flash.text.TextSnapshot;
  native public override function get mouseChildren():Boolean;

  native public override function set mouseChildren(value:Boolean):void;
  native public override function get numChildren():int;
  native public override function get tabChildren():Boolean;
  native public override function set tabChildren(value:Boolean):void;
  [API("670")]
  native public function get allowsFullScreen():Boolean;

  [API("680")]
  native public function get allowsFullScreenInteractive():Boolean;
  native public override function removeChildAt(index:int):flash.display.DisplayObject;
  native public override function swapChildrenAt(index1:int,index2:int):void;
  [API("682")]
  native public function get contentsScaleFactor():Number;
  [API("700")]
  native public function get browserZoomFactor():Number;

  native private function requireOwnerPermissions():void;
  [API("674")]
  native public function get displayContextInfo():String;
  native public function get constructor():*;
  native public function set constructor(c:*):*;
  [API("661")]
  native public function assignFocus(objectToFocus:flash.display.InteractiveObject,direction:String):void;

  native private function _assignFocus(objectToFocus:flash.display.InteractiveObject,direction:String):void;
  [API("661")]
  native public function get nativeWindow():flash.display.NativeWindow;
  native private function get _nativeWindow():flash.display.NativeWindow;
  [Version("air2.0")]
  native public function get orientation():String;
  [Version("air2.0")]
  native public function setOrientation(newOrientation:String):void;

  native private function set _orientation(newOrientation:String):void;
  [Version("air2.0")]
  native public function setAspectRatio(newAspectRatio:String):void;
  native private function set _aspectRatio(aspectRatio:String):void;
  [Version("air2.0")]
  native public function get deviceOrientation():String;
  [Version("air2.0")]
  native public function get autoOrients():Boolean;

  [API("671")]
  native public function set autoOrients(value:Boolean):void;
  native private function setAutoOrients(value:Boolean):void;
  [API("671")]
  native public function get supportedOrientations():Vector.<String>;
  [API("671")]
  native private function _supportedOrientations_stubImpl():Vector.<String>;
  native public override function set contextMenu(value:flash.display.NativeMenu):void;

  static native private const kInvalidParamError:uint = 2004;
  [Version("air2.0")]
  static native public final function get supportsOrientationChange():Boolean;
}


[Version("10.1")]
[Event(name="uncaughtError",type="flash.events.UncaughtErrorEvent")]
public class flash.events.UncaughtErrorEvents extends flash.events.EventDispatcher
{
  native public function UncaughtErrorEvents():*;
}


[Version("10")]
public interface flash.display.IGraphicsData
{
}


[Version("10")]
public interface flash.display.IGraphicsFill
{
}


[Version("10")]
public final class flash.display.GraphicsEndFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsEndFill():*;
}


[native(cls="AccessibilityClass",methods="auto",construct="none")]
public final class flash.accessibility.Accessibility extends Object
{
  native public function Accessibility():*;

  static native public final function get active():Boolean;
  [Inspectable(environment="none")]
  static native public final function sendEvent(source:flash.display.DisplayObject,childID:uint,eventType:uint,nonHTML:Boolean = false):void;
  static native public final function updateProperties():void;
}


[Version("10.1")]
public final class flash.globalization.CollatorMode extends Object
{
  native public function CollatorMode():*;
  static native public const SORTING:String = "sorting";

  static native public const MATCHING:String = "matching";
}


public final class flash.text.GridFitType extends Object
{
  native public function GridFitType():*;
  static native public const NONE:String = "none";
  static native public const PIXEL:String = "pixel";
  static native public const SUBPIXEL:String = "subpixel";
}


[native(cls="CustomActionsClass",methods="auto",construct="none")]
public final class adobe.utils.CustomActions extends Object
{

  native public function CustomActions():*;
  static native public final function installActions(name:String,data:String):void;
  static native public final function uninstallActions(name:String):void;
  static native public final function get actionsList():Array;
  static native public final function getActions(name:String):String;
}


public dynamic class flash.errors.StackOverflowError extends Error
{

  native public function StackOverflowError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.ScriptTimeoutError extends Error
{
  native public function ScriptTimeoutError(message:String = "",id:int = 0):*;
}

public dynamic class flash.errors.InvalidSWFError extends Error
{
  native public function InvalidSWFError(message:String = "",id:int = 0):*;
}


[native(cls="UpdaterClass",instance="UpdaterObject",methods="auto",construct="check")]
public final class flash.desktop.Updater extends Object
{
  native public function Updater():*;
  native public function update(airFile:flash.filesystem.File,version:String):void;

  native private function _launch(arguments:String):Boolean;
  native private function get _isADL():Boolean;
  native private function get _thisApplication():String;
  [Version("air2.0")]
  static native public final function get isSupported():Boolean;
  static native private final function _checkSupported():Boolean;
}


[API("674")]
public final class flash.media.VideoCodec extends Object
{

  native public function VideoCodec():*;
  static native public const H264AVC:String = "H264Avc";
  static native public const SORENSON:String = "Sorenson";
  static native public const VP6:String = "VP6";
}


[native(cls="PointClass",gc="exact",instance="PointObject",methods="auto")]
public class flash.geom.Point extends Object
{
  native public function Point(x:Number = 0,y:Number = 0):*;

  native public var x:Number;
  native public var y:Number;
  native public function get length():Number;
  native public function clone():Point;
  native public function offset(dx:Number,dy:Number):void;

  native public function equals(toCompare:Point):Boolean;
  native public function subtract(v:Point):Point;
  native public function add(v:Point):Point;
  native public function normalize(thickness:Number):void;
  native public function toString():String;

  [API("674")]
  native public function copyFrom(sourcePoint:Point):void;
  [API("674")]
  native public function setTo(xa:Number,ya:Number):void;
  static native public final function interpolate(pt1:Point,pt2:Point,f:Number):Point;
  static native public final function distance(pt1:Point,pt2:Point):Number;
  static native public final function polar(len:Number,angle:Number):Point;
}


[native(cls="MouseClass",gc="exact",methods="auto",construct="none")]
public final class flash.ui.Mouse extends Object
{

  native public function Mouse():*;
  static native public final function hide():void;
  static native public final function show():void;
  [Version("10.1")]
  static native public final function get supportsCursor():Boolean;
  [Version("10")]
  static native public final function get cursor():String;

  [Version("10")]
  static native public final function set cursor(value:String):void;
  [API("670")]
  static native public final function registerCursor(name:String,cursor:flash.ui.MouseCursorData):void;
  [API("670")]
  static native public final function unregisterCursor(name:String):void;
  [API("670")]
  static native public final function get supportsNativeCursor():Boolean;
}


[native(cls="XMLParserClass",instance="XMLParserObject",methods="auto")]
public final class flash.xml.XMLParser extends Object
{
  native public function XMLParser():*;

  native public function startParse(source:String,ignoreWhite:Boolean):void;
  native public function getNext(tag:flash.xml.XMLTag):int;
}


[API("661")]
public class flash.events.HTMLUncaughtScriptExceptionEvent extends flash.events.Event
{
  native public function HTMLUncaughtScriptExceptionEvent(exceptionValue:*):*;
  native public override function clone():flash.events.Event;
  native public var exceptionValue:*;

  native public function get stackTrace():Array;
  native public function set stackTrace(newValue:Array):void;
  native private var m_stackTraceToCopy:Array;
  native private var m_stackTrace:Array;
  static native public const UNCAUGHT_SCRIPT_EXCEPTION:* = "uncaughtScriptException";
}


[Version("10.1")]
public final class flash.net.NetGroupInfo extends Object
{

  native public function NetGroupInfo(postingSendDataBytesPerSecond:Number,postingSendControlBytesPerSecond:Number,postingReceiveDataBytesPerSecond:Number,postingReceiveControlBytesPerSecond:Number,routingSendBytesPerSecond:Number,routingReceiveBytesPerSecond:Number,objectReplicationSendBytesPerSecond:Number,objectReplicationReceiveBytesPerSecond:Number):*;
  native private var m_postingSendDataBytesPerSecond:Number;
  native private var m_postingSendControlBytesPerSecond:Number;
  native private var m_postingReceiveDataBytesPerSecond:Number;
  native private var m_postingReceiveControlBytesPerSecond:Number;

  native private var m_routingSendBytesPerSecond:Number;
  native private var m_routingReceiveBytesPerSecond:Number;
  native private var m_objectReplicationSendBytesPerSecond:Number;
  native private var m_objectReplicationReceiveBytesPerSecond:Number;
  native public function get postingSendDataBytesPerSecond():Number;

  native public function get postingSendControlBytesPerSecond():Number;
  native public function get postingReceiveDataBytesPerSecond():Number;
  native public function get postingReceiveControlBytesPerSecond():Number;
  native public function get routingSendBytesPerSecond():Number;
  native public function get routingReceiveBytesPerSecond():Number;

  native public function get objectReplicationSendBytesPerSecond():Number;
  native public function get objectReplicationReceiveBytesPerSecond():Number;
  native public function toString():String;
}


[native(cls="ShaderJobClass",instance="ShaderJobObject",methods="auto")]
[Version("10")]
[Event(name="complete",type="flash.events.ShaderEvent")]
public class flash.display.ShaderJob extends flash.events.EventDispatcher
{
  native public function ShaderJob(shader:flash.display.Shader = null,target:Object = null,width:int = 0,height:int = 0):*;
  native public function start(waitForCompletion:Boolean = false):void;

  native public function cancel():void;
  native public function get shader():flash.display.Shader;
  native public function set shader(s:flash.display.Shader):void;
  native public function get target():Object;
  native public function set target(s:Object):void;

  native public function get width():int;
  native public function set width(v:int):void;
  native public function get height():int;
  native public function set height(v:int):void;
  native public function get progress():Number;
}


public final class flash.text.FontStyle extends Object
{

  native public function FontStyle():*;
  static native public const REGULAR:String = "regular";
  static native public const BOLD:String = "bold";
  static native public const ITALIC:String = "italic";
  static native public const BOLD_ITALIC:String = "boldItalic";
}


[Version("10.1")]
public interface flash.accessibility.ISearchableText
{

  native function get searchText():String;
}


[Version("10")]
public final class flash.display.GraphicsShaderFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsShaderFill(shader:flash.display.Shader = null,matrix:flash.geom.Matrix = null):*;
  native public var shader:flash.display.Shader;
  native public var matrix:flash.geom.Matrix;
}


[native(cls="NetStreamClass",instance="NetStreamObject",methods="auto")]
[Event(name="mediaTypeData",type="flash.events.NetDataEvent")]
[Event(name="onSeekPoint")]
[Event(name="drmStatus",type="flash.events.DRMStatusEvent")]
[Event(name="drmError",type="flash.events.DRMErrorEvent")]
[Event(name="drmAuthenticate",type="flash.events.DRMAuthenticateEvent")]
[Event(name="onDRMContentData")]
[Event(name="onPlayStatus")]
[Event(name="onCuePoint")]
[Event(name="onTextData")]
[Event(name="onImageData")]
[Event(name="onMetaData")]
[Event(name="onXMPData")]
[Event(name="netStatus",type="flash.events.NetStatusEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
[Event(name="status",type="flash.events.StatusEvent")]
public class flash.net.NetStream extends flash.events.EventDispatcher
{
  native public function NetStream(connection:flash.net.NetConnection,peerID:String = "connectToFMS"):*;

  native private function ctor(connection:flash.net.NetConnection,peerID:String):void;
  native private function onResult(streamId:int):void;
  native private function onStatus(info:*):void;
  [API("674")]
  native public function dispose():void;
  [Version("10.1")]
  native public function attach(connection:flash.net.NetConnection):void;

  native public function close():void;
  native public function attachAudio(microphone:flash.media.Microphone):void;
  native public function attachCamera(theCamera:flash.media.Camera,snapshotMilliseconds:int = -1):void;
  native public function send(handlerName:String,... rest):void;
  native public function get bufferTime():Number;

  native public function set bufferTime(bufferTime:Number):void;
  [Version("10")]
  native public function get maxPauseBufferTime():Number;
  [Version("10")]
  native public function set maxPauseBufferTime(pauseBufferTime:Number):void;
  [Version("10.1")]
  native public function get backBufferTime():Number;
  [Version("10.1")]
  native public function set backBufferTime(backBufferTime:Number):void;

  [Version("10.1")]
  native public function get inBufferSeek():Boolean;
  [Version("10.1")]
  native public function set inBufferSeek(value:Boolean):void;
  [Version("10.1")]
  native public function get backBufferLength():Number;
  [Version("10.1")]
  native public function step(frames:int):void;
  native private function call(stream:NetStream,command:String,responder:flash.net.Responder,... rest):void;

  [Version("10.1")]
  native public function get bufferTimeMax():Number;
  [Version("10.1")]
  native public function set bufferTimeMax(bufferTimeMax:Number):void;
  native public function receiveAudio(flag:Boolean):void;
  native public function receiveVideo(flag:Boolean):void;
  native public function receiveVideoFPS(FPS:Number):void;

  native public function pause():void;
  native public function resume():void;
  native public function togglePause():void;
  [cppcall]
  native public function seek(offset:Number):void;
  native public function play(... rest):void;

  [Version("10")]
  native public function play2(param:flash.net.NetStreamPlayOptions):void;
  [Version("10")]
  native public function get info():flash.net.NetStreamInfo;
  [Version("10.1")]
  native public function get multicastInfo():flash.net.NetStreamMulticastInfo;
  native public function publish(name:String = null,type:String = null):void;
  native private function invoke(index:uint,... rest):*;

  native private function invokeWithArgsArray(index:uint,p_arguments:Array):*;
  native public function get time():Number;
  native public function get currentFPS():Number;
  native public function get bufferLength():Number;
  native public function get liveDelay():Number;

  native public function get bytesLoaded():uint;
  native public function get bytesTotal():uint;
  [Inspectable(environment="none")]
  native public function get decodedFrames():uint;
  [Inspectable(environment="none")]
  native public function get videoCodec():uint;
  [Inspectable(environment="none")]
  native public function get audioCodec():uint;

  native public function get soundTransform():flash.media.SoundTransform;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  native public function get checkPolicyFile():Boolean;
  native public function set checkPolicyFile(state:Boolean):void;
  native public function get client():Object;

  native public function set client(object:Object):void;
  native public function get objectEncoding():uint;
  [Version("10.1")]
  native public function get multicastPushNeighborLimit():Number;
  [Version("10.1")]
  native public function set multicastPushNeighborLimit(neighbors:Number):void;
  [Version("10.1")]
  native public function get multicastWindowDuration():Number;

  [Version("10.1")]
  native public function set multicastWindowDuration(seconds:Number):void;
  [Version("10.1")]
  native public function get multicastRelayMarginDuration():Number;
  [Version("10.1")]
  native public function set multicastRelayMarginDuration(seconds:Number):void;
  [Version("10.1")]
  native public function get multicastAvailabilityUpdatePeriod():Number;
  [Version("10.1")]
  native public function set multicastAvailabilityUpdatePeriod(seconds:Number):void;

  [Version("10.1")]
  native public function get multicastFetchPeriod():Number;
  [Version("10.1")]
  native public function set multicastFetchPeriod(seconds:Number):void;
  [Version("10.1")]
  native public function get multicastAvailabilitySendToAll():Boolean;
  [Version("10.1")]
  native public function set multicastAvailabilitySendToAll(value:Boolean):void;
  [Version("10")]
  native public function get farID():String;

  [Version("10")]
  native public function get nearNonce():String;
  [Version("10")]
  native public function get farNonce():String;
  [Version("10")]
  native public function get peerStreams():Array;
  [Version("10")]
  native public function onPeerConnect(subscriber:NetStream):Boolean;
  [Version("10.1")]
  native public function get audioReliable():Boolean;

  [Version("10.1")]
  native public function set audioReliable(reliable:Boolean):void;
  [Version("10.1")]
  native public function get videoReliable():Boolean;
  [Version("10.1")]
  native public function set videoReliable(reliable:Boolean):void;
  [Version("10.1")]
  native public function get dataReliable():Boolean;
  [Version("10.1")]
  native public function set dataReliable(reliable:Boolean):void;

  [Version("10.1")]
  native public function get audioSampleAccess():Boolean;
  [Version("10.1")]
  native public function set audioSampleAccess(reliable:Boolean):void;
  [Version("10.1")]
  native public function get videoSampleAccess():Boolean;
  [Version("10.1")]
  native public function set videoSampleAccess(reliable:Boolean):void;
  [Version("10.1")]
  native public function appendBytes(bytes:flash.utils.ByteArray):void;

  [Version("10.1")]
  native public function appendBytesAction(netStreamAppendBytesAction:String):void;
  native public function get useHardwareDecoder():Boolean;
  native public function set useHardwareDecoder(v:Boolean):void;
  [API("680")]
  native public function get useJitterBuffer():Boolean;
  [API("680")]
  native public function set useJitterBuffer(value:Boolean):void;

  native public function setDRMAuthenticationCredentials(userName:String,password:String,type:String):void;
  [API("663")]
  native public function preloadEmbeddedData(param:flash.net.NetStreamPlayOptions):void;
  [API("674")]
  native public function get videoStreamSettings():flash.media.VideoStreamSettings;
  [API("674")]
  native public function set videoStreamSettings(settings:flash.media.VideoStreamSettings):void;
  [cppcall]
  static native private final function createOnPlayStatusCompleteObject():Object;

  static native private const kClose:uint = 0;
  static native private const kAttachAudio:uint = 1;
  static native private const kAttachVideo:uint = 2;
  static native private const kSend:uint = 3;
  static native private const kSetBufferTime:uint = 4;

  static native private const kCall:uint = 202;
  static native private const kGetTime:uint = 300;
  static native private const kGetCurrentFps:uint = 301;
  static native private const kGetBufferTime:uint = 302;
  static native private const kGetBufferLength:uint = 303;

  static native private const kGetLiveDelay:uint = 304;
  static native private const kGetBytesLoaded:uint = 305;
  static native private const kGetBytesTotal:uint = 306;
  static native private const kGetTotalFrames:uint = 307;
  static native private const kSetTotalFrames:uint = 308;

  static native private const kGetVideoCodecID:uint = 311;
  static native private const kSetVideoCodecID:uint = 312;
  static native private const kGetAudioCodecID:uint = 313;
  static native private const kSetAudioCodecID:uint = 314;
  static native private const kGetFarID:uint = 340;

  static native private const kGetNearNonce:uint = 341;
  static native private const kGetFarNonce:uint = 342;
  static native private const kGetInfo:uint = 343;
  static native private const kGetMulticastInfo:uint = 344;
  static native private const kAttach:uint = 345;

  static native private const kGetMaxPauseBufferTime:uint = 400;
  static native private const kSetMaxPauseBufferTime:uint = 401;
  static native private const kGetBufferTimeMax:uint = 410;
  static native private const kSetBufferTimeMax:uint = 411;
  static native private const kGetBackBufferTime:uint = 450;

  static native private const kSetBackBufferTime:uint = 451;
  static native private const kGetBackBufferLength:uint = 452;
  static native private const kStep:uint = 453;
  static native private const kGetInBufferSeek:uint = 454;
  static native private const kSetInBufferSeek:uint = 455;

  static native public const DIRECT_CONNECTIONS:String = "directConnections";
  static native public const CONNECT_TO_FMS:String = "connectToFMS";
  [API("690")]
  static native public final function resetDRMVouchers():void;
}


public class flash.printing.PrintJobOptions extends Object
{
  native public function PrintJobOptions(printAsBitmap:Boolean = false):*;
  native public var printAsBitmap:Boolean = false;

  [Version("air2.0")]
  native public function set printMethod(pm:String):void;
  [Version("air2.0")]
  native public function get printMethod():String;
  native private var _printMethod:String = null;
  [Version("air2.0")]
  native public var pixelsPerInch:Number = NaN;
}


[native(cls="FileReferenceClass",instance="FileReferenceObject",methods="auto")]
[Event(name="uploadCompleteData",type="flash.events.DataEvent")]
[Event(name="httpResponseStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="select",type="flash.events.Event")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public class flash.net.FileReference extends flash.events.EventDispatcher
{
  native public function FileReference():*;

  native public function get creationDate():Date;
  native public function get creator():String;
  native public function get modificationDate():Date;
  native public function get name():String;
  native public function get size():Number;

  native public function get type():String;
  native public function cancel():void;
  native public function download(request:flash.net.URLRequest,defaultFileName:String = null):void;
  native public function upload(request:flash.net.URLRequest,uploadDataFieldName:String = "Filedata",testUpload:Boolean = false):void;
  [Version("10")]
  native public function get data():flash.utils.ByteArray;

  native private function _load(dest:flash.utils.ByteArray):void;
  native private function _save(data:flash.utils.ByteArray,defaultFileName:String):void;
  [Version("10")]
  native public function load():void;
  [Version("10")]
  native public function save(data:*,defaultFileName:String = null):void;
  native public function get extension():String;

  native public function browse(typeFilter:Array = null):Boolean;
  [API("661")]
  native public function uploadUnencoded(request:flash.net.URLRequest):void;
  static native private const kInvalidParamError:uint = 2004;
  static native private const kNullPointerError:uint = 2007;
  static native private const kInvalidCallError:uint = 2037;

  static native private const kLocalSecurityError:uint = 2028;
  static native private final function _ensureIsRootPlayer():void;
}


public class flash.desktop.MacFilePromiseWrapper extends flash.events.EventDispatcher
{
  native public function MacFilePromiseWrapper(promise:flash.desktop.IFilePromise,dropDirectory:flash.filesystem.File):*;
  native private var _file:flash.filesystem.File;
  native private var _stream:flash.filesystem.FileStream;

  native private var _baseDirectory:flash.filesystem.File;
  native private var _promise:flash.desktop.IFilePromise;
  native private var _data:flash.utils.IDataInput;
  native private var _isOpen:Boolean = false;
  native private var _timeout:flash.utils.Timer;

  native private var _buffer:flash.utils.ByteArray;
  native public function open():Boolean;
  native private function close():void;
  native private function abort():void;
  native private function reportError(e:flash.events.ErrorEvent):void;

  native private function onDataSourceEvent(e:flash.events.Event):void;
  native private function onDataSourceProgress(e:flash.events.ProgressEvent):void;
  native private function onErrorEvent(e:flash.events.ErrorEvent):void;
  native private function onHttpStatus(e:flash.events.HTTPStatusEvent):void;
  native private function onTimeout(e:flash.events.Event):void;

  native private function registerEventHandlers(obj:flash.events.IEventDispatcher):void;
  native private function unregisterEventHandlers(obj:flash.events.IEventDispatcher):void;
  native private function writeAvailableDataToOutputStream():void;
  static native private const LOGGING:Boolean = false;
  static native private final function resolvePath(baseDirectory:flash.filesystem.File,relativePath:String):flash.filesystem.File;

  static native private final function log(msg:String):void;
}


[native(cls="DatagramSocketClass",instance="DatagramSocketObject",methods="auto")]
[Version("air2.0")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="data",type="flash.events.DatagramSocketDataEvent")]
[Event(name="close",type="flash.events.Event")]
public class flash.net.DatagramSocket extends flash.events.EventDispatcher
{
  native public function DatagramSocket():*;
  native public function bind(localPort:int = 0,localAddress:String = "0.0.0.0"):void;
  native public function connect(remoteAddress:String,remotePort:int):void;
  native public function receive():void;

  native public function close():void;
  native public function send(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0,address:String = null,port:int = 0):void;
  native public function get connected():Boolean;
  native public function get bound():Boolean;
  native public function get localAddress():String;

  native public function get localPort():int;
  native public function get remoteAddress():String;
  native public function get remotePort():int;
  static native public final function get isSupported():Boolean;
}


public final class flash.display.StageQuality extends Object
{
  native public function StageQuality():*;

  static native public const LOW:String = "low";
  static native public const MEDIUM:String = "medium";
  static native public const HIGH:String = "high";
  static native public const BEST:String = "best";
  static native public const HIGH_8X8:String = "8x8";

  static native public const HIGH_8X8_LINEAR:String = "8x8linear";
  static native public const HIGH_16X16:String = "16x16";
  static native public const HIGH_16X16_LINEAR:String = "16x16linear";
}


[native(cls="TransformClass",gc="exact",instance="TransformObject",methods="auto")]
public class flash.geom.Transform extends Object
{
  native public function Transform(displayObject:flash.display.DisplayObject):*;
  native public function get matrix():flash.geom.Matrix;

  native public function set matrix(value:flash.geom.Matrix):void;
  native public function get colorTransform():flash.geom.ColorTransform;
  native public function set colorTransform(value:flash.geom.ColorTransform):void;
  native public function get concatenatedMatrix():flash.geom.Matrix;
  native public function get concatenatedColorTransform():flash.geom.ColorTransform;

  native public function get pixelBounds():flash.geom.Rectangle;
  native private function ctor(displayObject:flash.display.DisplayObject):void;
  [Version("10")]
  native public function get matrix3D():flash.geom.Matrix3D;
  [Version("10")]
  native public function set matrix3D(m:flash.geom.Matrix3D):*;
  [Version("10")]
  native public function getRelativeMatrix3D(relativeTo:flash.display.DisplayObject):flash.geom.Matrix3D;

  [Version("10")]
  native public function get perspectiveProjection():flash.geom.PerspectiveProjection;
  [Version("10")]
  native public function set perspectiveProjection(pm:flash.geom.PerspectiveProjection):void;
}


public class flash.accessibility.AccessibilityProperties extends Object
{
  native public function AccessibilityProperties():*;
  native public var name:String;
  native public var description:String;

  native public var shortcut:String;
  native public var silent:Boolean;
  native public var forceSimple:Boolean;
  native public var noAutoLabeling:Boolean;
}


[native(cls="BitmapFilterClass",instance="BitmapFilterObject",methods="auto",construct="abstract")]
public class flash.filters.BitmapFilter extends Object
{
  native public function BitmapFilter():*;

  native public function clone():BitmapFilter;
}


[native(cls="DropShadowFilterClass",instance="DropShadowFilterObject",methods="auto")]
public final class flash.filters.DropShadowFilter extends flash.filters.BitmapFilter
{
  native public function DropShadowFilter(distance:Number = 4.0,angle:Number = 45,color:uint = 0,alpha:Number = 1.0,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1.0,quality:int = 1,inner:Boolean = false,knockout:Boolean = false,hideObject:Boolean = false):*;
  native public function get distance():Number;
  native public function set distance(value:Number):void;
  native public function get angle():Number;

  native public function set angle(value:Number):void;
  native public function get color():uint;
  native public function set color(value:uint):void;
  native public function get alpha():Number;
  native public function set alpha(value:Number):void;

  native public function get blurX():Number;
  native public function set blurX(value:Number):void;
  native public function get blurY():Number;
  native public function set blurY(value:Number):void;
  native public function get hideObject():Boolean;

  native public function set hideObject(value:Boolean):void;
  native public function get inner():Boolean;
  native public function set inner(value:Boolean):void;
  native public function get knockout():Boolean;
  native public function set knockout(value:Boolean):void;

  native public function get quality():int;
  native public function set quality(value:int):void;
  native public function get strength():Number;
  native public function set strength(value:Number):void;
  native public override function clone():flash.filters.BitmapFilter;
}


[API("686")]
[native(cls="ApplicationInstallerClass",gc="exact",instance="ApplicationInstallerObject",methods="auto",construct="native")]
[ExcludeClass]
public final class flash.system.ApplicationInstaller extends flash.events.EventDispatcher
{

  native public function ApplicationInstaller():*;
  native private var _strings:XML;
  native private var _icon:flash.utils.ByteArray;
  native public function install(mode:String = "install_with_shortcuts"):void;
  native public function get isInstalled():Boolean;

  static native public final function stringsDigest(strings:XML):String;
  static native public final function iconDigest(icon:flash.utils.ByteArray):String;
}


[Version("10.1")]
public final class flash.globalization.DateTimeNameContext extends Object
{
  native public function DateTimeNameContext():*;
  static native public const FORMAT:String = "format";
  static native public const STANDALONE:String = "standalone";
}


[API("674")]
public final class flash.display3D.Context3DVertexBufferFormat extends Object
{

  native public function Context3DVertexBufferFormat():*;
  static native public const FLOAT_1:String = "float1";
  static native public const FLOAT_2:String = "float2";
  static native public const FLOAT_3:String = "float3";
  static native public const FLOAT_4:String = "float4";

  static native public const BYTES_4:String = "bytes4";
}


[Version("10")]
public final class flash.display.GraphicsSolidFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsSolidFill(color:uint = 0,alpha:Number = 1.0):*;
  native public var color:uint = 0;
  native public var alpha:Number = 1.0;
}


[Version("10")]
public final class flash.display.ShaderParameterType extends Object
{
  native public function ShaderParameterType():*;

  static native public const FLOAT:String = "float";
  static native public const FLOAT2:String = "float2";
  static native public const FLOAT3:String = "float3";
  static native public const FLOAT4:String = "float4";
  static native public const INT:String = "int";

  static native public const INT2:String = "int2";
  static native public const INT3:String = "int3";
  static native public const INT4:String = "int4";
  static native public const BOOL:String = "bool";
  static native public const BOOL2:String = "bool2";

  static native public const BOOL3:String = "bool3";
  static native public const BOOL4:String = "bool4";
  static native public const MATRIX2X2:String = "matrix2x2";
  static native public const MATRIX3X3:String = "matrix3x3";
  static native public const MATRIX4X4:String = "matrix4x4";
}


[native(cls="GradientGlowFilterClass",instance="GradientGlowFilterObject",methods="auto")]
public final class flash.filters.GradientGlowFilter extends flash.filters.BitmapFilter
{

  native public function GradientGlowFilter(distance:Number = 4.0,angle:Number = 45,colors:Array = null,alphas:Array = null,ratios:Array = null,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1,quality:int = 1,type:String = "inner",knockout:Boolean = false):*;
  native public function get angle():Number;
  native public function set angle(value:Number):void;
  native public function get alphas():Array;
  native public function set alphas(value:Array):void;

  native public function get blurX():Number;
  native public function set blurX(value:Number):void;
  native public function get blurY():Number;
  native public function set blurY(value:Number):void;
  native public function get colors():Array;

  native public function set colors(value:Array):void;
  native public function get distance():Number;
  native public function set distance(value:Number):void;
  native public function get knockout():Boolean;
  native public function set knockout(value:Boolean):void;

  native public function get quality():int;
  native public function set quality(value:int):void;
  native public function get ratios():Array;
  native public function set ratios(value:Array):void;
  native public function get strength():Number;

  native public function set strength(value:Number):void;
  native public function get type():String;
  native public function set type(value:String):void;
  native public override function clone():flash.filters.BitmapFilter;
}


[native(cls="JSONClass",classgc="exact",methods="auto",construct="none")]
[API("674")]
public final class JSON extends Object
{
  native public function JSON():*;

  static native private const as3ns:Namespace = "http://adobe.com/AS3/2006/builtin";
  static native private final function parseCore(text:String):Object;
  static native private final function stringifySpecializedToString(value:Object,replacerArray:Array,replacerFunction:Function,gap:String):String;
  static native public final function parse(text:String,reviver:Function = null):Object;
  static native public final function stringify(value:Object,replacer:* = null,space:* = null):String;

  static native private final function computePropertyList(r:Array):Array;
}

public final class Walker extends Object
{
  native public function Walker(reviver:Function):*;
  native public function walk(holder:Object,name:String):*;
  native public var reviver:Function;
}


[API("661")]
public class flash.html.HTMLWindowCreateOptions extends Object
{
  native public function HTMLWindowCreateOptions():*;

  native public var x:Number = NaN;
  native public var y:Number = NaN;
  native public var width:Number = NaN;
  native public var height:Number = NaN;
  native public var menuBarVisible:Boolean = false;

  native public var statusBarVisible:Boolean = false;
  native public var toolBarVisible:Boolean = false;
  native public var locationBarVisible:Boolean = false;
  native public var scrollBarsVisible:Boolean = true;
  native public var resizable:Boolean = false;

  native public var fullscreen:Boolean = false;
}


[native(cls="SpriteClass",gc="exact",instance="SpriteObject",methods="auto")]
public class flash.display.Sprite extends flash.display.DisplayObjectContainer
{
  native public function Sprite():*;
  native public function get graphics():flash.display.Graphics;
  native public function get buttonMode():Boolean;
  native public function set buttonMode(value:Boolean):void;

  native public function startDrag(lockCenter:Boolean = false,bounds:flash.geom.Rectangle = null):void;
  native public function stopDrag():void;
  [API("667")]
  native public function startTouchDrag(touchPointID:int,lockCenter:Boolean = false,bounds:flash.geom.Rectangle = null):void;
  [API("667")]
  native public function stopTouchDrag(touchPointID:int):void;
  native public function get dropTarget():flash.display.DisplayObject;

  native private function constructChildren():void;
  native public function get hitArea():Sprite;
  native public function set hitArea(value:Sprite):void;
  native public function get useHandCursor():Boolean;
  native public function set useHandCursor(value:Boolean):void;

  native public function get soundTransform():flash.media.SoundTransform;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
}


[API("669")]
[native(cls="StageWebViewImplClass",instance="StageWebViewImplObject",methods="auto",construct="native")]
public class flash.media.StageWebViewImpl extends flash.display.Sprite
{
  native public function StageWebViewImpl():*;
  native private function onKeyFocusChange(evt:flash.events.FocusEvent):void;
  native private function onFocusOut(ev:flash.events.FocusEvent):void;

  native private function onKeyUp(evt:flash.events.KeyboardEvent):void;
  native private function onKeyDown(evt:flash.events.KeyboardEvent):void;
  native private function onNativeFocusOut():void;
}

[API("669")]
[native(cls="StageWebViewClass",instance="StageWebViewObject",methods="auto",construct="check")]
[Event(name="focusOut",type="flash.events.FocusEvent")]
[Event(name="focusIn",type="flash.events.FocusEvent")]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="locationChanging",type="flash.events.LocationChangeEvent")]
[Event(name="locationChange",type="flash.events.LocationChangeEvent")]
public final class flash.media.StageWebView extends flash.events.EventDispatcher
{
  native public function StageWebView(useNative:Boolean = false):*;
  native private function init(useNative:Boolean):void;

  native public function loadURL(url:String):void;
  native public function loadString(text:String,mimeType:String = "text/html"):void;
  native public function stop():void;
  native public function reload():void;
  native public function get isHistoryBackEnabled():Boolean;

  native public function historyBack():void;
  native public function get isHistoryForwardEnabled():Boolean;
  native public function historyForward():void;
  native public function get location():String;
  native public function get title():String;

  native public function get viewPort():flash.geom.Rectangle;
  native public function set viewPort(rect:flash.geom.Rectangle):void;
  native public function get stage():flash.display.Stage;
  native public function set stage(rect:flash.display.Stage):void;
  native public function dispose():void;

  native public function assignFocus(direction:String = "none"):void;
  [API("671")]
  native public function drawViewPortToBitmapData(bitmap:flash.display.BitmapData):void;
  static native public final function get isSupported():Boolean;
}


[native(cls="TextureRectangle3DClass",instance="TextureRectangle3DObject",methods="auto",construct="native")]
[API("690")]
public final class flash.display3D.textures.RectangleTexture extends flash.display3D.textures.TextureBase
{
  native public function RectangleTexture():*;
  native public function uploadFromBitmapData(source:flash.display.BitmapData):void;

  native public function uploadFromByteArray(data:flash.utils.ByteArray,byteArrayOffset:uint):void;
}


[native(cls="SecurityDomainClass",gc="exact",instance="SecurityDomainObject",methods="auto")]
public class flash.system.SecurityDomain extends Object
{
  native public function SecurityDomain():*;
  native private function ctor_impl():void;
  [API("680")]
  native public function get domainID():String;
  static native public final function get currentDomain():SecurityDomain;
}


[native(cls="MouseEventClass",gc="exact",instance="MouseEventObject",methods="auto")]
public class flash.events.MouseEvent extends flash.events.Event
{

  native public function MouseEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,localX:Number = 0,localY:Number = 0,relatedObject:flash.display.InteractiveObject = null,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,buttonDown:Boolean = false,delta:int = 0,commandKey:Boolean = false,controlKey:Boolean = false,clickCount:int = 0):*;
  native private var m_relatedObject:flash.display.InteractiveObject;
  native private var m_ctrlKey:Boolean;
  native private var m_altKey:Boolean;
  native private var m_shiftKey:Boolean;

  native private var m_buttonDown:Boolean;
  native private var m_delta:int;
  native private var m_isRelatedObjectInaccessible:Boolean;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native public function get localX():Number;
  native public function set localX(value:Number):void;
  native public function get localY():Number;
  native public function set localY(value:Number):void;
  native public function get relatedObject():flash.display.InteractiveObject;

  native public function set relatedObject(value:flash.display.InteractiveObject):void;
  native public function get ctrlKey():Boolean;
  native public function set ctrlKey(value:Boolean):void;
  native public function get altKey():Boolean;
  native public function set altKey(value:Boolean):void;

  native public function get shiftKey():Boolean;
  native public function set shiftKey(value:Boolean):void;
  native public function get buttonDown():Boolean;
  native public function set buttonDown(value:Boolean):void;
  native public function get delta():int;

  native public function set delta(value:int):void;
  native public function get stageX():Number;
  native public function get stageY():Number;
  native public function updateAfterEvent():void;
  native private function getStageX():Number;

  native private function getStageY():Number;
  [Version("10")]
  native public function get isRelatedObjectInaccessible():Boolean;
  [Version("10")]
  native public function set isRelatedObjectInaccessible(value:Boolean):void;
  [API("678")]
  native public function get movementX():Number;
  [API("678")]
  native public function set movementX(value:Number):void;

  [API("678")]
  native public function get movementY():Number;
  [API("678")]
  native public function set movementY(value:Number):void;
  native private var m_commandKey:Boolean;
  native private var m_controlKey:Boolean;
  native private var m_clickCount:int;

  native public function get commandKey():Boolean;
  native public function set commandKey(value:Boolean):void;
  native public function get controlKey():Boolean;
  native public function set controlKey(value:Boolean):void;
  native public function get clickCount():int;

  static native public const CLICK:String = "click";
  static native public const DOUBLE_CLICK:String = "doubleClick";
  static native public const MOUSE_DOWN:String = "mouseDown";
  static native public const MOUSE_MOVE:String = "mouseMove";
  static native public const MOUSE_OUT:String = "mouseOut";

  static native public const MOUSE_OVER:String = "mouseOver";
  static native public const MOUSE_UP:String = "mouseUp";
  static native public const RELEASE_OUTSIDE:String = "releaseOutside";
  static native public const MOUSE_WHEEL:String = "mouseWheel";
  static native public const ROLL_OUT:String = "rollOut";

  static native public const ROLL_OVER:String = "rollOver";
  static native public const MIDDLE_CLICK:String = "middleClick";
  static native public const MIDDLE_MOUSE_DOWN:String = "middleMouseDown";
  static native public const MIDDLE_MOUSE_UP:String = "middleMouseUp";
  static native public const RIGHT_CLICK:String = "rightClick";

  static native public const RIGHT_MOUSE_DOWN:String = "rightMouseDown";
  static native public const RIGHT_MOUSE_UP:String = "rightMouseUp";
  static native public const CONTEXT_MENU:String = "contextMenu";
}


public class flash.events.NativeDragEvent extends flash.events.MouseEvent
{
  native public function NativeDragEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = true,localX:Number = 0,localY:Number = 0,relatedObject:flash.display.InteractiveObject = null,clipboard:flash.desktop.Clipboard = null,allowedActions:flash.desktop.NativeDragOptions = null,dropAction:String = null,controlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,commandKey:Boolean = false):*;
  native public var clipboard:flash.desktop.Clipboard;

  native public var allowedActions:flash.desktop.NativeDragOptions;
  native public var dropAction:String;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  static native public const NATIVE_DRAG_ENTER:String = "nativeDragEnter";

  static native public const NATIVE_DRAG_OVER:String = "nativeDragOver";
  static native public const NATIVE_DRAG_DROP:String = "nativeDragDrop";
  static native public const NATIVE_DRAG_EXIT:String = "nativeDragExit";
  static native public const NATIVE_DRAG_START:String = "nativeDragStart";
  static native public const NATIVE_DRAG_UPDATE:String = "nativeDragUpdate";

  static native public const NATIVE_DRAG_COMPLETE:String = "nativeDragComplete";
}


public interface flash.net.IDynamicPropertyOutput
{
  native function writeDynamicProperty(name:String,value:*):void;
}


[native(cls="DynamicPropertyOutputClass",gc="exact",instance="DynamicPropertyOutputObject",methods="auto",construct="native")]
public class flash.net.DynamicPropertyOutput extends Object
  implements flash.net.IDynamicPropertyOutput
{
  native public function DynamicPropertyOutput():*;
  native public function writeDynamicProperty(name:String,value:*):void;
}


[API("661")]
[native(cls="FileClass",instance="FileObject",methods="auto")]
[Event(name="directoryListing",type="flash.events.FileListEvent")]
[Event(name="selectMultiple",type="flash.events.FileListEvent")]
[Event(name="select",type="flash.events.Event")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public class flash.filesystem.File extends flash.net.FileReference
{
  native public function File(path:String = null):*;

  native private function _setFileInfo(path:String,flags:uint,redLine:uint):void;
  native public override function toString():String;
  native public function get exists():Boolean;
  native private function _exists():Boolean;
  native public function get isHidden():Boolean;

  native private function _isHidden():Boolean;
  native public function get isDirectory():Boolean;
  native private function _isDirectory():Boolean;
  native public function get isPackage():Boolean;
  native private function _isPackage():Boolean;

  native public function get isSymbolicLink():Boolean;
  native private function _isSymbolicLink():Boolean;
  native public override function cancel():void;
  native private function _cancel():void;
  [cppcall]
  native public function resolvePath(path:String):File;

  native private function resolveComponents(components:Array,target:File = null,protectBase:Boolean = false):File;
  native public function getRelativePath(ref:flash.net.FileReference,useDotDot:Boolean = false):String;
  native public function get parent():File;
  [cppcall]
  native public function get nativePath():String;
  native public function set nativePath(value:String):void;

  native private function _getCanonicalPath():String;
  native public function canonicalize():void;
  native public function get url():String;
  native public function set url(value:String):void;
  native public function browseForOpen(title:String,typeFilter:Array = null):void;

  native public function browseForOpenMultiple(title:String,typeFilter:Array = null):void;
  native public function browseForSave(title:String):void;
  native public function browseForDirectory(title:String):void;
  native public function deleteFile():void;
  native public function deleteFileAsync():void;

  native public function deleteDirectory(deleteDirectoryContents:Boolean = false):void;
  native public function deleteDirectoryAsync(deleteDirectoryContents:Boolean = false):void;
  native public function copyTo(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;
  native public function copyToAsync(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;
  native public function moveTo(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;

  native public function moveToAsync(newLocation:flash.net.FileReference,overwrite:Boolean = false):void;
  native public function moveToTrash():void;
  native public function moveToTrashAsync():void;
  native public function createDirectory():void;
  [ArrayElementType("flash.filesystem.File")]
  native public function getDirectoryListing():Array;

  native public function getDirectoryListingAsync():void;
  native public function clone():File;
  native private function setFileInfo(normalizedPath:String,type:uint = 0,redLine:uint = 0):void;
  native public function get icon():flash.desktop.Icon;
  native public function get spaceAvailable():Number;

  [Version("air2.0")]
  native public function openWithDefaultApplication():void;
  native private function _openWithDefaultApplication():void;
  native private function _isBlackListed():Boolean;
  native private function _isInApplicationStorageDirectory():Boolean;
  [Version("air2.0")]
  native public function get downloaded():Boolean;

  [Version("air2.0")]
  native public function set downloaded(value:Boolean):void;
  native private function _setDownloadedStatus(value:Boolean):void;
  native private function _getDownloadedStatus():Boolean;
  [API("686")]
  native public function get preventBackup():Boolean;
  [API("686")]
  native public function set preventBackup(value:Boolean):void;

  static native private const kInvalidCallError:uint = 2037;
  static native private const kNullPointerError:uint = 2007;
  static native private const kInvalidParamError:uint = 2004;
  static native private const kFileBadPathName:uint = 3000;
  static native private const kFileAccessDenied:* = 3001;

  static native private const kFileDoesNotExist:* = 3003;
  static native public final function get systemCharset():String;
  static native private final function initSystemCharset():String;
  static native private const _systemCharset:String;
  static native public final function get separator():String;

  static native private final function initSeparator():String;
  static native private const _separator:String;
  static native public final function get lineEnding():String;
  static native private const _lineEnding:String;
  static native private final function _getNativePathFor(ref:flash.net.FileReference):String;

  static native private final function _getRedlineFor(ref:flash.net.FileReference):uint;
  static native private final function _getFlagsFor(ref:flash.net.FileReference):uint;
  static native private const kFilePermissionUpload:uint = 1;
  static native private const kFilePermissionProgrammatic:uint = 8;
  static native private const kFilePermissionLocalStore:uint = 16;

  static native private const kFilePermissionTemp:uint = 32;
  static native private const kFilePermissionAppResource:uint = 64;
  static native private final function _getNativePath(ref:flash.net.FileReference):String;
  static native private final function _checkAccessFor(ref:flash.net.FileReference):void;
  static native private final function _checkPathAccessFor(ref:flash.net.FileReference):void;

  static native private final function _checkUpdateFor(ref:flash.net.FileReference):void;
  static native private const pathIsURL:RegExp;
  static native private final function pathIsRelative(path:String):Boolean;
  static native private final function pathHasPrefix(path:String,prefix:String):*;
  static native private const parentComps:Array;

  static native private final function initUserDir():String;
  static native private var m_userDirectoryPath:String = null;
  static native private final function get userDirectoryPath():String;
  static native public final function get userDirectory():File;
  static native private final function initDocumentsDir():String;

  static native private var m_documentsDirectoryPath:String = null;
  static native private final function get documentsDirectoryPath():String;
  static native public final function get documentsDirectory():File;
  static native private final function initDesktopDir():String;
  static native private var m_desktopDirectoryPath:String = null;

  static native private final function get desktopDirectoryPath():String;
  static native public final function get desktopDirectory():File;
  static native private final function _getAppId():String;
  static native private final function _getPubId():String;
  static native private final function initAppDataDirRoot():String;

  static native private var m_appDataDirectoryPath:String = null;
  static native private final function get appDataDirectoryPath():String;
  static native private var m_appStorageDirectoryPath:String = null;
  static native private final function get appStorageDirectoryPath():String;
  static native public final function get applicationStorageDirectory():File;

  static native private var ensureappStorageDir:Boolean = true;
  static native private final function initAppResourceDir():String;
  static native private var m_appResourceDirectoryPath:String = null;
  static native private final function get appResourceDirectoryPath():String;
  static native public final function get applicationDirectory():File;

  static native public final function createTempFile():File;
  static native private final function _createTempFile():String;
  static native public final function createTempDirectory():File;
  static native private final function _createTempDirectory():String;
  [ArrayElementType("flash.filesystem.File")]
  static native public final function getRootDirectories():Array;

  static native private final function urlFromPath(path:String):String;
  static native private final function pathFromUrl(url:String):String;
  static native private const uriParts:RegExp;
  static native private const fileUrlLocalhostPrefix:RegExp;
  static native private const m_allColons:RegExp;

  static native private const m_allSlashes:RegExp;
  static native private const m_allBackSlashes:RegExp;
  static native private final function normalizePath(inPath:String,newComps:Array = null,protectBase:Boolean = false):String;
  static native private final function getFile(normalizedPath:String,type:uint = 0,redLine:uint = 0):File;
  static native private final function initCacheDir():String;

  static native private var m_cacheDirectoryPath:String = null;
  static native private final function get cacheDirectoryPath():String;
  [API("686")]
  static native public final function get cacheDirectory():File;
}


[native(cls="SoundTransformClass",gc="exact",instance="SoundTransformObject",methods="auto")]
public final class flash.media.SoundTransform extends Object
{
  native public function SoundTransform(vol:Number = 1,panning:Number = 0):*;
  native public function get volume():Number;

  native public function set volume(volume:Number):void;
  native public function get leftToLeft():Number;
  native public function set leftToLeft(leftToLeft:Number):void;
  native public function get leftToRight():Number;
  native public function set leftToRight(leftToRight:Number):void;

  native public function get rightToRight():Number;
  native public function set rightToRight(rightToRight:Number):void;
  native public function get rightToLeft():Number;
  native public function set rightToLeft(rightToLeft:Number):void;
  native public function get pan():Number;

  native public function set pan(panning:Number):void;
}


[Version("10")]
public final class flash.text.engine.FontLookup extends Object
{
  native public function FontLookup():*;
  static native public const DEVICE:String = "device";
  static native public const EMBEDDED_CFF:String = "embeddedCFF";
}


[native(cls="MorphShapeClass",instance="MorphShapeObject",methods="auto",construct="restricted-check")]
public final class flash.display.MorphShape extends flash.display.DisplayObject
{
  native public function MorphShape():*;
}


[native(cls="LocalConnectionClass",gc="exact",instance="LocalConnectionObject",methods="auto")]
[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
public class flash.net.LocalConnection extends flash.events.EventDispatcher
{

  native public function LocalConnection():*;
  native public function close():void;
  native public function connect(connectionName:String):void;
  native public function get domain():String;
  native public function send(connectionName:String,methodName:String,... rest):void;

  native public function get client():Object;
  native public function set client(client:Object):void;
  native public function get isPerUser():Boolean;
  native public function set isPerUser(newValue:Boolean):void;
  native public function allowDomain(... rest):void;

  native public function allowInsecureDomain(... rest):void;
  native private var stubProperties:Object;
  native private function initStubProperties():void;
  native private function setStubProperty(key:String,value:*):*;
  native private function getStubProperty(key:String):*;

  [API("667")]
  static native public final function get isSupported():Boolean;
}


[native(cls="Program3DClass",instance="Program3DObject",methods="auto",construct="native")]
[API("674")]
public final class flash.display3D.Program3D extends Object
{
  native public function Program3D():*;
  native public function upload(vertexProgram:flash.utils.ByteArray,fragmentProgram:flash.utils.ByteArray):void;
  native public function dispose():void;
}


public final class flash.html.HTMLPDFCapability extends Object
{
  native public function HTMLPDFCapability():*;

  static native public const STATUS_OK:int = 0;
  static native public const ERROR_INSTALLED_READER_NOT_FOUND:int = 3201;
  static native public const ERROR_INSTALLED_READER_TOO_OLD:int = 3202;
  static native public const ERROR_PREFERRED_READER_TOO_OLD:int = 3203;
  static native public const ERROR_CANNOT_LOAD_READER:int = 3204;
}

[Version("air2.0")]
public final class flash.html.HTMLSWFCapability extends Object
{

  native public function HTMLSWFCapability():*;
  static native public const STATUS_OK:int = 0;
  static native public const ERROR_INSTALLED_PLAYER_NOT_FOUND:int = 3221;
  static native public const ERROR_INSTALLED_PLAYER_TOO_OLD:int = 3222;
}


[Version("10")]
public final class flash.ui.MouseCursor extends Object
{
  native public function MouseCursor():*;

  static native public const AUTO:String = "auto";
  static native public const ARROW:String = "arrow";
  static native public const BUTTON:String = "button";
  static native public const HAND:String = "hand";
  static native public const IBEAM:String = "ibeam";
}


[native(cls="TextEventClass",gc="exact",instance="TextEventObject",methods="auto")]
public class flash.events.TextEvent extends flash.events.Event
{

  native public function TextEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = ""):*;
  native private var m_text:String;
  native public function get text():String;
  native public function set text(value:String):void;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native private function copyNativeData(other:TextEvent):void;
  static native public const LINK:String = "link";
  static native public const TEXT_INPUT:String = "textInput";
}


public final class flash.net.URLRequestHeader extends Object
{
  native public function URLRequestHeader(name:String = "",value:String = ""):*;

  native public var name:String;
  native public var value:String;
}


[Version("10")]
public final class flash.display.TriangleCulling extends Object
{
  native public function TriangleCulling():*;
  static native public const NONE:String = "none";
  static native public const POSITIVE:String = "positive";

  static native public const NEGATIVE:String = "negative";
}


[native(cls="JPEGEncoderOptionsClass",instance="JPEGEncoderOptionsObject",methods="auto")]
[API("680")]
public final class flash.display.JPEGEncoderOptions extends Object
{
  native public function JPEGEncoderOptions(quality:uint = 80):*;
  native public var quality:uint;
}


[Version("air2.0")]
public final class flash.display.StageAspectRatio extends Object
{
  native public function StageAspectRatio():*;
  static native public const PORTRAIT:String = "portrait";

  static native public const LANDSCAPE:String = "landscape";
  [API("681")]
  static native public const ANY:String = "any";
}


[API("675")]
public final class flash.display.NativeWindowRenderMode extends Object
{
  native public function NativeWindowRenderMode():*;
  static native public const AUTO:String = "auto";
  static native public const CPU:String = "cpu";

  static native public const DIRECT:String = "direct";
  static native public const GPU:String = "gpu";
}


[native(cls="URLLoaderClass",gc="exact",instance="URLLoaderObject",methods="auto")]
[Event(name="httpResponseStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="open",type="flash.events.Event")]
public class flash.net.URLLoader extends flash.events.EventDispatcher
{
  native public function URLLoader(request:flash.net.URLRequest = null):*;
  native public var data:*;
  native public var dataFormat:String = "text";

  native private var stream:flash.net.URLStream;
  native public var bytesLoaded:uint = 0;
  native public var bytesTotal:uint = 0;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native public function load(request:flash.net.URLRequest):void;

  native public function close():void;
  native private function redirectEvent(event:flash.events.Event):void;
  native private function onComplete(event:flash.events.Event):void;
  native private function onProgress(event:flash.events.ProgressEvent):void;
}


[Version("10.1")]
public interface flash.accessibility.ISimpleTextSelection
{
  native function get selectionAnchorIndex():int;

  native function get selectionActiveIndex():int;
}


public interface flash.utils.IDataOutput
{
  native function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native function writeBoolean(value:Boolean):void;
  native function writeByte(value:int):void;
  native function writeShort(value:int):void;

  native function writeInt(value:int):void;
  native function writeUnsignedInt(value:uint):void;
  native function writeFloat(value:Number):void;
  native function writeDouble(value:Number):void;
  native function writeMultiByte(value:String,charSet:String):void;

  native function writeUTF(value:String):void;
  native function writeUTFBytes(value:String):void;
  native function writeObject(object:*):void;
  native function get objectEncoding():uint;
  native function set objectEncoding(version:uint):void;

  native function get endian():String;
  native function set endian(type:String):void;
}


[native(cls="SocketClass",instance="SocketObject",methods="auto")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="outputProgress",type="flash.events.OutputProgressEvent")]
[Event(name="socketData",type="flash.events.ProgressEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="connect",type="flash.events.Event")]
[Event(name="close",type="flash.events.Event")]
public class flash.net.Socket extends flash.events.EventDispatcher
  implements flash.utils.IDataInput,flash.utils.IDataOutput
{
  native public function Socket(host:String = null,port:int = 0):*;
  native private function _init():void;
  native private var _timeout:uint;

  native private var _timeoutTimer:flash.utils.Timer;
  native private var _timeoutEvent:flash.events.SecurityErrorEvent;
  native public function connect(host:String,port:int):void;
  native private function internalGetSecurityErrorMessage(host:String,port:int):String;
  [Version("10")]
  native public function get timeout():uint;

  [Version("10")]
  native public function set timeout(value:uint):void;
  native private function onTimeout(event:flash.events.TimerEvent):void;
  native private function internalConnect(host:String,port:int):void;
  native private function didFailureOccur():Boolean;
  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;

  native public function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function writeBoolean(value:Boolean):void;
  native public function writeByte(value:int):void;
  native public function writeShort(value:int):void;
  native public function writeInt(value:int):void;

  native public function writeUnsignedInt(value:uint):void;
  native public function writeFloat(value:Number):void;
  native public function writeDouble(value:Number):void;
  native public function writeMultiByte(value:String,charSet:String):void;
  native public function writeUTF(value:String):void;

  native public function writeUTFBytes(value:String):void;
  native public function readBoolean():Boolean;
  native public function readByte():int;
  native public function readUnsignedByte():uint;
  native public function readShort():int;

  native public function readUnsignedShort():uint;
  native public function readInt():int;
  native public function readUnsignedInt():uint;
  native public function readFloat():Number;
  native public function readDouble():Number;

  native public function readMultiByte(length:uint,charSet:String):String;
  native public function readUTF():String;
  native public function readUTFBytes(length:uint):String;
  native public function get bytesAvailable():uint;
  native public function get connected():Boolean;

  native public function close():void;
  native private function internalClose():void;
  native public function flush():void;
  native public function writeObject(object:*):void;
  native public function readObject():*;

  native public function get objectEncoding():uint;
  native public function set objectEncoding(version:uint):void;
  native public function get endian():String;
  native public function set endian(type:String):void;
  [API("674")]
  native public function get bytesPending():uint;

  [Version("air2.0")]
  native public function get localAddress():String;
  [Version("air2.0")]
  native public function get localPort():int;
  [Version("air2.0")]
  native public function get remoteAddress():String;
  [Version("air2.0")]
  native public function get remotePort():int;
  native private function internalOnError():void;

  native private function wasCalledByAppContent(minVersion:String):Boolean;
  static native private const MIN_TIMEOUT:* = 250;
}


[native(cls="SecureSocketClass",instance="SecureSocketObject",methods="auto",construct="check")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="socketData",type="flash.events.ProgressEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="connect",type="flash.events.Event")]
[Event(name="close",type="flash.events.Event")]
public class flash.net.SecureSocket extends flash.net.Socket
{
  native public function SecureSocket():*;
  [API("668")]
  native public override function connect(host:String,port:int):void;
  [API("668")]
  native public function get serverCertificateStatus():String;

  [API("674")]
  native public function get serverCertificate():flash.security.X509Certificate;
  [API("674")]
  native public function addBinaryChainBuildingCertificate(certificate:flash.utils.ByteArray,trusted:Boolean):void;
  native private function getConnectionResultSet():Boolean;
  native private function getConnectionResult():uint;
  native private function connectionResultToCertStatus(connectionResult:uint):String;

  [API("668")]
  static native public final function get isSupported():Boolean;
  static native private const SSL_OK:uint = 0;
  static native private const SSL_NOT_AVAILABLE:uint = 1;
  static native private const SSL_NO_CONNECTION:uint = 2;
  static native private const SSL_HANDSHAKE_FAILED:uint = 3;

  static native private const SSL_API_FAILURE:uint = 4;
  static native private const SSL_CERT_EXPIRED:uint = 5;
  static native private const SSL_CERT_PRINCIPAL_MISMATCH:uint = 6;
  static native private const SSL_CERT_UNTRUSTED_SIGNERS:uint = 7;
  static native private const SSL_CERT_REVOKED:uint = 8;

  static native private const SSL_CERT_INVALID:uint = 9;
  static native private const SSL_CERT_INVALID_CHAIN:uint = 10;
  static native private const SSL_CERT_NOT_YET_VALID:uint = 11;
  static native private const SSL_CERT_API_ERROR:uint = 12;
}


[Version("10")]
public final class flash.text.engine.TypographicCase extends Object
{
  native public function TypographicCase():*;

  static native public const DEFAULT:String = "default";
  static native public const TITLE:String = "title";
  static native public const CAPS:String = "caps";
  static native public const SMALL_CAPS:String = "smallCaps";
  static native public const UPPERCASE:String = "uppercase";

  static native public const LOWERCASE:String = "lowercase";
  static native public const CAPS_AND_SMALL_CAPS:String = "capsAndSmallCaps";
}


[Version("10")]
public interface flash.display.IGraphicsPath
{
}


[Version("10")]
public final class flash.display.GraphicsTrianglePath extends Object
  implements flash.display.IGraphicsPath,flash.display.IGraphicsData
{
  native public function GraphicsTrianglePath(vertices:Vector.<Number> = null,indices:Vector.<int> = null,uvtData:Vector.<Number> = null,culling:String = "none"):*;
  native public var indices:Vector.<int>;
  native public var vertices:Vector.<Number>;

  native public var uvtData:Vector.<Number>;
  native public function get culling():String;
  native public function set culling(value:String):void;
  native private var _culling:String;
}


public final class flash.display.PixelSnapping extends Object
{
  native public function PixelSnapping():*;

  static native public const NEVER:String = "never";
  static native public const ALWAYS:String = "always";
  static native public const AUTO:String = "auto";
}


[API("674")]
public final class flash.display3D.Context3DProgramType extends Object
{
  native public function Context3DProgramType():*;
  static native public const VERTEX:String = "vertex";

  static native public const FRAGMENT:String = "fragment";
}


[native(cls="ShapeClass",gc="exact",instance="ShapeObject",methods="auto")]
public class flash.display.Shape extends flash.display.DisplayObject
{
  native public function Shape():*;
  native public function get graphics():flash.display.Graphics;
}


[API("661")]
public class flash.data.SQLColumnSchema extends Object
{
  native public function SQLColumnSchema(name:String,primaryKey:Boolean,allowNull:Boolean,autoIncrement:Boolean,dataType:String,defaultCollationType:String):*;
  native public function get allowNull():Boolean;

  native public function get autoIncrement():Boolean;
  native public function get defaultCollationType():String;
  native public function get dataType():String;
  native public function get name():String;
  native public function get primaryKey():Boolean;

  native private var _name:String;
  native private var _primaryKey:Boolean;
  native private var _allowNull:Boolean;
  native private var _autoInc:Boolean;
  native private var _dataType:String;

  native private var _collSeq:String;
}


[native(cls="SoundMixerClass",instance="SoundMixerObject",methods="auto")]
public final class flash.media.SoundMixer extends Object
{
  native public function SoundMixer():*;
  static native public final function stopAll():void;
  static native public final function computeSpectrum(outputArray:flash.utils.ByteArray,FFTMode:Boolean = false,stretchFactor:int = 0):void;
  static native public final function get bufferTime():int;

  static native public final function set bufferTime(bufferTime:int):void;
  static native public final function get soundTransform():flash.media.SoundTransform;
  static native public final function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  static native public final function areSoundsInaccessible():Boolean;
  [API("675")]
  static native public final function get audioPlaybackMode():String;

  [API("675")]
  static native public final function set audioPlaybackMode(value:String):void;
  [API("675")]
  static native public final function get useSpeakerphoneForVoice():Boolean;
  [API("675")]
  static native public final function set useSpeakerphoneForVoice(value:Boolean):void;
}


[native(cls="ConvolutionFilterClass",instance="ConvolutionFilterObject",methods="auto")]
public class flash.filters.ConvolutionFilter extends flash.filters.BitmapFilter
{
  native public function ConvolutionFilter(matrixX:Number = 0,matrixY:Number = 0,matrix:Array = null,divisor:Number = 1.0,bias:Number = 0.0,preserveAlpha:Boolean = true,clamp:Boolean = true,color:uint = 0,alpha:Number = 0.0):*;
  native public function get matrix():Array;

  native public function set matrix(value:Array):void;
  native public function get matrixX():Number;
  native public function set matrixX(value:Number):void;
  native public function get matrixY():Number;
  native public function set matrixY(value:Number):void;

  native public function get divisor():Number;
  native public function set divisor(value:Number):void;
  native public function get bias():Number;
  native public function set bias(value:Number):void;
  native public function get preserveAlpha():Boolean;

  native public function set preserveAlpha(value:Boolean):void;
  native public function get clamp():Boolean;
  native public function set clamp(value:Boolean):void;
  native public function get color():uint;
  native public function set color(value:uint):void;

  native public function get alpha():Number;
  native public function set alpha(value:Number):void;
  native public override function clone():flash.filters.BitmapFilter;
}


[Version("10.1")]
public final class flash.net.NetGroupReceiveMode extends Object
{
  native public function NetGroupReceiveMode():*;
  static native public const EXACT:String = "exact";

  static native public const NEAREST:String = "nearest";
}


[API("661")]
public class flash.filesystem.FileMode extends Object
{
  native public function FileMode():*;
  static native public const READ:String = "read";
  static native public const WRITE:String = "write";
  static native public const UPDATE:String = "update";

  static native public const APPEND:String = "append";
}


[API("692")]
public class flash.events.DRMDeviceGroupEvent extends flash.events.Event
{
  native public function DRMDeviceGroupEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,deviceGroup:flash.net.drm.DRMDeviceGroup = null):*;
  native public function set deviceGroup(value:flash.net.drm.DRMDeviceGroup):*;
  native public function get deviceGroup():flash.net.drm.DRMDeviceGroup;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native private var m_deviceGroup:flash.net.drm.DRMDeviceGroup;
  static native public const ADD_TO_DEVICE_GROUP_COMPLETE:String = "addToDeviceGroupComplete";
  static native public const REMOVE_FROM_DEVICE_GROUP_COMPLETE:String = "removeFromDeviceGroupComplete";
}


[API("692")]
public final class flash.display3D.Context3DBufferUsage extends Object
{
  native public function Context3DBufferUsage():*;

  static native public const STATIC_DRAW:String = "staticDraw";
  static native public const DYNAMIC_DRAW:String = "dynamicDraw";
}


[Version("10")]
public final class flash.text.engine.TextLineCreationResult extends Object
{
  native public function TextLineCreationResult():*;
  static native public const SUCCESS:String = "success";
  static native public const EMERGENCY:String = "emergency";

  static native public const COMPLETE:String = "complete";
  static native public const INSUFFICIENT_WIDTH:String = "insufficientWidth";
}


public class flash.events.StatusEvent extends flash.events.Event
{
  native public function StatusEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,code:String = "",level:String = ""):*;
  native private var m_code:String;
  native private var m_level:String;

  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get code():String;
  native public function set code(value:String):void;
  native public function get level():String;

  native public function set level(value:String):void;
  static native public const STATUS:String = "status";
}


[API("661")]
public class flash.events.SQLEvent extends flash.events.Event
{
  native public function SQLEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false):*;
  native public override function clone():flash.events.Event;
  static native public const ANALYZE:String = "analyze";

  static native public const ATTACH:String = "attach";
  static native public const BEGIN:String = "begin";
  static native public const CANCEL:String = "cancel";
  static native public const COMPACT:String = "compact";
  static native public const CLOSE:String = "close";

  static native public const COMMIT:String = "commit";
  static native public const DEANALYZE:String = "deanalyze";
  static native public const DETACH:String = "detach";
  static native public const OPEN:String = "open";
  static native public const REENCRYPT:String = "reencrypt";

  static native public const ROLLBACK:String = "rollback";
  static native public const RESULT:String = "result";
  static native public const RELEASE_SAVEPOINT:String = "releaseSavepoint";
  static native public const ROLLBACK_TO_SAVEPOINT:String = "rollbackToSavepoint";
  static native public const SCHEMA:String = "schema";

  static native public const SET_SAVEPOINT:String = "setSavepoint";
}


[native(cls="ShaderDataClass",instance="ShaderDataObject",methods="auto")]
[Version("10")]
public final dynamic class flash.display.ShaderData extends Object
{
  native public function ShaderData(byteCode:flash.utils.ByteArray):*;
  native private function _setByteCode(code:flash.utils.ByteArray):void;
}


[API("682")]
public final class flash.system.WorkerState extends Object
{
  native public function WorkerState():*;
  static native public const NEW:String = "new";

  static native public const RUNNING:String = "running";
  static native public const TERMINATED:String = "terminated";
}

[native(cls="WorkerClass",instance="WorkerObject",methods="auto",construct="native")]
[API("682")]
[Event(name="workerState",type="flash.events.Event")]
public final class flash.system.Worker extends flash.events.EventDispatcher
{
  native public function Worker():*;
  native public function createMessageChannel(receiver:Worker):flash.system.MessageChannel;
  native public function start():void;

  native public function setSharedProperty(key:String,value:*):void;
  native private function internalSetSharedProperty(key:String,value:*):void;
  native public function getSharedProperty(key:String):*;
  native private function internalGetSharedProperty(key:String):*;
  native public function get isPrimordial():Boolean;

  native public function get state():String;
  native private function internalGetState():String;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native private function internalAddEventListener(type:String,listener:Function,useCapture:Boolean,priority:int,useWeakReference:Boolean):void;
  native public override function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;

  native private function internalRemoveEventListener(type:String,listener:Function,useCapture:Boolean):void;
  native public function terminate():Boolean;
  native private var _byteCode:flash.utils.ByteArray;
  static native public final function get isSupported():Boolean;
  static native public final function get current():Worker;

  static native private var _current:Worker;
}


public class flash.system.LoaderContext extends Object
{
  native public function LoaderContext(checkPolicyFile:Boolean = false,applicationDomain:flash.system.ApplicationDomain = null,securityDomain:flash.system.SecurityDomain = null):*;
  native public var checkPolicyFile:Boolean = false;
  native public var applicationDomain:flash.system.ApplicationDomain = null;
  native public var securityDomain:flash.system.SecurityDomain = null;

  [API("661")]
  native public function get allowLoadBytesCodeExecution():Boolean;
  [API("661")]
  native public function set allowLoadBytesCodeExecution(allow:Boolean):void;
  native public var allowCodeImport:Boolean;
  [API("670")]
  native public var requestedContentParent:flash.display.DisplayObjectContainer;
  [API("670")]
  native public var parameters:Object;

  [API("674")]
  native public var imageDecodingPolicy:String;
}


[API("663")]
public class flash.system.JPEGLoaderContext extends flash.system.LoaderContext
{
  native public function JPEGLoaderContext(deblockingFilter:Number = 0.0,checkPolicyFile:Boolean = false,applicationDomain:flash.system.ApplicationDomain = null,securityDomain:flash.system.SecurityDomain = null):*;
  native public var deblockingFilter:Number = 0.0;
}


[API("683")]
public final class flash.notifications.NotificationStyle extends Object
{
  native public function NotificationStyle():*;
  static native public const ALERT:String = "alert";

  static native public const SOUND:String = "sound";
  static native public const BADGE:String = "badge";
}

[native("FlashDebuggerScript::enterDebugger")]
native public function flash.debugger.enterDebugger():void;

native public const flash.utils.flash_proxy:* = "http://www.adobe.com/2006/actionscript/flash/proxy";

[native(cls="ProxyClass",gc="exact",instance="ProxyObject",methods="auto")]
public class flash.utils.Proxy extends Object
{
  native public function Proxy():*;

  native flash_proxy function getProperty(name:*):*;
  native flash_proxy function setProperty(name:*,value:*):void;
  native flash_proxy function callProperty(name:*,... rest):*;
  native flash_proxy function hasProperty(name:*):Boolean;
  native flash_proxy function deleteProperty(name:*):Boolean;

  native flash_proxy function getDescendants(name:*):*;
  native flash_proxy function nextNameIndex(index:int):int;
  native flash_proxy function nextName(index:int):String;
  native flash_proxy function nextValue(index:int):*;
  native flash_proxy function isAttribute(name:*):Boolean;

  static native private const flash_proxy:* = "http://www.adobe.com/2006/actionscript/flash/proxy";
}


[API("661")]
[native(cls="HTMLScriptPackageClass",instance="HTMLScriptProxy::HTMLScriptPackageObject",methods="auto",construct="native")]
public final class flash.html.script.Package extends flash.utils.Proxy
{
  native public function Package(parent:Package,packageName:String,appDomain:flash.system.ApplicationDomain):*;
  native private function getFullyQualifiedPackageName():String;
  native flash_proxy final override function hasProperty(name:*):Boolean;
  native private function getFullyQualifiedName(nameAsString:String):String;

  native private function doLookup(nameAsString:String):*;
  native flash_proxy final override function getProperty(name:*):*;
  native flash_proxy final override function callProperty(name:*,... rest):*;
  native flash_proxy final override function nextNameIndex(index:int):int;
  native private function throwNonFunctionException(fullyQualifiedNameAsString:String):void;

  native private var m_parent:Package;
  native private var m_packageName:String;
  native private var m_fullyQualifiedName:String;
  native private var m_appDomain:flash.system.ApplicationDomain;
  static native private final function nativeConstruct(parent:Package,packageName:String,appDomain:flash.system.ApplicationDomain):Package;

  static native private const flash_proxy:* = "http://www.adobe.com/2006/actionscript/flash/proxy";
}

[native(construct="native")]
public class flash.html.script.PropertyEnumHelper extends Object
{
  native public function PropertyEnumHelper(enumPropertiesClosure:Function,getPropertyClosure:Function):*;
  native public function nextNameIndex(lastIndex:int):int;
  native public function nextName(index:int):String;
  native public function nextValue(index:int):*;

  native private var m_propertyNames:Array;
  native private var m_enumPropertiesClosure:Function;
  native private var m_getPropertyClosure:Function;
}


[native(cls="MultitouchClass",methods="auto",construct="none")]
[Version("10.1")]
public final class flash.ui.Multitouch extends Object
{
  native public function Multitouch():*;
  static native public final function get inputMode():String;

  static native public final function set inputMode(value:String):void;
  static native public final function get supportsTouchEvents():Boolean;
  static native public final function get supportsGestureEvents():Boolean;
  static native public final function get supportedGestures():Vector.<String>;
  static native public final function get maxTouchPoints():int;

  [API("675")]
  static native public final function get mapTouchToMouse():Boolean;
  [API("675")]
  static native public final function set mapTouchToMouse(value:Boolean):void;
}


[native(cls="DateClass",gc="exact",instance="DateObject",methods="auto",construct="override")]
public dynamic class Date extends Object
{
  native public function Date(year:* = null,month:* = null,date:* = null,hours:* = null,minutes:* = null,seconds:* = null,ms:* = null):*;
  native AS3 function valueOf():Number;
  native private function _toString(index:int):String;

  native private function _setTime(value:Number):Number;
  native private function _get(index:int):Number;
  native AS3 function setTime(t:* = null):Number;
  native AS3 function toString():String;
  native AS3 function toDateString():String;

  native AS3 function toTimeString():String;
  native AS3 function toLocaleString():String;
  native AS3 function toLocaleDateString():String;
  native AS3 function toLocaleTimeString():String;
  native AS3 function toUTCString():String;

  native AS3 function getUTCFullYear():Number;
  native AS3 function getUTCMonth():Number;
  native AS3 function getUTCDate():Number;
  native AS3 function getUTCDay():Number;
  native AS3 function getUTCHours():Number;

  native AS3 function getUTCMinutes():Number;
  native AS3 function getUTCSeconds():Number;
  native AS3 function getUTCMilliseconds():Number;
  native AS3 function getFullYear():Number;
  native AS3 function getMonth():Number;

  native AS3 function getDate():Number;
  native AS3 function getDay():Number;
  native AS3 function getHours():Number;
  native AS3 function getMinutes():Number;
  native AS3 function getSeconds():Number;

  native AS3 function getMilliseconds():Number;
  native AS3 function getTimezoneOffset():Number;
  native AS3 function getTime():Number;
  native private function _setFullYear(... rest):Number;
  native private function _setMonth(... rest):Number;

  native private function _setDate(... rest):Number;
  native private function _setHours(... rest):Number;
  native private function _setMinutes(... rest):Number;
  native private function _setSeconds(... rest):Number;
  native private function _setMilliseconds(... rest):Number;

  native private function _setUTCFullYear(... rest):Number;
  native private function _setUTCMonth(... rest):Number;
  native private function _setUTCDate(... rest):Number;
  native private function _setUTCHours(... rest):Number;
  native private function _setUTCMinutes(... rest):Number;

  native private function _setUTCSeconds(... rest):Number;
  native private function _setUTCMilliseconds(... rest):Number;
  native AS3 function setFullYear(year:* = null,month:* = null,date:* = null):Number;
  native AS3 function setMonth(month:* = null,date:* = null):Number;
  native AS3 function setDate(date:* = null):Number;

  native AS3 function setHours(hour:* = null,min:* = null,sec:* = null,ms:* = null):Number;
  native AS3 function setMinutes(min:* = null,sec:* = null,ms:* = null):Number;
  native AS3 function setSeconds(sec:* = null,ms:* = null):Number;
  native AS3 function setMilliseconds(ms:* = null):Number;
  native AS3 function setUTCFullYear(year:* = null,month:* = null,date:* = null):Number;

  native AS3 function setUTCMonth(month:* = null,date:* = null):Number;
  native AS3 function setUTCDate(date:* = null):Number;
  native AS3 function setUTCHours(hour:* = null,min:* = null,sec:* = null,ms:* = null):Number;
  native AS3 function setUTCMinutes(min:* = null,sec:* = null,ms:* = null):Number;
  native AS3 function setUTCSeconds(sec:* = null,ms:* = null):Number;

  native AS3 function setUTCMilliseconds(ms:* = null):Number;
  native public function get fullYear():Number;
  native public function set fullYear(value:Number):*;
  native public function get month():Number;
  native public function set month(value:Number):*;

  native public function get date():Number;
  native public function set date(value:Number):*;
  native public function get hours():Number;
  native public function set hours(value:Number):*;
  native public function get minutes():Number;

  native public function set minutes(value:Number):*;
  native public function get seconds():Number;
  native public function set seconds(value:Number):*;
  native public function get milliseconds():Number;
  native public function set milliseconds(value:Number):*;

  native public function get fullYearUTC():Number;
  native public function set fullYearUTC(value:Number):*;
  native public function get monthUTC():Number;
  native public function set monthUTC(value:Number):*;
  native public function get dateUTC():Number;

  native public function set dateUTC(value:Number):*;
  native public function get hoursUTC():Number;
  native public function set hoursUTC(value:Number):*;
  native public function get minutesUTC():Number;
  native public function set minutesUTC(value:Number):*;

  native public function get secondsUTC():Number;
  native public function set secondsUTC(value:Number):*;
  native public function get millisecondsUTC():Number;
  native public function set millisecondsUTC(value:Number):*;
  native public function get time():Number;

  native public function set time(value:Number):*;
  native public function get timezoneOffset():Number;
  native public function get day():Number;
  native public function get dayUTC():Number;
  static native public const length:int = 7;

  static native public final function parse(s:*):Number;
  static native public final function UTC(year:*,month:*,date:* = 1,hours:* = 0,minutes:* = 0,seconds:* = 0,ms:* = 0,... rest):Number;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}


public final class flash.display.SWFVersion extends Object
{
  native public function SWFVersion():*;
  static native public const FLASH1:uint = 1;

  static native public const FLASH2:uint = 2;
  static native public const FLASH3:uint = 3;
  static native public const FLASH4:uint = 4;
  static native public const FLASH5:uint = 5;
  static native public const FLASH6:uint = 6;

  static native public const FLASH7:uint = 7;
  static native public const FLASH8:uint = 8;
  static native public const FLASH9:uint = 9;
  static native public const FLASH10:uint = 10;
  static native public const FLASH11:uint = 11;

  static native public const FLASH12:uint = 12;
}


[API("683")]
[native(cls="RemoteNotifierClass",instance="RemoteNotifierObject",methods="auto")]
[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="token",type="flash.events.RemoteNotificationEvent")]
[Event(name="notification",type="flash.events.RemoteNotificationEvent")]
public class flash.notifications.RemoteNotifier extends flash.events.EventDispatcher
{
  native public function RemoteNotifier():*;
  native public function subscribe(options:flash.notifications.RemoteNotifierSubscribeOptions = null):void;
  native public function unsubscribe():void;
  static native public final function get supportedNotificationStyles():Vector.<String>;
}


public class flash.events.ProgressEvent extends flash.events.Event
{

  native public function ProgressEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,bytesLoaded:Number = 0,bytesTotal:Number = 0):*;
  native private var m_bytesLoaded:Number;
  native private var m_bytesTotal:Number;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native public function get bytesLoaded():Number;
  native public function set bytesLoaded(value:Number):void;
  native public function get bytesTotal():Number;
  native public function set bytesTotal(value:Number):void;
  static native public const PROGRESS:String = "progress";

  static native public const SOCKET_DATA:String = "socketData";
  [API("668")]
  static native public const STANDARD_OUTPUT_DATA:String = "standardOutputData";
  [API("668")]
  static native public const STANDARD_ERROR_DATA:String = "standardErrorData";
  [API("668")]
  static native public const STANDARD_INPUT_PROGRESS:String = "standardInputProgress";
}


[API("661")]
[native(cls="WindowInitOptionsClass",instance="WindowInitOptionsObject",methods="auto")]
public class flash.display.NativeWindowInitOptions extends Object
{
  native public function NativeWindowInitOptions():*;

  native public function get systemChrome():String;
  native public function set systemChrome(value:String):void;
  native public function get transparent():Boolean;
  native public function set transparent(value:Boolean):void;
  native public function get type():String;

  native public function set type(value:String):void;
  native public function get minimizable():Boolean;
  native public function set minimizable(value:Boolean):void;
  native public function get maximizable():Boolean;
  native public function set maximizable(value:Boolean):void;

  native public function get resizable():Boolean;
  native public function set resizable(value:Boolean):void;
  [API("671")]
  native public function get owner():flash.display.NativeWindow;
  [API("671")]
  native public function set owner(value:flash.display.NativeWindow):void;
  [API("675")]
  native public function get renderMode():String;

  [API("675")]
  native public function set renderMode(value:String):void;
}


[Version("air2.0")]
public class flash.filesystem.StorageVolume extends Object
{
  native public function StorageVolume(rootDirPath:flash.filesystem.File,name:String,writable:Boolean,removable:Boolean,fileSysType:String,drive:String):void;
  native private var _rootDir:flash.filesystem.File = null;
  native private var _name:String = null;
  native private var _isWritable:Boolean = false;

  native private var _isRemovable:Boolean = false;
  native private var _fileSystemType:String = null;
  native private var _drive:String = null;
  native public function get rootDirectory():flash.filesystem.File;
  native public function get name():String;

  native public function get drive():String;
  native public function get isWritable():Boolean;
  native public function get isRemovable():Boolean;
  native public function get fileSystemType():String;
}

native public function flash.media.scanHardware():void;

[native(cls="CameraClass",instance="CameraObject",methods="auto",construct="check")]
[Event(name="videoFrame",type="flash.events.Event")]
[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="activity",type="flash.events.ActivityEvent")]
public final class flash.media.Camera extends flash.events.EventDispatcher
{

  native public function Camera():*;
  native public function get activityLevel():Number;
  native public function get bandwidth():int;
  native public function get currentFPS():Number;
  native public function get fps():Number;

  native public function get height():int;
  native public function get index():int;
  native public function get keyFrameInterval():int;
  native public function get loopback():Boolean;
  native public function get motionLevel():int;

  native public function get motionTimeout():int;
  native public function get muted():Boolean;
  native public function get name():String;
  [API("675")]
  native public function get position():String;
  native public function get quality():int;

  native public function get width():int;
  [Inspectable(environment="none")]
  native public function setCursor(value:Boolean):void;
  native public function setKeyFrameInterval(keyFrameInterval:int):void;
  native public function setLoopback(compress:Boolean = false):void;
  native public function setMode(width:int,height:int,fps:Number,favorArea:Boolean = true):void;

  native public function setMotionLevel(motionLevel:int,timeout:int = 2000):void;
  native public function setQuality(bandwidth:int,quality:int):void;
  [API("682")]
  native public function drawToBitmapData(destination:flash.display.BitmapData):void;
  [API("682")]
  native public function copyToByteArray(rect:flash.geom.Rectangle,destination:flash.utils.ByteArray):void;
  [API("682")]
  native public function copyToVector(rect:flash.geom.Rectangle,destination:Vector.<uint>):void;

  static native internal final function _scanHardware():void;
  static native public final function get names():Array;
  [Version("10.1")]
  static native public final function get isSupported():Boolean;
  static native public final function getCamera(name:String = null):Camera;
}


[Version("10")]
public final class flash.text.engine.TextBaseline extends Object
{
  native public function TextBaseline():*;

  static native public const ROMAN:String = "roman";
  static native public const ASCENT:String = "ascent";
  static native public const DESCENT:String = "descent";
  static native public const IDEOGRAPHIC_TOP:String = "ideographicTop";
  static native public const IDEOGRAPHIC_CENTER:String = "ideographicCenter";

  static native public const IDEOGRAPHIC_BOTTOM:String = "ideographicBottom";
  static native public const USE_DOMINANT_BASELINE:String = "useDominantBaseline";
}


public final class flash.text.AntiAliasType extends Object
{
  native public function AntiAliasType():*;
  static native public const NORMAL:String = "normal";
  static native public const ADVANCED:String = "advanced";
}


[native(cls="NetGroupClass",instance="NetGroupObject",methods="auto")]
[Version("10.1")]
[Event(name="netStatus",type="flash.events.NetStatusEvent")]
public class flash.net.NetGroup extends flash.events.EventDispatcher
{

  native public function NetGroup(connection:flash.net.NetConnection,groupspec:String):*;
  native private function ctor(connection:flash.net.NetConnection,groupspec:String):void;
  native private function onStatus(info:*):void;
  native public function close():void;
  native private function invoke(index:uint,... rest):*;

  native public function get replicationStrategy():String;
  native public function set replicationStrategy(s:String):void;
  native public function addHaveObjects(startIndex:Number,endIndex:Number):void;
  native public function removeHaveObjects(startIndex:Number,endIndex:Number):void;
  native public function addWantObjects(startIndex:Number,endIndex:Number):void;

  native public function removeWantObjects(startIndex:Number,endIndex:Number):void;
  native public function writeRequestedObject(requestID:int,object:Object):void;
  native public function denyRequestedObject(requestID:int):void;
  native public function get estimatedMemberCount():Number;
  native public function get neighborCount():Number;

  native public function get receiveMode():String;
  native public function set receiveMode(mode:String):*;
  native public function get info():flash.net.NetGroupInfo;
  native public function convertPeerIDToGroupAddress(peerID:String):String;
  native public function get localCoverageFrom():String;

  native public function get localCoverageTo():String;
  native public function post(message:Object):String;
  native public function sendToNearest(message:Object,groupAddress:String):String;
  native public function sendToNeighbor(message:Object,sendMode:String):String;
  native public function sendToAllNeighbors(message:Object):String;

  native public function addNeighbor(peerID:String):Boolean;
  native public function addMemberHint(peerID:String):Boolean;
  static native private const kClose:uint = 0;
  static native private const kPost:uint = 344;
  static native private const kSendToNearest:uint = 345;

  static native private const kSendToNeighbor:uint = 346;
  static native private const kGetReceiveMode:uint = 347;
  static native private const kSetReceiveMode:uint = 348;
  static native private const kGetEstimatedMemberCount:uint = 349;
  static native private const kGetNeighborCount:uint = 350;

  static native private const kGetLocalCoverageFrom:uint = 353;
  static native private const kGetLocalCoverageTo:uint = 354;
  static native private const kGetReplicationStrategy:uint = 355;
  static native private const kSetReplicationStrategy:uint = 356;
  static native private const kUpdateHaveBlocks:uint = 357;

  static native private const kUpdateWantBlocks:uint = 358;
  static native private const kWriteRequestedBlock:uint = 359;
  static native private const kDenyRequestedBlock:uint = 360;
  static native private const kAddNeighbor:uint = 361;
  static native private const kAddMemberHint:uint = 362;
}


[API("661")]
public class flash.events.NativeWindowDisplayStateEvent extends flash.events.Event
{

  native public function NativeWindowDisplayStateEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,beforeDisplayState:String = "",afterDisplayState:String = ""):*;
  native private var m_beforeDisplayState:String;
  native private var m_afterDisplayState:String;
  native public override function clone():flash.events.Event;
  native public function get beforeDisplayState():String;

  native public function get afterDisplayState():String;
  native public override function toString():String;
  static native public const DISPLAY_STATE_CHANGING:String = "displayStateChanging";
  static native public const DISPLAY_STATE_CHANGE:String = "displayStateChange";
}


[Version("air2.0")]
public class flash.net.dns.ResourceRecord extends Object
{
  native public function ResourceRecord():*;

  native private var _name:String = "";
  native public function get name():String;
  native public function set name(value:String):void;
  native private var _ttl:int = 0;
  native public function get ttl():int;

  native public function set ttl(value:int):void;
}


[Version("air2.0")]
public class flash.net.dns.ARecord extends flash.net.dns.ResourceRecord
{
  native public function ARecord():*;
  native private var _address:String = "";
  native public function get address():String;
  native public function set address(value:String):void;
}


public class flash.events.ErrorEvent extends flash.events.TextEvent
{

  native public function ErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",id:int = 0):*;
  [API("667")]
  native public function get errorID():int;
  native private var m_errorID:int;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  static native public const ERROR:String = "error";
}


public class flash.events.IOErrorEvent extends flash.events.ErrorEvent
{
  native public function IOErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",id:int = 0):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  static native public const IO_ERROR:String = "ioError";

  [Inspectable(environment="none")]
  static native public const NETWORK_ERROR:String = "networkError";
  [Inspectable(environment="none")]
  static native public const DISK_ERROR:String = "diskError";
  [Inspectable(environment="none")]
  static native public const VERIFY_ERROR:String = "verifyError";
  [Inspectable(environment="none")]
  [API("668")]
  static native public const STANDARD_INPUT_IO_ERROR:String = "standardInputIoError";
  [Inspectable(environment="none")]
  [API("668")]
  static native public const STANDARD_OUTPUT_IO_ERROR:String = "standardOutputIoError";

  [Inspectable(environment="none")]
  [API("668")]
  static native public const STANDARD_ERROR_IO_ERROR:String = "standardErrorIoError";
}


[API("675")]
[native(cls="StageTextImplClass",instance="StageTextImplObject",methods="auto",construct="native",friend="StageTextObject")]
public class flash.text.StageTextImpl extends flash.display.Sprite
{
  native public function StageTextImpl():*;
  native private function onKeyFocusChange(evt:flash.events.FocusEvent):void;
  native private function onKeyUp(evt:flash.events.KeyboardEvent):void;
  native private function onKeyDown(evt:flash.events.KeyboardEvent):void;

  native private function addListenersForASImpl(st:flash.text.StageText,obj:flash.events.EventDispatcher):void;
  [cppcall]
  native private function addFullScreenListeners():*;
  [cppcall]
  native private function removeFullScreenListeners():*;
  native private function onFullScreenEvent(evt:flash.events.Event):*;
  native private function focusOutHandler(evt:flash.events.Event):void;

  native private function addMyListeners():void;
  native private function onNativeFocusOut():void;
  native private function onNativeSoftKeyboardActivate():void;
  native private function onNativeSoftKeyboardActivating():Boolean;
  native private function onNativeSoftKeyboardDeactivate(triggerType:String):void;

  native private function onNativeDisplayStateChangeForStage():void;
}

[API("675")]
[native(cls="StageTextClass",instance="StageTextObject",methods="auto",construct="check")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="keyUp",type="flash.events.KeyboardEvent")]
[Event(name="keyDown",type="flash.events.KeyboardEvent")]
[Event(name="softKeyboardDeactivate",type="flash.events.SoftKeyboardEvent")]
[Event(name="softKeyboardActivate",type="flash.events.SoftKeyboardEvent")]
[Event(name="softKeyboardActivating",type="flash.events.SoftKeyboardEvent")]
[Event(name="focusOut",type="flash.events.FocusEvent")]
[Event(name="focusIn",type="flash.events.FocusEvent")]
[Event(name="change",type="flash.events.Event")]
public final class flash.text.StageText extends flash.events.EventDispatcher
{
  native public function StageText(initOptions:flash.text.StageTextInitOptions = null):*;
  native private function init(initOptions:flash.text.StageTextInitOptions):void;
  native public function set editable(value:Boolean):void;
  native public function get editable():Boolean;

  native public function set text(value:String):void;
  native public function get text():String;
  native public function set fontFamily(value:String):void;
  native public function get fontFamily():String;
  native public function set fontSize(value:int):*;

  native public function get fontSize():int;
  native public function set color(value:uint):*;
  native public function get color():uint;
  native public function set fontWeight(value:String):void;
  native public function get fontWeight():String;

  native public function set fontPosture(value:String):void;
  native public function get fontPosture():String;
  native public function get displayAsPassword():Boolean;
  native public function set displayAsPassword(value:Boolean):void;
  native public function set maxChars(value:int):void;

  native public function get maxChars():int;
  native public function get multiline():Boolean;
  native public function set restrict(value:String):void;
  native public function get restrict():String;
  native public function set returnKeyLabel(value:String):void;

  native public function get returnKeyLabel():String;
  native public function set textAlign(value:String):void;
  native public function get textAlign():String;
  native public function get softKeyboardType():String;
  native public function set softKeyboardType(value:String):void;

  native public function set autoCapitalize(value:String):void;
  native public function get autoCapitalize():String;
  native public function set autoCorrect(value:Boolean):void;
  native public function get autoCorrect():Boolean;
  native public function set locale(value:String):void;

  native public function get locale():String;
  native public function assignFocus():void;
  native public function selectRange(anchorIndex:int,activeIndex:int):void;
  native public function get selectionActiveIndex():int;
  native public function get selectionAnchorIndex():int;

  native public function set stage(rect:flash.display.Stage):void;
  native public function get stage():flash.display.Stage;
  native public function set viewPort(rect:flash.geom.Rectangle):void;
  native public function get viewPort():flash.geom.Rectangle;
  native public function drawViewPortToBitmapData(bitmap:flash.display.BitmapData):void;

  native public function dispose():void;
  native public function get visible():Boolean;
  native public function set visible(value:Boolean):void;
}

native public function flash.utils.describeType(value:*):XML;
[native("FlashUtilScript::getAliasName")]
native public function flash.utils.getAliasName(value:*):String;

native public function flash.utils.getQualifiedClassName(value:*):String;
[native("FlashUtilScript::getDefinitionByName")]
native public function flash.utils.getDefinitionByName(name:String):Object;
native public function flash.utils.getQualifiedSuperclassName(value:*):String;
[native("FlashUtilScript::getTimer")]
native public function flash.utils.getTimer():int;
[native("FlashUtilScript::escapeMultiByte")]
native public function flash.utils.escapeMultiByte(value:String):String;

[native("FlashUtilScript::unescapeMultiByte")]
native public function flash.utils.unescapeMultiByte(value:String):String;
[native("FlashUtilScript::trace")]
native public function trace(... rest):void;
[native("FlashUtilScript::watson")]
[API("708")]
native public function watson(n:int):Boolean;


[Version("10.1")]
public final class flash.ui.MultitouchInputMode extends Object
{
  native public function MultitouchInputMode():*;
  static native public const NONE:String = "none";

  static native public const GESTURE:String = "gesture";
  static native public const TOUCH_POINT:String = "touchPoint";
}


[Version("10")]
public final class flash.display.ColorCorrectionSupport extends Object
{
  native public function ColorCorrectionSupport():*;
  static native public const UNSUPPORTED:String = "unsupported";
  static native public const DEFAULT_ON:String = "defaultOn";

  static native public const DEFAULT_OFF:String = "defaultOff";
}


[API("661")]
[native(cls="ScreenClass",instance="ScreenObject",methods="auto",construct="native")]
public final class flash.display.Screen extends flash.events.EventDispatcher
{
  native public function Screen():*;
  native public function get bounds():flash.geom.Rectangle;
  native public function get visibleBounds():flash.geom.Rectangle;
  native public function get colorDepth():int;

  static native public final function get screens():Array;
  static native public final function get mainScreen():Screen;
  static native public final function getScreensForRectangle(rect:flash.geom.Rectangle):Array;
}


public final class flash.text.TextFormatAlign extends Object
{
  native public function TextFormatAlign():*;
  static native public const LEFT:String = "left";

  static native public const CENTER:String = "center";
  static native public const RIGHT:String = "right";
  static native public const JUSTIFY:String = "justify";
  static native public const START:String = "start";
  static native public const END:String = "end";
}


[Version("10")]
public final class flash.text.engine.Kerning extends Object
{

  native public function Kerning():*;
  static native public const ON:String = "on";
  static native public const OFF:String = "off";
  static native public const AUTO:String = "auto";
}


[native(cls="DNSResolverClass",instance="DNSResolverObject",methods="auto")]
[Version("air2.0")]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="lookup",type="flash.events.DNSResolverEvent")]
public class flash.net.dns.DNSResolver extends flash.events.EventDispatcher
{
  native public function DNSResolver():*;

  native public function lookup(host:String,recordType:Class):void;
  native private function doLookup(host:String,normalizedHost:String,recordType:int):void;
  native private function getPtrHost(inHost:String):String;
  static native public final function get isSupported():Boolean;
}


[Version("10.1")]
public final class flash.net.NetStreamAppendBytesAction extends Object
{
  native public function NetStreamAppendBytesAction():*;

  static native public const RESET_BEGIN:String = "resetBegin";
  static native public const RESET_SEEK:String = "resetSeek";
  static native public const END_SEQUENCE:String = "endSequence";
}


[Version("10")]
public interface flash.display.IGraphicsStroke
{
}


[Version("10.1")]
public final class flash.net.NetGroupSendResult extends Object
{
  native public function NetGroupSendResult():*;
  static native public const ERROR:String = "error";

  static native public const NO_ROUTE:String = "no route";
  static native public const SENT:String = "sent";
}


public final class flash.display.LineScaleMode extends Object
{
  native public function LineScaleMode():*;
  static native public const NORMAL:String = "normal";
  static native public const VERTICAL:String = "vertical";

  static native public const HORIZONTAL:String = "horizontal";
  static native public const NONE:String = "none";
}


public class flash.events.AsyncErrorEvent extends flash.events.ErrorEvent
{
  native public function AsyncErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",error:Error = null):*;
  native public var error:Error;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  static native public const ASYNC_ERROR:String = "asyncError";
}


public final class flash.display.StageScaleMode extends Object
{
  native public function StageScaleMode():*;
  static native public const SHOW_ALL:String = "showAll";
  static native public const EXACT_FIT:String = "exactFit";

  static native public const NO_BORDER:String = "noBorder";
  static native public const NO_SCALE:String = "noScale";
}


[native(cls="GameInputClass",instance="GameInputObject",methods="auto")]
[API("688")]
[Event(name="deviceUnusable",type="flash.events.GameInputEvent")]
[Event(name="deviceRemoved",type="flash.events.GameInputEvent")]
[Event(name="deviceAdded",type="flash.events.GameInputEvent")]
public final class flash.ui.GameInput extends flash.events.EventDispatcher
{
  native public function GameInput():*;
  static native public final function getDeviceAt(index:int):flash.ui.GameInputDevice;
  static native public final function get numDevices():int;

  static native public final function get isSupported():Boolean;
}


public final class flash.filters.BitmapFilterQuality extends Object
{
  native public function BitmapFilterQuality():*;
  static native public const LOW:int = 1;
  static native public const MEDIUM:int = 2;
  static native public const HIGH:int = 3;
}


[Version("air2.0")]
public interface flash.desktop.IFilePromise
{

  native function get relativePath():String;
  native function get isAsync():Boolean;
  native function open():flash.utils.IDataInput;
  native function close():void;
  native function reportError(e:flash.events.ErrorEvent):void;
}


[API("669")]
[native(cls="MediaPromiseClass",instance="MediaPromiseObject",methods="auto",construct="native")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="close",type="flash.events.Event")]
public class flash.media.MediaPromise extends flash.events.EventDispatcher
  implements flash.desktop.IFilePromise
{

  native public function MediaPromise():*;
  native public function get isAsync():Boolean;
  native public function open():flash.utils.IDataInput;
  native public function close():void;
  native public function reportError(e:flash.events.ErrorEvent):void;

  native public function get file():flash.filesystem.File;
  native private function registerEventHandlers():void;
  native private function unregisterEventHandlers():void;
  native private function reflectURLStreamEvent(e:flash.events.Event):void;
  native private var _stream:flash.utils.IDataInput;

  native private function getURI():String;
  native public function get mediaType():String;
  native public function get relativePath():String;
  native private function getMediaStreamObject():flash.media.InputMediaStream;
}

[native("FlashProfilerScript::profile")]
[Inspectable(environment="none")]
native public function flash.profiler.profile(on:Boolean):void;

[native("FlashProfilerScript::showRedrawRegions")]
native public function flash.profiler.showRedrawRegions(on:Boolean,color:uint = 16711680):void;


[API("686")]
[ExcludeClass]
public final class flash.system.ApplicationInstallerMode extends Object
{
  native public function ApplicationInstallerMode():*;
  static native public const INSTALL_ONLY:String = "install_only";
  static native public const SHORTCUTS_ONLY:String = "shortcuts_only";
  static native public const INSTALL_WITH_SHORTCUTS:String = "install_with_shortcuts";
}


[native(cls="BitmapDataClass",gc="exact",instance="BitmapDataObject",methods="auto")]
public class flash.display.BitmapData extends Object
  implements flash.display.IBitmapDrawable
{

  native public function BitmapData(width:int,height:int,transparent:Boolean = true,fillColor:uint = NaN):*;
  native private function ctor(width:int,height:int,transparent:Boolean,fillColor:uint):void;
  native public function clone():BitmapData;
  native public function get width():int;
  native public function get height():int;

  native public function get transparent():Boolean;
  native public function get rect():flash.geom.Rectangle;
  native public function getPixel(x:int,y:int):uint;
  native public function getPixel32(x:int,y:int):uint;
  native public function setPixel(x:int,y:int,color:uint):void;

  native public function setPixel32(x:int,y:int,color:uint):void;
  native public function applyFilter(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,filter:flash.filters.BitmapFilter):void;
  native public function colorTransform(rect:flash.geom.Rectangle,colorTransform:flash.geom.ColorTransform):void;
  native public function compare(otherBitmapData:BitmapData):Object;
  native public function copyChannel(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,sourceChannel:uint,destChannel:uint):void;

  native public function copyPixels(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,alphaBitmapData:BitmapData = null,alphaPoint:flash.geom.Point = null,mergeAlpha:Boolean = false):void;
  native public function dispose():void;
  native public function draw(source:flash.display.IBitmapDrawable,matrix:flash.geom.Matrix = null,colorTransform:flash.geom.ColorTransform = null,blendMode:String = null,clipRect:flash.geom.Rectangle = null,smoothing:Boolean = false):void;
  [API("680")]
  native public function drawWithQuality(source:flash.display.IBitmapDrawable,matrix:flash.geom.Matrix = null,colorTransform:flash.geom.ColorTransform = null,blendMode:String = null,clipRect:flash.geom.Rectangle = null,smoothing:Boolean = false,quality:String = null):void;
  native public function fillRect(rect:flash.geom.Rectangle,color:uint):void;

  native public function floodFill(x:int,y:int,color:uint):void;
  native public function generateFilterRect(sourceRect:flash.geom.Rectangle,filter:flash.filters.BitmapFilter):flash.geom.Rectangle;
  native public function getColorBoundsRect(mask:uint,color:uint,findColor:Boolean = true):flash.geom.Rectangle;
  native public function getPixels(rect:flash.geom.Rectangle):flash.utils.ByteArray;
  [API("682")]
  native public function copyPixelsToByteArray(rect:flash.geom.Rectangle,data:flash.utils.ByteArray):void;

  [Version("10")]
  native public function getVector(rect:flash.geom.Rectangle):Vector.<uint>;
  native public function hitTest(firstPoint:flash.geom.Point,firstAlphaThreshold:uint,secondObject:Object,secondBitmapDataPoint:flash.geom.Point = null,secondAlphaThreshold:uint = 1):Boolean;
  native public function merge(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,redMultiplier:uint,greenMultiplier:uint,blueMultiplier:uint,alphaMultiplier:uint):void;
  native public function noise(randomSeed:int,low:uint = 0,high:uint = 255,channelOptions:uint = 7,grayScale:Boolean = false):void;
  native public function paletteMap(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,redArray:Array = null,greenArray:Array = null,blueArray:Array = null,alphaArray:Array = null):void;

  native public function perlinNoise(baseX:Number,baseY:Number,numOctaves:uint,randomSeed:int,stitch:Boolean,fractalNoise:Boolean,channelOptions:uint = 7,grayScale:Boolean = false,offsets:Array = null):void;
  native public function pixelDissolve(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,randomSeed:int = 0,numPixels:int = 0,fillColor:uint = 0):int;
  native public function scroll(x:int,y:int):void;
  native public function setPixels(rect:flash.geom.Rectangle,inputByteArray:flash.utils.ByteArray):void;
  [Version("10")]
  native public function setVector(rect:flash.geom.Rectangle,inputVector:Vector.<uint>):void;

  native public function threshold(sourceBitmapData:BitmapData,sourceRect:flash.geom.Rectangle,destPoint:flash.geom.Point,operation:String,threshold:uint,color:uint = 0,mask:uint = NaN,copySource:Boolean = false):uint;
  native public function lock():void;
  native public function unlock(changeRect:flash.geom.Rectangle = null):void;
  [Version("10")]
  native public function histogram(hRect:flash.geom.Rectangle = null):Vector.<Vector.<Number> >;
  [API("680")]
  native public function encode(rect:flash.geom.Rectangle,compressor:Object,byteArray:flash.utils.ByteArray = null):flash.utils.ByteArray;
}


[API("675")]
public final class flash.text.ReturnKeyLabel extends Object
{

  native public function ReturnKeyLabel():*;
  static native public const DEFAULT:String = "default";
  static native public const DONE:String = "done";
  static native public const GO:String = "go";
  static native public const NEXT:String = "next";

  static native public const SEARCH:String = "search";
}


public final class flash.security.SignatureStatus extends Object
{
  native public function SignatureStatus():*;
  static native public const VALID:String = "valid";
  static native public const INVALID:String = "invalid";
  static native public const UNKNOWN:String = "unknown";
}

public final class flash.security.SignerTrustSettings extends Object
{

  native public function SignerTrustSettings():*;
  static native public const SIGNING:String = "signing";
  static native public const CODE_SIGNING:String = "codeSigning";
  static native public const PLAYLIST_SIGNING:String = "playlistSigning";
}

public final class flash.security.RevocationCheckSettings extends Object
{
  native public function RevocationCheckSettings():*;

  static native public const NEVER:String = "never";
  static native public const BEST_EFFORT:String = "bestEffort";
  static native public const REQUIRED_IF_AVAILABLE:String = "requiredIfInfoAvailable";
  static native public const ALWAYS_REQUIRED:String = "alwaysRequired";
}


[API("661")]
[native(cls="InteractiveIconClass",instance="InteractiveIconObject",methods="auto",construct="native")]
public class flash.desktop.InteractiveIcon extends flash.desktop.Icon
{
  native public function InteractiveIcon():*;

  native public override function get bitmaps():Array;
  native public override function set bitmaps(value:Array):void;
  native public function get width():int;
  native public function get height():int;
}


[API("661")]
[native(cls="DockIconClass",instance="DockIconObject",methods="auto",construct="native")]
public class flash.desktop.DockIcon extends flash.desktop.InteractiveIcon
{
  native public function DockIcon():*;

  native public override function set bitmaps(value:Array):void;
  native public override function get bitmaps():Array;
  native public override function get width():int;
  native public override function get height():int;
  native public function get menu():flash.display.NativeMenu;

  native public function set menu(menu:flash.display.NativeMenu):void;
  native public function bounce(priority:String = "informational"):void;
}


[Version("10")]
public class flash.events.ShaderEvent extends flash.events.Event
{
  native public function ShaderEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,bitmap:flash.display.BitmapData = null,array:flash.utils.ByteArray = null,vector:Vector.<Number> = null):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native public function get bitmapData():flash.display.BitmapData;
  native public function set bitmapData(bmpData:flash.display.BitmapData):*;
  native public function get byteArray():flash.utils.ByteArray;
  native public function set byteArray(bArray:flash.utils.ByteArray):*;
  native public function get vector():Vector.<Number>;

  native public function set vector(v:Vector.<Number>):*;
  native private var m_bitmapData:flash.display.BitmapData;
  native private var m_byteArray:flash.utils.ByteArray;
  native private var m_vector:Vector.<Number>;
  static native public const COMPLETE:String = "complete";
}


[native(cls="TimerEventClass",gc="exact",instance="TimerEventObject",methods="auto")]
public class flash.events.TimerEvent extends flash.events.Event
{

  native public function TimerEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function updateAfterEvent():void;
  static native public const TIMER:String = "timer";

  static native public const TIMER_COMPLETE:String = "timerComplete";
}


[native(cls="XMLClass",gc="exact",instance="XMLObject",methods="auto",construct="override")]
public final dynamic class XML extends Object
{
  native public function XML(value:* = null):*;
  native AS3 function toString():String;
  native AS3 override function hasOwnProperty(P:* = null):Boolean;
  native AS3 override function propertyIsEnumerable(P:* = null):Boolean;

  native AS3 function addNamespace(ns:*):XML;
  native AS3 function appendChild(child:*):XML;
  native AS3 function attribute(arg:*):XMLList;
  native AS3 function attributes():XMLList;
  native AS3 function child(propertyName:*):XMLList;

  native AS3 function childIndex():int;
  native AS3 function children():XMLList;
  native AS3 function comments():XMLList;
  native AS3 function contains(value:*):Boolean;
  native AS3 function copy():XML;

  native AS3 function descendants(name:* = "*"):XMLList;
  native AS3 function elements(name:* = "*"):XMLList;
  native AS3 function hasComplexContent():Boolean;
  native AS3 function hasSimpleContent():Boolean;
  native AS3 function inScopeNamespaces():Array;

  native AS3 function insertChildAfter(child1:*,child2:*):*;
  native AS3 function insertChildBefore(child1:*,child2:*):*;
  native AS3 function length():int;
  native AS3 function localName():Object;
  native AS3 function name():Object;

  native private function _namespace(prefix:*,argc:int):*;
  native AS3 function namespace(prefix:* = null):*;
  native AS3 function namespaceDeclarations():Array;
  native AS3 function nodeKind():String;
  native AS3 function normalize():XML;

  native AS3 function parent():*;
  native AS3 function processingInstructions(name:* = "*"):XMLList;
  native AS3 function prependChild(value:*):XML;
  native AS3 function removeNamespace(ns:*):XML;
  native AS3 function replace(propertyName:*,value:*):XML;

  native AS3 function setChildren(value:*):XML;
  native AS3 function setLocalName(name:*):void;
  native AS3 function setName(name:*):void;
  native AS3 function setNamespace(ns:*):void;
  native AS3 function text():XMLList;

  native AS3 function toXMLString():String;
  native AS3 function notification():Function;
  native AS3 function setNotification(f:Function):*;
  native AS3 function toJSON(k:String):*;
  native AS3 function valueOf():XML;

  static native public const length:* = 1;
  static native public final function get ignoreComments():Boolean;
  static native public final function set ignoreComments(newIgnore:Boolean):*;
  static native public final function get ignoreProcessingInstructions():Boolean;
  static native public final function set ignoreProcessingInstructions(newIgnore:Boolean):*;

  static native public final function get ignoreWhitespace():Boolean;
  static native public final function set ignoreWhitespace(newIgnore:Boolean):*;
  static native public final function get prettyPrinting():Boolean;
  static native public final function set prettyPrinting(newPretty:Boolean):*;
  static native public final function get prettyIndent():int;

  static native public final function set prettyIndent(newIndent:int):*;
  static native AS3 final function settings():Object;
  static native AS3 final function setSettings(o:Object = null):void;
  static native AS3 final function defaultSettings():Object;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="XMLListClass",gc="exact",instance="XMLListObject",methods="auto",construct="override")]
public final dynamic class XMLList extends Object
{

  native public function XMLList(value:* = null):*;
  native AS3 function toString():String;
  native AS3 function valueOf():XMLList;
  native AS3 override function hasOwnProperty(P:* = null):Boolean;
  native AS3 override function propertyIsEnumerable(P:* = null):Boolean;

  native AS3 function attribute(arg:*):XMLList;
  native AS3 function attributes():XMLList;
  native AS3 function child(propertyName:*):XMLList;
  native AS3 function children():XMLList;
  native AS3 function comments():XMLList;

  native AS3 function contains(value:*):Boolean;
  native AS3 function copy():XMLList;
  native AS3 function descendants(name:* = "*"):XMLList;
  native AS3 function elements(name:* = "*"):XMLList;
  native AS3 function hasComplexContent():Boolean;

  native AS3 function hasSimpleContent():Boolean;
  native AS3 function length():int;
  native AS3 function name():Object;
  native AS3 function normalize():XMLList;
  native AS3 function parent():*;

  native AS3 function processingInstructions(name:* = "*"):XMLList;
  native AS3 function text():XMLList;
  native AS3 function toXMLString():String;
  native AS3 function addNamespace(ns:*):XML;
  native AS3 function appendChild(child:*):XML;

  native AS3 function childIndex():int;
  native AS3 function inScopeNamespaces():Array;
  native AS3 function insertChildAfter(child1:*,child2:*):*;
  native AS3 function insertChildBefore(child1:*,child2:*):*;
  native AS3 function nodeKind():String;

  native private function _namespace(prefix:*,argc:int):*;
  native AS3 function namespace(prefix:* = null):*;
  native AS3 function localName():Object;
  native AS3 function namespaceDeclarations():Array;
  native AS3 function prependChild(value:*):XML;

  native AS3 function removeNamespace(ns:*):XML;
  native AS3 function replace(propertyName:*,value:*):XML;
  native AS3 function setChildren(value:*):XML;
  native AS3 function setLocalName(name:*):void;
  native AS3 function setName(name:*):void;

  native AS3 function setNamespace(ns:*):void;
  native AS3 function toJSON(k:String):*;
  static native public const length:* = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="QNameClass",gc="exact",instance="QNameObject",methods="auto",construct="override")]
public final class QName extends Object
{
  native public function QName(namespace:* = null,name:* = null):*;

  native public function get localName():String;
  native public function get uri():*;
  native AS3 function valueOf():QName;
  native AS3 function toString():String;
  static native public const length:* = 2;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}


[Version("air2.0")]
public class flash.events.StorageVolumeChangeEvent extends flash.events.Event
{
  native public function StorageVolumeChangeEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,path:flash.filesystem.File = null,volume:flash.filesystem.StorageVolume = null):*;
  native internal var _rootDirectory:flash.filesystem.File = null;
  native internal var _volume:flash.filesystem.StorageVolume = null;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native public function get rootDirectory():flash.filesystem.File;
  native public function get storageVolume():flash.filesystem.StorageVolume;
  static native public const STORAGE_VOLUME_MOUNT:String = "storageVolumeMount";
  static native public const STORAGE_VOLUME_UNMOUNT:String = "storageVolumeUnmount";
}


[native(cls="MathClass",classgc="exact",instance="double",methods="auto",construct="override")]
public final class Math extends Object
{

  native public function Math():*;
  static native public const E:Number = NaN;
  static native public const LN10:Number = NaN;
  static native public const LN2:Number = NaN;
  static native public const LOG10E:Number = 0.4342944819032518;

  static native public const LOG2E:Number = 1.4426950408889634;
  static native public const PI:Number = 3.141592653589793;
  static native public const SQRT1_2:Number = 0.7071067811865476;
  static native public const SQRT2:Number = 1.4142135623730951;
  static native private final function _min(x:Number,y:Number):Number;

  static native private final function _max(x:Number,y:Number):Number;
  static native public final function abs(x:Number):Number;
  static native public final function acos(x:Number):Number;
  static native public final function asin(x:Number):Number;
  static native public final function atan(x:Number):Number;

  static native public final function ceil(x:Number):Number;
  static native public final function cos(x:Number):Number;
  static native public final function exp(x:Number):Number;
  static native public final function floor(x:Number):Number;
  static native public final function log(x:Number):Number;

  static native public final function round(x:Number):Number;
  static native public final function sin(x:Number):Number;
  static native public final function sqrt(x:Number):Number;
  static native public final function tan(x:Number):Number;
  static native public final function atan2(y:Number,x:Number):Number;

  static native public final function pow(x:Number,y:Number):Number;
  static native private const NegInfinity:Number = -Infinity;
  static native public final function max(x:Number = -Infinity,y:Number = -Infinity,... rest):Number;
  static native public final function min(x:Number = Infinity,y:Number = Infinity,... rest):Number;
  static native public final function random():Number;
}


[API("661")]
public class flash.events.DRMAuthenticateEvent extends flash.events.Event
{

  native public function DRMAuthenticateEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,header:String = "",userPrompt:String = "",passPrompt:String = "",urlPrompt:String = "",authenticationType:String = "",netstream:flash.net.NetStream = null):*;
  native private var m_header:String;
  native private var m_userPrompt:String;
  native private var m_passPrompt:String;
  native private var m_urlPrompt:String;

  native private var m_authenticationType:String;
  native private var m_netstream:flash.net.NetStream;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get header():String;

  native public function get usernamePrompt():String;
  native public function get passwordPrompt():String;
  native public function get urlPrompt():String;
  native public function get authenticationType():String;
  native public function get netstream():flash.net.NetStream;

  static native public const DRM_AUTHENTICATE:String = "drmAuthenticate";
  static native public const AUTHENTICATION_TYPE_DRM:String = "drm";
  static native public const AUTHENTICATION_TYPE_PROXY:String = "proxy";
}


[API("674")]
public final class flash.media.H264Level extends Object
{
  native public function H264Level():*;
  static native public const LEVEL_1:String = 1;

  static native public const LEVEL_1B:String = "1b";
  static native public const LEVEL_1_1:String = 1.1;
  static native public const LEVEL_1_2:String = 1.2;
  static native public const LEVEL_1_3:String = 1.3;
  static native public const LEVEL_2:String = 2;

  static native public const LEVEL_2_1:String = 2.1;
  static native public const LEVEL_2_2:String = 2.2;
  static native public const LEVEL_3:String = 3;
  static native public const LEVEL_3_1:String = 3.1;
  static native public const LEVEL_3_2:String = 3.2;

  static native public const LEVEL_4:String = 4;
  static native public const LEVEL_4_1:String = 4.1;
  static native public const LEVEL_4_2:String = 4.2;
  static native public const LEVEL_5:String = 5;
  static native public const LEVEL_5_1:String = 5.1;
}


public final class flash.text.FontType extends Object
{

  native public function FontType():*;
  static native public const EMBEDDED:String = "embedded";
  static native public const EMBEDDED_CFF:String = "embeddedCFF";
  static native public const DEVICE:String = "device";
}


[native(cls="MenuItemClass",gc="exact",instance="MenuItemObject",methods="auto")]
[API("667")]
[Event(name="preparing",type="flash.events.Event")]
[Event(name="displaying",type="flash.events.Event")]
[Event(name="select",type="flash.events.Event")]
public class flash.display.NativeMenuItem extends flash.events.EventDispatcher
{
  native public function NativeMenuItem(label:String = "",isSeparator:Boolean = false):*;

  native public function get enabled():Boolean;
  native public function set enabled(isSeparator:Boolean):void;
  native private function ctor(label:String,isSeparator:Boolean):void;
  native public function get menu():flash.display.NativeMenu;
  native public function get name():String;

  native public function set name(name:String):void;
  native public function get isSeparator():Boolean;
  native public function get checked():Boolean;
  native public function set checked(isChecked:Boolean):void;
  native public function get label():String;

  native public function set label(label:String):void;
  native public function get keyEquivalent():String;
  native public function set keyEquivalent(keyEquivalent:String):void;
  native public function get keyEquivalentModifiers():Array;
  native public function set keyEquivalentModifiers(modifiers:Array):void;

  native public function get mnemonicIndex():int;
  native public function set mnemonicIndex(index:int):void;
  native private function set _mnemonicIndex(index:int):void;
  native public function get submenu():flash.display.NativeMenu;
  native public function set submenu(submenu:flash.display.NativeMenu):void;

  native private function set _submenu(submenu:flash.display.NativeMenu):void;
  native public function get data():Object;
  native public function set data(data:Object):void;
  native public function clone():NativeMenuItem;
  [cppcall]
  native private function willPerformKeyEquivalent(event:flash.events.KeyboardEvent):Boolean;

  native private function _menuWillPerformKeyEquivalent(menu:flash.display.NativeMenu,event:flash.events.KeyboardEvent):Boolean;
  native private function _compareCharToKeyCode(c:uint,kcode:uint):Boolean;
  [cppcall]
  native private function performKeyEquivalent(event:flash.events.KeyboardEvent,usingCharcode:int):Boolean;
  native private function _menuPerformKeyEquivalent(menu:flash.display.NativeMenu,event:flash.events.KeyboardEvent,usingCharcode:int):Boolean;
  native private function select():void;

  native private function formatToString(className:String,... rest):String;
  native public override function toString():String;
  native private function get keyEquivalentChar():int;
  static native private const kInvalidCallError:uint = 2037;
}


[Version("air2.0")]
public final class flash.display.StageOrientation extends Object
{
  native public function StageOrientation():*;

  static native public const DEFAULT:String = "default";
  static native public const ROTATED_RIGHT:String = "rotatedRight";
  static native public const ROTATED_LEFT:String = "rotatedLeft";
  static native public const UPSIDE_DOWN:String = "upsideDown";
  static native public const UNKNOWN:String = "unknown";
}


[native(cls="FileFilterClass",instance="FileFilterObject",methods="auto")]
public final class flash.net.FileFilter extends Object
{

  native public function FileFilter(description:String,extension:String,macType:String = null):*;
  native public function get description():String;
  native public function set description(value:String):void;
  native public function get extension():String;
  native public function set extension(value:String):void;

  native public function get macType():String;
  native public function set macType(value:String):void;
}


[Version("10")]
public class flash.events.SampleDataEvent extends flash.events.Event
{
  native public function SampleDataEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,theposition:Number = 0,thedata:flash.utils.ByteArray = null):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native public function get position():Number;
  native public function set position(theposition:Number):*;
  native public function get data():flash.utils.ByteArray;
  native public function set data(thedata:flash.utils.ByteArray):*;
  native private var m_position:Number;

  native private var m_data:flash.utils.ByteArray;
  static native public const SAMPLE_DATA:String = "sampleData";
}


[API("661")]
public final class flash.desktop.NotificationType extends Object
{
  native public function NotificationType():*;
  static native public const INFORMATIONAL:String = "informational";
  static native public const CRITICAL:String = "critical";
}


[native(cls="FontClass",instance="FontObject",methods="auto")]
public class flash.text.Font extends Object
{

  native public function Font():*;
  native public function get fontName():String;
  native public function get fontStyle():String;
  native public function get fontType():String;
  native public function hasGlyphs(str:String):Boolean;

  static native public final function enumerateFonts(enumerateDeviceFonts:Boolean = false):Array;
  static native public final function registerFont(font:Class):void;
}


public final class flash.utils.Endian extends Object
{
  native public function Endian():*;
  static native public const BIG_ENDIAN:String = "bigEndian";
  static native public const LITTLE_ENDIAN:String = "littleEndian";
}


[native(cls="NativeProcessClass",instance="NativeProcessObject",methods="auto")]
[Version("air2.0")]
[Event(name="exit",type="flash.events.NativeProcessExitEvent")]
[Event(name="standardInputIoError",type="flash.events.IOErrorEvent")]
[Event(name="standardOutputIoError",type="flash.events.IOErrorEvent")]
[Event(name="standardErrorIoError",type="flash.events.IOErrorEvent")]
[Event(name="standardInputClose",type="flash.events.Event")]
[Event(name="standardInputProgress",type="flash.events.ProgressEvent")]
[Event(name="standardErrorClose",type="flash.events.Event")]
[Event(name="standardErrorData",type="flash.events.ProgressEvent")]
[Event(name="standardOutputClose",type="flash.events.Event")]
[Event(name="standardOutputData",type="flash.events.ProgressEvent")]
public class flash.desktop.NativeProcess extends flash.events.EventDispatcher
{

  native public function NativeProcess():*;
  native public function closeInput():void;
  native public function get running():Boolean;
  native public function get standardError():flash.utils.IDataInput;
  native public function get standardInput():flash.utils.IDataOutput;

  native public function get standardOutput():flash.utils.IDataInput;
  native public function start(info:flash.desktop.NativeProcessStartupInfo):void;
  native private function escapeArgumentIfNeeded(orignalArgument:String):String;
  native public function exit(force:Boolean = false):void;
  native private function internalStart(path:String,args:Vector.<String>,workingDir:String):void;

  static native public final function get isSupported():Boolean;
  [API("708")]
  static native internal final function isValidExecutable(f:flash.filesystem.File):Boolean;
}

[native(cls="InboundPipeClass",instance="InboundPipeObject",methods="auto")]
private class InboundPipe extends Object
  implements flash.utils.IDataInput
{
  native private function InboundPipe():*;
  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function readBoolean():Boolean;

  native public function readByte():int;
  native public function readUnsignedByte():uint;
  native public function readShort():int;
  native public function readUnsignedShort():uint;
  native public function readInt():int;

  native public function readUnsignedInt():uint;
  native public function readFloat():Number;
  native public function readDouble():Number;
  native public function readMultiByte(length:uint,charSet:String):String;
  native public function readUTF():String;

  native public function readUTFBytes(length:uint):String;
  native public function get bytesAvailable():uint;
  native public function readObject():*;
  native public function get objectEncoding():uint;
  native public function set objectEncoding(version:uint):void;

  native public function get endian():String;
  native public function set endian(type:String):void;
}

[native(cls="OutboundPipeClass",instance="OutboundPipeObject",methods="auto")]
private class OutboundPipe extends Object
  implements flash.utils.IDataOutput
{
  native private function OutboundPipe():*;
  native public function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function writeBoolean(value:Boolean):void;

  native public function writeByte(value:int):void;
  native public function writeShort(value:int):void;
  native public function writeInt(value:int):void;
  native public function writeUnsignedInt(value:uint):void;
  native public function writeFloat(value:Number):void;

  native public function writeDouble(value:Number):void;
  native public function writeMultiByte(value:String,charSet:String):void;
  native public function writeUTF(value:String):void;
  native public function writeUTFBytes(value:String):void;
  native public function writeObject(value:*):void;

  native public function get objectEncoding():uint;
  native public function set objectEncoding(version:uint):void;
  native public function get endian():String;
  native public function set endian(type:String):void;
}


[API("661")]
[native(cls="FileStreamClass",instance="FileStreamObject",methods="auto",construct="check")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="outputProgress",type="flash.events.OutputProgressEvent")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="close",type="flash.events.Event")]
public class flash.filesystem.FileStream extends flash.events.EventDispatcher
  implements flash.utils.IDataInput,flash.utils.IDataOutput
{
  native public function FileStream():*;

  native public function open(file:flash.filesystem.File,fileMode:String):void;
  native public function openAsync(file:flash.filesystem.File,fileMode:String):void;
  native public function truncate():void;
  native public function get position():Number;
  native public function set position(value:Number):void;

  native public function close():void;
  native public function get readAhead():Number;
  native public function set readAhead(value:Number):void;
  native public function get bytesAvailable():uint;
  native public function get endian():String;

  native public function set endian(value:String):void;
  native public function get objectEncoding():uint;
  native public function set objectEncoding(value:uint):void;
  native public function readBoolean():Boolean;
  native public function readByte():int;

  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function readDouble():Number;
  native public function readFloat():Number;
  native public function readInt():int;
  native public function readMultiByte(length:uint,charSet:String):String;

  native public function readObject():*;
  native public function readShort():int;
  native public function readUnsignedByte():uint;
  native public function readUnsignedInt():uint;
  native public function readUnsignedShort():uint;

  native public function readUTF():String;
  native public function readUTFBytes(length:uint):String;
  native public function writeBoolean(value:Boolean):void;
  native public function writeByte(value:int):void;
  native public function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;

  native public function writeDouble(value:Number):void;
  native public function writeFloat(value:Number):void;
  native public function writeInt(value:int):void;
  native public function writeMultiByte(value:String,charSet:String):void;
  native public function writeObject(object:*):void;

  native public function writeShort(value:int):void;
  native public function writeUnsignedInt(value:uint):void;
  native public function writeUTF(value:String):void;
  native public function writeUTFBytes(value:String):void;
}


[native(cls="BevelFilterClass",instance="BevelFilterObject",methods="auto")]
public final class flash.filters.BevelFilter extends flash.filters.BitmapFilter
{
  native public function BevelFilter(distance:Number = 4.0,angle:Number = 45,highlightColor:uint = 16777215,highlightAlpha:Number = 1.0,shadowColor:uint = 0,shadowAlpha:Number = 1.0,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1,quality:int = 1,type:String = "inner",knockout:Boolean = false):*;

  native public function get distance():Number;
  native public function set distance(value:Number):void;
  native public function get angle():Number;
  native public function set angle(value:Number):void;
  native public function get highlightColor():uint;

  native public function set highlightColor(value:uint):void;
  native public function get highlightAlpha():Number;
  native public function set highlightAlpha(value:Number):void;
  native public function get shadowColor():uint;
  native public function set shadowColor(value:uint):void;

  native public function get shadowAlpha():Number;
  native public function set shadowAlpha(value:Number):void;
  native public function get blurX():Number;
  native public function set blurX(value:Number):void;
  native public function get blurY():Number;

  native public function set blurY(value:Number):void;
  native public function get knockout():Boolean;
  native public function set knockout(value:Boolean):void;
  native public function get quality():int;
  native public function set quality(value:int):void;

  native public function get strength():Number;
  native public function set strength(value:Number):void;
  native public function get type():String;
  native public function set type(value:String):void;
  native public override function clone():flash.filters.BitmapFilter;
}


[native(cls="SharedObjectClass",instance="SharedObjectObject",methods="auto",construct="native")]
[Event(name="sync",type="flash.events.SyncEvent")]
[Event(name="netStatus",type="flash.events.NetStatusEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
public class flash.net.SharedObject extends flash.events.EventDispatcher
{

  native public function SharedObject():*;
  native public function get data():Object;
  native public function connect(myConnection:flash.net.NetConnection,params:String = null):void;
  native public function close():void;
  native public function flush(minDiskSpace:int = 0):String;

  native public function get size():uint;
  native public function set fps(updatesPerSecond:Number):void;
  native public function send(... rest):void;
  native public function clear():void;
  native public function get objectEncoding():uint;

  native public function set objectEncoding(version:uint):void;
  native public function get client():Object;
  native public function set client(object:Object):void;
  native public function setDirty(propertyName:String):void;
  native public function setProperty(propertyName:String,value:Object = null):void;

  native private function invoke(index:uint,... rest):*;
  native private function invokeWithArgsArray(index:uint,args:Array):*;
  [Inspectable(environment="none")]
  static native public final function deleteAll(url:String):int;
  [Inspectable(environment="none")]
  static native public final function getDiskUsage(url:String):int;
  static native public final function getLocal(name:String,localPath:String = null,secure:Boolean = false):SharedObject;

  static native public final function getRemote(name:String,remotePath:String = null,persistence:Object = false,secure:Boolean = false):SharedObject;
  static native public final function get defaultObjectEncoding():uint;
  static native public final function set defaultObjectEncoding(version:uint):void;
  static native private final function get preventBackupImpl():Boolean;
  static native private final function set preventBackupImpl(value:Boolean):void;

  [API("689")]
  static native public final function get preventBackup():Boolean;
  [API("689")]
  static native public final function set preventBackup(value:Boolean):void;
  static native private const kConnect:uint = 0;
  static native private const kSend:uint = 1;
  static native private const kFlush:uint = 2;

  static native private const kClose:uint = 3;
  static native private const kGetSize:uint = 4;
  static native private const kSetFps:uint = 5;
  static native private const kClear:uint = 6;
}


public class flash.media.SoundLoaderContext extends Object
{
  native public function SoundLoaderContext(bufferTime:Number = 1000,checkPolicyFile:Boolean = false):*;

  native public var bufferTime:Number = 1000;
  native public var checkPolicyFile:Boolean = false;
}


[API("667")]
public class flash.events.AccelerometerEvent extends flash.events.Event
{
  native public function AccelerometerEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,timestamp:Number = 0,accelerationX:Number = 0,accelerationY:Number = 0,accelerationZ:Number = 0):*;
  native private var m_accelerationX:Number;
  native private var m_accelerationY:Number;

  native private var m_accelerationZ:Number;
  native private var m_timestamp:Number;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get accelerationX():Number;

  native public function set accelerationX(value:Number):void;
  native public function get accelerationY():Number;
  native public function set accelerationY(value:Number):void;
  native public function get accelerationZ():Number;
  native public function set accelerationZ(value:Number):void;

  native public function get timestamp():Number;
  native public function set timestamp(value:Number):void;
  static native public const UPDATE:String = "update";
}


[API("683")]
[native(cls="RemoteNotifierSubscribeOptionsClass",instance="RemoteNotifierSubscribeOptionsObject",methods="auto")]
public final class flash.notifications.RemoteNotifierSubscribeOptions extends Object
{
  native public function RemoteNotifierSubscribeOptions():*;
  native public function get notificationStyles():Vector.<String>;

  native public function set notificationStyles(value:Vector.<String>):void;
}


[API("661")]
public class flash.data.SQLResult extends Object
{
  native public function SQLResult(data:Array = null,rowsAffected:Number = 0,complete:Boolean = true,rowID:Number = 0):*;
  native public function get complete():Boolean;
  native public function get data():Array;
  native public function get rowsAffected():Number;

  native public function get lastInsertRowID():Number;
  native private var _rowID:Number;
  native private var _rowsAffected:uint;
  native private var _data:Array;
  native private var _complete:Boolean;
}


[Version("air2.0")]
public class flash.net.InterfaceAddress extends Object
{

  native public function InterfaceAddress():*;
  native private var _address:String = "";
  native public function get address():String;
  native public function set address(value:String):void;
  native private var _broadcast:String = "";

  native public function get broadcast():String;
  native public function set broadcast(value:String):void;
  native private var _prefixLength:int = -1;
  native public function get prefixLength():int;
  native public function set prefixLength(value:int):void;

  native private var _ipVersion:String;
  native public function get ipVersion():String;
  native public function set ipVersion(value:String):void;
}


[native(cls="ShaderParameterClass",instance="ShaderParameterObject",methods="auto")]
[Version("10")]
public final dynamic class flash.display.ShaderParameter extends Object
{
  native public function ShaderParameter():*;
  native public function get value():Array;

  native public function set value(v:Array):void;
  native public function get type():String;
  native public function get index():int;
}


[Version("10")]
public final class flash.ui.ContextMenuClipboardItems extends Object
{
  native public function ContextMenuClipboardItems():*;
  native private var _cut:Boolean = false;

  native public function get cut():Boolean;
  native public function set cut(val:Boolean):void;
  native private var _copy:Boolean = false;
  native public function get copy():Boolean;
  native public function set copy(val:Boolean):void;

  native private var _paste:Boolean = false;
  native public function get paste():Boolean;
  native public function set paste(val:Boolean):void;
  native private var _clear:Boolean = false;
  native public function get clear():Boolean;

  native public function set clear(val:Boolean):void;
  native private var _selectAll:Boolean = true;
  native public function get selectAll():Boolean;
  native public function set selectAll(val:Boolean):void;
  [cppcall]
  [Inspectable(environment="none")]
  native public function clone():ContextMenuClipboardItems;
}


[native(cls="ServerSocketClass",instance="ServerSocketObject",methods="auto")]
[Version("air2.0")]
[Event(name="connect",type="flash.events.ServerSocketConnectEvent")]
[Event(name="close",type="flash.events.Event")]
public class flash.net.ServerSocket extends flash.events.EventDispatcher
{

  native public function ServerSocket():*;
  native public function bind(localPort:int = 0,localAddress:String = "0.0.0.0"):void;
  native private function internalBind(port:int,address:String):void;
  native public function close():void;
  native private function internalClose():void;

  native public function listen(backlog:int = 0):void;
  native private function internalListen(backlog:int):void;
  native public function get localAddress():String;
  native public function get localPort():int;
  native public function get listening():Boolean;

  native private function internalListening():Boolean;
  native public function get bound():Boolean;
  native private function internalBound():Boolean;
  static native public final function get isSupported():Boolean;
}


[Version("10")]
public final class flash.media.SoundCodec extends Object
{
  native public function SoundCodec():*;

  static native public const NELLYMOSER:String = "NellyMoser";
  static native public const SPEEX:String = "Speex";
  static native public const PCMA:String = "pcma";
  static native public const PCMU:String = "pcmu";
}


[native(friend="DRMVoucherObject")]
[API("661")]
public class flash.events.DRMCustomProperties extends Object
{
  native public function DRMCustomProperties():*;

  [cppcall]
  static native private final function createObj():Object;
  [cppcall]
  static native private final function setCustomProp(obj:Object,key:String,value:String):void;
  [cppcall]
  static native private final function setCustomProp15(obj:Object,key:String,value:String):void;
}

[API("667")]
public class flash.events.DRMStatusEvent extends flash.events.Event
{
  native public function DRMStatusEvent(type:String = "drmStatus",bubbles:Boolean = false,cancelable:Boolean = false,inMetadata:flash.net.drm.DRMContentData = null,inVoucher:flash.net.drm.DRMVoucher = null,inLocal:Boolean = false):*;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  [API("667")]
  native public function get contentData():flash.net.drm.DRMContentData;
  [API("667")]
  native public function set contentData(value:flash.net.drm.DRMContentData):void;
  [API("667")]
  native public function get voucher():flash.net.drm.DRMVoucher;
  [API("667")]
  native public function set voucher(value:flash.net.drm.DRMVoucher):void;

  [API("667")]
  native public function get isLocal():Boolean;
  [API("667")]
  native public function set isLocal(value:Boolean):void;
  native private var m_detail:String;
  native private var m_voucher:flash.net.drm.DRMVoucher;
  native private var m_metadata:flash.net.drm.DRMContentData;

  native private var m_isLocal:Boolean;
  native public function get isAvailableOffline():Boolean;
  native public function get isAnonymous():Boolean;
  native public function get voucherEndDate():Date;
  [API("661")]
  native public function get offlineLeasePeriod():uint;

  native public function get policies():Object;
  native public function get detail():String;
  static native public const DRM_STATUS:String = "drmStatus";
}


[API("661")]
[native(cls="WindowClass",instance="WindowObject",methods="auto",construct="check")]
[Event(name="deactivate",type="flash.events.Event")]
[Event(name="activate",type="flash.events.Event")]
[Event(name="close",type="flash.events.Event")]
[Event(name="closing",type="flash.events.Event")]
[Event(name="displayStateChange",type="flash.events.NativeWindowDisplayStateEvent")]
[Event(name="displayStateChanging",type="flash.events.NativeWindowDisplayStateEvent")]
[Event(name="resize",type="flash.events.NativeWindowBoundsEvent")]
[Event(name="resizing",type="flash.events.NativeWindowBoundsEvent")]
[Event(name="move",type="flash.events.NativeWindowBoundsEvent")]
[Event(name="moving",type="flash.events.NativeWindowBoundsEvent")]
public class flash.display.NativeWindow extends flash.events.EventDispatcher
{
  native public function NativeWindow(initOptions:flash.display.NativeWindowInitOptions):*;
  native private function _init(initOptions:flash.display.NativeWindowInitOptions,allowInitialContentWindowOnly:Boolean):void;

  native public function get stage():flash.display.Stage;
  native public function get title():String;
  native public function set title(value:String):void;
  native public function get bounds():flash.geom.Rectangle;
  native public function set bounds(rect:flash.geom.Rectangle):void;

  native public function get displayState():String;
  native public function minimize():void;
  native public function maximize():void;
  native public function restore():void;
  native public function close():void;

  native public function get closed():Boolean;
  native private function _isDisplayed():Boolean;
  native private function get _minimized():Boolean;
  native private function actualVisibility():Boolean;
  native public function get visible():Boolean;

  native public function set visible(value:Boolean):void;
  native private function _showHide(desiredVisibility:Boolean):void;
  native public function get systemChrome():String;
  native public function get transparent():Boolean;
  native public function get type():String;

  native public function get minimizable():Boolean;
  native public function get maximizable():Boolean;
  native public function get resizable():Boolean;
  native public function startMove():Boolean;
  native public function startResize(edgeOrCorner:String = "BR"):Boolean;

  native public function get minSize():flash.geom.Point;
  native public function set minSize(size:flash.geom.Point):void;
  native public function get maxSize():flash.geom.Point;
  native public function set maxSize(size:flash.geom.Point):void;
  native public function orderToFront():Boolean;

  native private function _orderToFront():Boolean;
  native public function orderToBack():Boolean;
  native private function _orderToBack():Boolean;
  native public function orderInFrontOf(window:NativeWindow):Boolean;
  native private function _orderInFrontOf(window:NativeWindow):Boolean;

  native public function orderInBackOf(window:NativeWindow):Boolean;
  native private function _orderInBackOf(window:NativeWindow):Boolean;
  native public function get alwaysInFront():Boolean;
  native public function set alwaysInFront(value:Boolean):void;
  native public function get active():Boolean;

  native public function activate():void;
  native public function globalToScreen(globalPoint:flash.geom.Point):flash.geom.Point;
  native public function get menu():flash.display.NativeMenu;
  native public function set menu(value:flash.display.NativeMenu):void;
  native private function set _menu(value:flash.display.NativeMenu):void;

  native public function get width():Number;
  native public function set width(value:Number):void;
  native public function get height():Number;
  native public function set height(value:Number):void;
  native public function get x():Number;

  native public function set x(value:Number):void;
  native public function notifyUser(type:String):void;
  native public function get y():Number;
  native public function set y(value:Number):void;
  [API("671")]
  native public function get owner():NativeWindow;

  native private function get _owner():NativeWindow;
  native private function set _owner(ownerWindow:NativeWindow):void;
  [API("671")]
  native public function listOwnedWindows():Vector.<flash.display.NativeWindow>;
  native private function get _ownedWindows():Vector.<flash.display.NativeWindow>;
  native private function listOwnedWindowsOnScreen():Vector.<flash.display.NativeWindow>;

  native private function addOwnedWindow(ownedWindow:NativeWindow):void;
  native private function removeOwnedWindow(ownedWindow:NativeWindow):void;
  native private function closedOwnerWindow(e:flash.events.Event):void;
  native private function displayStateChangeForOwnedWindow(e:flash.events.NativeWindowDisplayStateEvent):void;
  native private function displayStateChangeForOwnerWindow(e:flash.events.NativeWindowDisplayStateEvent):void;

  native private function _findCommonOwner(thisWindow:NativeWindow,thatWindow:NativeWindow):NativeWindow;
  native private function _getOwnedWindowsInFrontToBackZOrder(thisWindow:NativeWindow,zOrderInfo:flash.utils.Dictionary = null):Vector.<flash.display.NativeWindow>;
  native private function _getSubtreeInFrontToBackZOrder(window:NativeWindow,rootOwner:NativeWindow):Vector.<flash.display.NativeWindow>;
  native private function _findWindowWithHighestZ(window:NativeWindow,rootOwner:NativeWindow):NativeWindow;
  native private function _findWindowWithLowestZ(window:NativeWindow,rootOwner:NativeWindow):NativeWindow;

  native private function _traceWindowList(windows:Vector.<flash.display.NativeWindow>,message:String = null):void;
  native private function _traceZOrderWindowList(message:String):void;
  native private function _listDisplayedWindowsInFrontToBackZOrder():Vector.<flash.display.NativeWindow>;
  native private function _buildZOrderInfoDictionary():flash.utils.Dictionary;
  [cppcall]
  native private function _ensureZOrder():void;

  native private function _implOrderToFront():void;
  native private function _implOrderToBack():void;
  native private function _buildWindowTreeRecursive(thisWindow:NativeWindow,windowList:Vector.<flash.display.NativeWindow>,zOrderInfo:flash.utils.Dictionary):void;
  native private function _buildWindowTreeRecursiveOrderToFront(thisWindow:NativeWindow,windowList:Vector.<flash.display.NativeWindow>,zOrderInfo:flash.utils.Dictionary,ownerWindows:flash.utils.Dictionary):void;
  native private function _buildWindowTreeRecursiveOrderToBack(thisWindow:NativeWindow,windowList:Vector.<flash.display.NativeWindow>,zOrderInfo:flash.utils.Dictionary,ownerWindows:flash.utils.Dictionary):void;

  native private function _ownerChainIsDisplayed():Boolean;
  [API("675")]
  native public function get renderMode():String;
  native private function get _renderMode():String;
  native private function set _title(value:String):void;
  native private function get _title():String;

  native private function set _bounds(rect:flash.geom.Rectangle):void;
  native private function get _bounds():flash.geom.Rectangle;
  native private function set _x(value:Number):void;
  native private function set _y(value:Number):void;
  native private function set _width(value:Number):void;

  native private function set _height(value:Number):void;
  native private function set _minSize(size:flash.geom.Point):void;
  native private function get _minSize():flash.geom.Point;
  native private function set _maxSize(size:flash.geom.Point):void;
  native private function get _maxSize():flash.geom.Point;

  native private function get _displayState():String;
  native private function _minimize():void;
  native private function _maximize():void;
  native private function _restore():void;
  native private function get _active():Boolean;

  native private function _activate():void;
  native private function get _type():String;
  native private function get _systemChrome():String;
  native private function get _transparent():Boolean;
  native private function set _visible(value:Boolean):void;

  native private function get _visible():Boolean;
  native private function get _minimizable():Boolean;
  native private function get _maximizable():Boolean;
  native private function get _resizable():Boolean;
  native private function _startMove():Boolean;

  native private function _startResize(edgeOrCorner:String = "BR"):Boolean;
  native private var bRequestedVisibility:Boolean = false;
  [Version("air2.0")]
  static native public final function get isSupported():Boolean;
  static native private final function _checkSupported():Boolean;
  static native public final function get supportsMenu():Boolean;

  static native private final function initSupportsMenu():Boolean;
  static native private const _supportsMenu:Boolean;
  static native public final function get supportsNotification():Boolean;
  static native private final function initSupportsNotifyUser():Boolean;
  static native private const _supportsNotifyUser:Boolean;

  static native public final function get supportsTransparency():Boolean;
  static native private final function get _supportsTransparency():Boolean;
  static native public final function get systemMinSize():flash.geom.Point;
  static native private final function initSystemMinSize():flash.geom.Point;
  static native private const _systemMinSize:flash.geom.Point;

  static native public final function get systemMaxSize():flash.geom.Point;
  static native private var _skipEnsureZOrder:Boolean = false;
  static native private final function _checkAccess():void;
  static native private final function _isRootPlayer():Boolean;
  static native private final function _restoreIsAsync():Boolean;
}


[native(cls="ActionGeneratorClass",instance="ActionGeneratorObject",methods="auto")]
[ExcludeClass]
public class flash.automation.ActionGenerator extends Object
{

  native public function ActionGenerator():*;
  native public function generateActions(a:Array):void;
  native public function generateAction(action:flash.automation.AutomationAction):void;
}


[native(cls="TextFormatClass",gc="exact",instance="TextFormatObject",methods="auto")]
public class flash.text.TextFormat extends Object
{
  native public function TextFormat(font:String = null,size:Object = null,color:Object = null,bold:Object = null,italic:Object = null,underline:Object = null,url:String = null,target:String = null,align:String = null,leftMargin:Object = null,rightMargin:Object = null,indent:Object = null,leading:Object = null):*;
  native public function get align():String;

  native public function set align(value:String):void;
  native public function get blockIndent():Object;
  native public function set blockIndent(value:Object):void;
  native public function get bold():Object;
  native public function set bold(value:Object):void;

  native public function get bullet():Object;
  native public function set bullet(value:Object):void;
  native public function get color():Object;
  native public function set color(value:Object):void;
  [Inspectable(environment="none")]
  native public function get display():String;

  native public function set display(value:String):void;
  native public function get font():String;
  native public function set font(value:String):void;
  native public function get indent():Object;
  native public function set indent(value:Object):void;

  native public function get italic():Object;
  native public function set italic(value:Object):void;
  native public function get kerning():Object;
  native public function set kerning(value:Object):void;
  native public function get leading():Object;

  native public function set leading(value:Object):void;
  native public function get leftMargin():Object;
  native public function set leftMargin(value:Object):void;
  native public function get letterSpacing():Object;
  native public function set letterSpacing(value:Object):void;

  native public function get rightMargin():Object;
  native public function set rightMargin(value:Object):void;
  native public function get size():Object;
  native public function set size(value:Object):void;
  native public function get tabStops():Array;

  native public function set tabStops(value:Array):void;
  native public function get target():String;
  native public function set target(value:String):void;
  native public function get underline():Object;
  native public function set underline(value:Object):void;

  native public function get url():String;
  native public function set url(value:String):void;
}


public class flash.events.NetStatusEvent extends flash.events.Event
{
  native public function NetStatusEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,info:Object = null):*;
  native private var m_info:Object;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native public function get info():Object;
  native public function set info(value:Object):void;
  static native public const NET_STATUS:String = "netStatus";
}


[Version("10")]
public final class flash.display.GraphicsBitmapFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsBitmapFill(bitmapData:flash.display.BitmapData = null,matrix:flash.geom.Matrix = null,repeat:Boolean = true,smooth:Boolean = false):*;

  native public var bitmapData:flash.display.BitmapData;
  native public var matrix:flash.geom.Matrix;
  native public var repeat:Boolean;
  native public var smooth:Boolean;
}


[API("682")]
public final class flash.system.MessageChannelState extends Object
{
  native public function MessageChannelState():*;

  static native public const OPEN:String = "open";
  static native public const CLOSING:String = "closing";
  static native public const CLOSED:String = "closed";
}

[native(cls="MessageChannelClass",instance="MessageChannelObject",gc="exact",methods="auto",construct="native")]
[API("682")]
[Event(name="channelState",type="flash.events.Event")]
[Event(name="channelMessage",type="flash.events.Event")]
public final class flash.system.MessageChannel extends flash.events.EventDispatcher
{
  native public function MessageChannel():*;
  native public function send(arg:*,queueLimit:int = -1):void;

  native public function get messageAvailable():Boolean;
  native public function receive(blockUntilReceived:Boolean = false):*;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  native public override function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native public function close():void;

  native public function get state():String;
  native public override function toString():String;
  native private function internalRemoveEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native private function internalAddEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
}


[API("661")]
public class flash.data.SQLSchema extends Object
{
  native public function SQLSchema(database:String,name:String,sql:String):*;

  native public function get database():String;
  native public function get name():String;
  native public function get sql():String;
  native private var _db:String;
  native private var _name:String;

  native private var _sql:String;
}


[API("661")]
public class flash.data.SQLIndexSchema extends flash.data.SQLSchema
{
  native public function SQLIndexSchema(database:String,name:String,sql:String,table:String):*;
  native public function get table():String;
  native private var _table:String;
}


[native(cls="RegExpClass",gc="exact",instance="RegExpObject",methods="auto",construct="override")]
public dynamic class RegExp extends Object
{
  native public function RegExp(pattern:* = null,options:* = null):*;

  native public function get source():String;
  native public function get global():Boolean;
  native public function get ignoreCase():Boolean;
  native public function get multiline():Boolean;
  native public function get lastIndex():int;

  native public function set lastIndex(i:int):*;
  native public function get dotall():Boolean;
  native public function get extended():Boolean;
  native AS3 function exec(s:String = ""):*;
  native AS3 function test(s:String = ""):Boolean;

  static native public const length:int = 1;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}


[Version("air2.0")]
public class flash.net.dns.SRVRecord extends flash.net.dns.ResourceRecord
{
  native public function SRVRecord():*;
  native private var _priority:int = 0;
  native public function get priority():int;

  native public function set priority(value:int):void;
  native private var _weight:int = 0;
  native public function get weight():int;
  native public function set weight(value:int):void;
  native private var _port:int = 0;

  native public function get port():int;
  native public function set port(value:int):void;
  native private var _target:String = "";
  native public function get target():String;
  native public function set target(value:String):void;
}


[API("661")]
[native(cls="HTMLHostClass",instance="HTMLHostObject",methods="auto",construct="check")]
public class flash.html.HTMLHost extends Object
{

  native public function HTMLHost(defaultBehaviors:Boolean = true):*;
  native internal function setHTMLControl(htmlLoader:flash.html.HTMLLoader):void;
  native public function get htmlLoader():flash.html.HTMLLoader;
  native private function get window():flash.display.NativeWindow;
  native public function get windowRect():flash.geom.Rectangle;

  native public function set windowRect(value:flash.geom.Rectangle):void;
  native public function windowFocus():void;
  native public function windowBlur():void;
  native public function updateLocation(locationURL:String):void;
  native public function updateStatus(status:String):void;

  native public function updateTitle(title:String):void;
  native public function createWindow(windowCreateOptions:flash.html.HTMLWindowCreateOptions):flash.html.HTMLLoader;
  native public function windowClose():void;
  native private var _htmlLoader:flash.html.HTMLLoader;
  native private var _defaultBehaviors:Boolean;

  native private var _titlePrefix:String;
  static native private final function samePageGroup(parentLoader:flash.html.HTMLLoader,newLoader:flash.html.HTMLLoader):void;
  static native private const kInvalidParamError:uint = 2004;
}


[native(cls="LoaderInfoClass",gc="exact",instance="LoaderInfoObject",methods="auto",construct="native")]
[Exclude(name="dispatchEvent",kind="method")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="unload",type="flash.events.Event")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="init",type="flash.events.Event")]
[Event(name="complete",type="flash.events.Event")]
public class flash.display.LoaderInfo extends flash.events.EventDispatcher
{
  native public function LoaderInfo():*;
  native public function get loaderURL():String;

  native public function get url():String;
  native public function get isURLInaccessible():Boolean;
  native public function get bytesLoaded():uint;
  native public function get bytesTotal():uint;
  native public function get applicationDomain():flash.system.ApplicationDomain;

  native public function get swfVersion():uint;
  native public function get actionScriptVersion():uint;
  native public function get frameRate():Number;
  native public function get parameters():Object;
  native public function get width():int;

  native public function get height():int;
  native public function get contentType():String;
  native public function get sharedEvents():flash.events.EventDispatcher;
  native public function get parentSandboxBridge():Object;
  native public function set parentSandboxBridge(door:Object):void;

  native public function get childSandboxBridge():Object;
  native public function set childSandboxBridge(door:Object):void;
  [Inspectable(environment="none")]
  native public override function dispatchEvent(event:flash.events.Event):Boolean;
  native public function get sameDomain():Boolean;
  native public function get childAllowsParent():Boolean;

  native public function get parentAllowsChild():Boolean;
  native public function get loader():flash.display.Loader;
  native public function get content():flash.display.DisplayObject;
  native public function get bytes():flash.utils.ByteArray;
  native private function _getArgs():Object;

  [Version("10.1")]
  native public function get uncaughtErrorEvents():flash.events.UncaughtErrorEvents;
  native private function _getUncaughtErrorEvents():flash.events.UncaughtErrorEvents;
  native private function _setUncaughtErrorEvents(value:flash.events.UncaughtErrorEvents):void;
  static native public final function getLoaderInfoByDefinition(object:Object):LoaderInfo;
}


public final class flash.text.TextDisplayMode extends Object
{
  native public function TextDisplayMode():*;

  static native public const LCD:String = "lcd";
  static native public const CRT:String = "crt";
  static native public const DEFAULT:String = "default";
}


public final class flash.net.URLRequestMethod extends Object
{
  native public function URLRequestMethod():*;
  static native public const POST:String = "POST";

  static native public const GET:String = "GET";
  static native public const PUT:String = "PUT";
  static native public const DELETE:String = "DELETE";
  static native public const HEAD:String = "HEAD";
  static native public const OPTIONS:String = "OPTIONS";
}


[native(cls="ShaderClass",instance="ShaderObject",methods="auto")]
[Version("10")]
public class flash.display.Shader extends Object
{

  native public function Shader(code:flash.utils.ByteArray = null):*;
  native public function set byteCode(code:flash.utils.ByteArray):void;
  native public function get data():flash.display.ShaderData;
  native public function set data(p:flash.display.ShaderData):void;
  native public function get precisionHint():String;

  native public function set precisionHint(p:String):void;
}


[API("672")]
public class flash.events.NetDataEvent extends flash.events.Event
{
  native public function NetDataEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,timestamp:Number = 0,info:Object = null):*;
  native private var m_info:Object;
  native private var m_timestamp:Number;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native public function get timestamp():Number;
  native public function get info():Object;
  static native public const MEDIA_TYPE_DATA:String = "mediaTypeData";
}


[API("671")]
[native(cls="InputMediaStreamClass",instance="InputMediaStreamObject",methods="auto")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="close",type="flash.events.Event")]
public class flash.media.InputMediaStream extends flash.events.EventDispatcher
  implements flash.utils.IDataInput
{
  native public function InputMediaStream():*;

  native public function get bytesAvailable():uint;
  native public function get endian():String;
  native public function set endian(value:String):void;
  native public function get objectEncoding():uint;
  native public function set objectEncoding(version:uint):void;

  native public function readBoolean():Boolean;
  native public function readByte():int;
  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function readDouble():Number;
  native public function readFloat():Number;

  native public function readInt():int;
  native public function readMultiByte(length:uint,charSet:String):String;
  native public function readObject():*;
  native public function readShort():int;
  native public function readUnsignedByte():uint;

  native public function readUnsignedInt():uint;
  native public function readUnsignedShort():uint;
  native public function readUTF():String;
  native public function readUTFBytes(length:uint):String;
  native public function open():*;

  native public function close():*;
}


[API("674")]
public final class flash.system.ImageDecodingPolicy extends Object
{
  native public function ImageDecodingPolicy():*;
  static native public const ON_DEMAND:String = "onDemand";
  static native public const ON_LOAD:String = "onLoad";
}


[Version("10")]
public final class flash.display.GraphicsGradientFill extends Object
  implements flash.display.IGraphicsFill,flash.display.IGraphicsData
{
  native public function GraphicsGradientFill(type:String = "linear",colors:Array = null,alphas:Array = null,ratios:Array = null,matrix:* = null,spreadMethod:* = "pad",interpolationMethod:String = "rgb",focalPointRatio:Number = 0.0):*;

  native public function get type():String;
  native public function set type(value:String):*;
  native private var _type:String;
  native public var colors:Array;
  native public var alphas:Array;

  native public var ratios:Array;
  native public var matrix:flash.geom.Matrix;
  native public function get spreadMethod():String;
  native public function set spreadMethod(value:String):*;
  native private var _spreadMethod:String;

  native public function get interpolationMethod():String;
  native public function set interpolationMethod(value:String):*;
  native private var _interpolationMethod:String;
  native public var focalPointRatio:Number;
}


[native(cls="TextLineMirrorRegionClass",instance="TextLineMirrorRegionObject",methods="auto",construct="none")]
[Version("10")]
public final class flash.text.engine.TextLineMirrorRegion extends Object
{
  native public function TextLineMirrorRegion():*;

  native public function get textLine():flash.text.engine.TextLine;
  native public function get nextRegion():TextLineMirrorRegion;
  native public function get previousRegion():TextLineMirrorRegion;
  native public function get mirror():flash.events.EventDispatcher;
  native public function get element():flash.text.engine.ContentElement;

  native public function get bounds():flash.geom.Rectangle;
}


[native(cls="IndexBuffer3DClass",instance="IndexBuffer3DObject",methods="auto",construct="native")]
[API("674")]
public final class flash.display3D.IndexBuffer3D extends Object
{
  native public function IndexBuffer3D():*;
  native public function uploadFromVector(data:Vector.<uint>,startOffset:int,count:int):void;
  native public function uploadFromByteArray(data:flash.utils.ByteArray,byteArrayOffset:int,startOffset:int,count:int):void;
  native public function dispose():void;
}


[native(friend="avmplus::EventDispatcherObject")]
public class flash.events.IMEEvent extends flash.events.TextEvent
{

  native public function IMEEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",imeClient:flash.text.ime.IIMEClient = null):*;
  native private var m_imeClient:flash.text.ime.IIMEClient;
  native public override function clone():flash.events.Event;
  [API("667")]
  native public function get imeClient():flash.text.ime.IIMEClient;
  [API("667")]
  native public function set imeClient(value:flash.text.ime.IIMEClient):void;

  native public override function toString():String;
  static native public const IME_COMPOSITION:String = "imeComposition";
  [API("667")]
  static native public const IME_START_COMPOSITION:String = "imeStartComposition";
}


[native(cls="ApplicationClass",instance="ApplicationObject",methods="auto",construct="native")]
[Event(name="suspend",type="flash.events.Event")]
[Event(name="keyUp",type="flash.events.KeyboardEvent")]
[Event(name="keyDown",type="flash.events.KeyboardEvent")]
[Event(name="userPresent",type="flash.events.Event")]
[Event(name="userIdle",type="flash.events.Event")]
[Event(name="networkChange",type="flash.events.Event")]
[Event(name="exiting",type="flash.events.Event")]
[Event(name="deactivate",type="flash.events.Event")]
[Event(name="activate",type="flash.events.Event")]
[Event(name="browserInvoke",type="flash.events.BrowserInvokeEvent")]
[Event(name="invoke",type="flash.events.InvokeEvent")]
public final class flash.desktop.NativeApplication extends flash.events.EventDispatcher
{
  native public function NativeApplication():*;
  native private function _onKeyDownCapture(ev:flash.events.KeyboardEvent):void;

  native private function _menuPerformKeyEquivalent(menu:flash.display.NativeMenu,ev:flash.events.KeyboardEvent):Boolean;
  native private function _onKeyDownBubble(ev:flash.events.KeyboardEvent):void;
  [API("661")]
  native public function exit(errorCode:int = 0):void;
  [API("661")]
  native public function get runtimeVersion():String;
  [API("661")]
  native public function get runtimePatchLevel():uint;

  [API("661")]
  native public function get applicationID():String;
  [API("661")]
  native public function get publisherID():String;
  [API("661")]
  native public function get applicationDescriptor():XML;
  [API("661")]
  native public function get menu():flash.display.NativeMenu;
  [API("661")]
  native public function set menu(menu:flash.display.NativeMenu):void;

  [API("661")]
  native public function get autoExit():Boolean;
  [API("661")]
  native public function set autoExit(value:Boolean):void;
  [API("661")]
  native public function get icon():flash.desktop.InteractiveIcon;
  [Version("air2.0")]
  native public function get systemIdleMode():String;
  [Version("air2.0")]
  native public function set systemIdleMode(value:String):void;

  [API("661")]
  native public function get startAtLogin():Boolean;
  [API("661")]
  native public function set startAtLogin(startAtLogin:Boolean):void;
  [cppcall]
  [API("661")]
  native public function activate(window:flash.display.NativeWindow = null):void;
  native private function _activate(window:flash.display.NativeWindow):void;
  [API("661")]
  native public function get activeWindow():flash.display.NativeWindow;

  [API("661")]
  native public function get openedWindows():Array;
  [API("661")]
  native public function get timeSinceLastUserInput():int;
  [API("661")]
  native public function get idleThreshold():int;
  [API("661")]
  native public function set idleThreshold(value:int):void;
  native private function performKeyEquivalent(ev:flash.events.KeyboardEvent):Boolean;

  native public function copy():Boolean;
  native public function cut():Boolean;
  native public function paste():Boolean;
  native public function clear():Boolean;
  native public function selectAll():Boolean;

  native private function verifyKnownExtension(extension:String):void;
  native private function getKnownExtensionName(extension:String):String;
  native private function getKnownExtensionContentType(extension:String):String;
  native private function getKnownExtensionIcons(extension:String):Array;
  [API("661")]
  native public function getDefaultApplication(extension:String):String;

  native private function _getDefaultApplication(extension:String):String;
  [API("661")]
  native public function isSetAsDefaultApplication(extension:String):Boolean;
  native private function _isSetAsDefaultApplication(appName:String,extension:String,name:String):Boolean;
  [API("661")]
  native public function setAsDefaultApplication(extension:String):void;
  native private function _setAsDefaultApplication(extension:String,name:String,contentType:String,icons:Array):void;

  [API("661")]
  native public function removeAsDefaultApplication(extension:String):void;
  native private function _removeAsDefaultApplication(extension:String,name:String,contentType:String,icons:Array):void;
  [API("681")]
  native public function get executeInBackground():Boolean;
  [API("681")]
  native public function set executeInBackground(value:Boolean):void;
  native private var queuedEvents:Array;

  native private var timers:Object;
  [API("661")]
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0,useWeakReference:Boolean = false):void;
  [API("661")]
  native public override function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  [API("661")]
  native public override function dispatchEvent(event:flash.events.Event):Boolean;
  native private function registerClosures(networkChangeClosure:Function):void;

  native private function onNetworkChange():void;
  native private function _timeSinceLastMouseOrKeyboardEvent():int;
  native private function onCheckForPresenceChange(event:flash.events.TimerEvent):void;
  native private function _isRootPlayer():Boolean;
  native private var networkChangeTimer:flash.utils.Timer = null;

  native private var presenceChangeTimer:flash.utils.Timer = null;
  native private var nPresenceListeners:int = 0;
  native private var nPresenceIdleThreshold:int = 300;
  native private var bPresenceUserIsIdle:Boolean = false;
  native private var inDispatchInvokeEvent:Boolean = false;

  static native private const kInvalidParamError:uint = 2004;
  static native private final function _createSingleton():void;
  static native private var _instance:NativeApplication;
  static native public final function get nativeApplication():NativeApplication;
  [API("661")]
  static native public final function get supportsMenu():Boolean;

  static native private final function initSupportsMenu():Boolean;
  static native private const _supportsMenu:Boolean;
  [API("661")]
  static native public final function get supportsDockIcon():Boolean;
  static native private final function initSupportsDockIcon():Boolean;
  static native private const _supportsDockIcon:Boolean;

  [API("661")]
  static native public final function get supportsSystemTrayIcon():Boolean;
  static native private final function initSupportsSystemTrayIcon():Boolean;
  static native private const _supportsSystemTrayIcon:Boolean;
  [API("668")]
  static native public final function get supportsDefaultApplication():Boolean;
  [API("668")]
  static native public final function get supportsStartAtLogin():Boolean;

  static native private final function initThisApplicationPath():String;
  static native private const _thisApplicationPath:String;
  static native private final function _hasBundleIdentifier():Boolean;
}


[native(cls="TextLineClass",instance="TextLineObject",methods="auto",construct="none")]
[Version("10")]
public final class flash.text.engine.TextLine extends flash.display.DisplayObjectContainer
{
  native public function TextLine():*;
  native public override function set focusRect(focusRect:Object):void;

  native public override function set tabChildren(enable:Boolean):void;
  native public override function set tabEnabled(enabled:Boolean):void;
  native public override function set tabIndex(index:int):void;
  native public var userData:*;
  native public function get textBlock():flash.text.engine.TextBlock;

  native public function get hasGraphicElement():Boolean;
  [Version("10.1")]
  native public function get hasTabs():Boolean;
  native public function get nextLine():TextLine;
  native public function get previousLine():TextLine;
  native public function get ascent():Number;

  native public function get descent():Number;
  native public function get textHeight():Number;
  native public function get textWidth():Number;
  [API("670")]
  native public function get totalAscent():Number;
  [API("670")]
  native public function get totalDescent():Number;

  [API("670")]
  native public function get totalHeight():Number;
  native public function get textBlockBeginIndex():int;
  native public function get rawTextLength():int;
  native public function get specifiedWidth():Number;
  native public function get unjustifiedTextWidth():Number;

  native public function get validity():String;
  native public function set validity(value:String):void;
  native public function get atomCount():int;
  native public function get mirrorRegions():Vector.<flash.text.engine.TextLineMirrorRegion>;
  native public function getMirrorRegion(mirror:flash.events.EventDispatcher):flash.text.engine.TextLineMirrorRegion;

  [Deprecated("Now does nothing",since="Flash Player 10.1")]
  native public function flushAtomData():void;
  native public function getAtomIndexAtPoint(stageX:Number,stageY:Number):int;
  native public function getAtomIndexAtCharIndex(charIndex:int):int;
  native public function getAtomBounds(atomIndex:int):flash.geom.Rectangle;
  native public function getAtomBidiLevel(atomIndex:int):int;

  native public function getAtomTextRotation(atomIndex:int):String;
  native public function getAtomTextBlockBeginIndex(atomIndex:int):int;
  native public function getAtomTextBlockEndIndex(atomIndex:int):int;
  native public function getAtomCenter(atomIndex:int):Number;
  native public function getAtomWordBoundaryOnLeft(atomIndex:int):Boolean;

  native public function getAtomGraphic(atomIndex:int):flash.display.DisplayObject;
  native public function getBaselinePosition(baseline:String):Number;
  native public function dump():String;
  [Exclude(name="tabIndex",kind="property")]
  [Exclude(name="tabEnabled",kind="property")]
  [Exclude(name="tabChildren",kind="property")]
  [Exclude(name="focusRect",kind="property")]
  [Exclude(name="contextMenu",kind="property")]
  native public override function set contextMenu(value:flash.display.NativeMenu):void;
  static native public const MAX_LINE_WIDTH:int = 1000000;
}


[API("661")]
public class flash.data.SQLTableSchema extends flash.data.SQLSchema
{

  native public function SQLTableSchema(database:String,name:String,sql:String,columns:Array):*;
  native public function get columns():Array;
  native private var _columns:Array;
}


[native(cls="VertexBuffer3DClass",instance="VertexBuffer3DObject",methods="auto",construct="native")]
[API("674")]
public class flash.display3D.VertexBuffer3D extends Object
{
  native public function VertexBuffer3D():*;
  native public function uploadFromVector(data:Vector.<Number>,startVertex:int,numVertices:int):void;

  native public function uploadFromByteArray(data:flash.utils.ByteArray,byteArrayOffset:int,startVertex:int,numVertices:int):void;
  native public function dispose():void;
}


public final class flash.utils.CompressionAlgorithm extends Object
{
  native public function CompressionAlgorithm():*;
  static native public const ZLIB:String = "zlib";
  static native public const DEFLATE:String = "deflate";

  static native public const LZMA:String = "lzma";
}

public interface flash.utils.IDataInput2
  extends flash.utils.IDataInput
{
}

public interface flash.utils.IDataOutput2
  extends flash.utils.IDataOutput
{
}

[native(cls="ByteArrayClass",gc="exact",instance="ByteArrayObject",methods="auto")]
public class flash.utils.ByteArray extends Object
  implements flash.utils.IDataInput2,flash.utils.IDataOutput2
{
  native public function ByteArray():*;
  native public function readBytes(bytes:ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function writeBytes(bytes:ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function writeBoolean(value:Boolean):void;

  native public function writeByte(value:int):void;
  native public function writeShort(value:int):void;
  native public function writeInt(value:int):void;
  native public function writeUnsignedInt(value:uint):void;
  native public function writeFloat(value:Number):void;

  native public function writeDouble(value:Number):void;
  native public function writeMultiByte(value:String,charSet:String):void;
  native public function writeUTF(value:String):void;
  native public function writeUTFBytes(value:String):void;
  native public function readBoolean():Boolean;

  native public function readByte():int;
  native public function readUnsignedByte():uint;
  native public function readShort():int;
  native public function readUnsignedShort():uint;
  native public function readInt():int;

  native public function readUnsignedInt():uint;
  native public function readFloat():Number;
  native public function readDouble():Number;
  native public function readMultiByte(length:uint,charSet:String):String;
  native public function readUTF():String;

  native public function readUTFBytes(length:uint):String;
  native public function get length():uint;
  native public function set length(value:uint):void;
  native public function writeObject(object:*):void;
  native public function readObject():*;

  [API("662")]
  native public function deflate():void;
  native private function _compress(algorithm:String):void;
  native public function compress(algorithm:String = "zlib"):void;
  [API("662")]
  native public function inflate():void;
  native private function _uncompress(algorithm:String):void;

  native public function uncompress(algorithm:String = "zlib"):void;
  native public function toString():String;
  native private function _toString():String;
  native public function get bytesAvailable():uint;
  native public function get position():uint;

  native public function set position(offset:uint):void;
  native public function get objectEncoding():uint;
  native public function set objectEncoding(version:uint):void;
  native public function get endian():String;
  native public function set endian(type:String):void;

  [API("662")]
  native public function clear():void;
  [API("682")]
  native public function atomicCompareAndSwapIntAt(byteIndex:int,expectedValue:int,newValue:int):int;
  [API("682")]
  native public function atomicCompareAndSwapLength(expectedLength:int,newLength:int):int;
  [API("682")]
  native public function get shareable():Boolean;
  [API("682")]
  native public function set shareable(newValue:Boolean):void;

  static native public final function get defaultObjectEncoding():uint;
  static native public final function set defaultObjectEncoding(version:uint):void;
  static native private var _defaultObjectEncoding:uint;
}


[native(cls="FrameLabelClass",gc="exact",instance="FrameLabelObject",methods="auto")]
[Event(name="frameLabel",type="flash.events.Event")]
public final class flash.display.FrameLabel extends flash.events.EventDispatcher
{
  native public function FrameLabel(name:String,frame:int):*;
  native private function ctor(name:String,frame:int):void;

  native public function get name():String;
  native public function get frame():int;
}


[native(cls="ProductManagerClass",instance="ProductManagerObject",methods="auto")]
[ExcludeClass]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="verifyError",type="flash.events.IOErrorEvent")]
[Event(name="diskError",type="flash.events.IOErrorEvent")]
[Event(name="networkError",type="flash.events.IOErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public final class adobe.utils.ProductManager extends flash.events.EventDispatcher
{
  native public function ProductManager(name:String = null,shared:Boolean = false):*;
  native private function ctor(name:String,shared:Boolean):void;
  native public function get running():Boolean;

  native public function get installed():Boolean;
  native public function launch(parameters:String = null):Boolean;
  native public function get installedVersion():String;
  native public function download(caption:String = null,fileName:String = null,pathElements:Array = null):Boolean;
  native private function doDownload(caption:String,fileName:String):Boolean;

  native private function validate(str:String):String;
  native public function doSelfUpgrade(os:String):Boolean;
  [API("692")]
  static native public final function get isAllowed():Boolean;
}


[API("688")]
public final class flash.events.GameInputEvent extends flash.events.Event
{
  native public function GameInputEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,device:flash.ui.GameInputDevice = null):*;
  native private var _device:flash.ui.GameInputDevice;

  native public function get device():flash.ui.GameInputDevice;
  static native public const DEVICE_ADDED:String = "deviceAdded";
  static native public const DEVICE_REMOVED:String = "deviceRemoved";
  static native public const DEVICE_UNUSABLE:String = "deviceUnusable";
}


[native(cls="ObjectEncodingClass",gc="exact",methods="auto",construct="none")]
public final class flash.net.ObjectEncoding extends Object
{
  native public function ObjectEncoding():*;

  static native public const AMF0:uint = 0;
  static native public const AMF3:uint = 3;
  static native public const DEFAULT:uint = 3;
  static native public final function get dynamicPropertyWriter():flash.net.IDynamicPropertyWriter;
  static native public final function set dynamicPropertyWriter(object:flash.net.IDynamicPropertyWriter):void;
}


[API("661")]
public class flash.events.BrowserInvokeEvent extends flash.events.Event
{

  native public function BrowserInvokeEvent(type:String,bubbles:Boolean,cancelable:Boolean,arguments:Array,sandboxType:String,securityDomain:String,isHTTPS:Boolean,isUserEvent:Boolean):*;
  native public override function clone():flash.events.Event;
  native public function get arguments():Array;
  native public function get sandboxType():String;
  native public function get securityDomain():String;

  native public function get isHTTPS():Boolean;
  native public function get isUserEvent():Boolean;
  native private var m_arguments:Array;
  native private var m_sandboxType:String;
  native private var m_securityDomain:String;

  native private var m_isHTTPS:Boolean;
  native private var m_isUserEvent:Boolean;
  static native public const BROWSER_INVOKE:String = "browserInvoke";
}


[native(cls="Matrix3DClass",instance="Matrix3DObject",methods="auto")]
[Version("10")]
public class flash.geom.Matrix3D extends Object
{
  native public function Matrix3D(v:Vector.<Number> = null):*;
  native private function ctor(v:Vector.<Number>):void;

  native public function clone():Matrix3D;
  native public function copyToMatrix3D(dest:Matrix3D):void;
  native public function get rawData():Vector.<Number>;
  native public function set rawData(v:Vector.<Number>):void;
  native public function append(lhs:Matrix3D):void;

  native public function prepend(rhs:Matrix3D):void;
  native public function invert():Boolean;
  native public function identity():void;
  native public function decompose(orientationStyle:String = "eulerAngles"):Vector.<flash.geom.Vector3D>;
  native public function recompose(components:Vector.<flash.geom.Vector3D>,orientationStyle:String = "eulerAngles"):Boolean;

  native public function get position():flash.geom.Vector3D;
  native public function set position(pos:flash.geom.Vector3D):void;
  native public function appendTranslation(x:Number,y:Number,z:Number):void;
  native public function appendRotation(degrees:Number,axis:flash.geom.Vector3D,pivotPoint:flash.geom.Vector3D = null):void;
  native public function appendScale(xScale:Number,yScale:Number,zScale:Number):void;

  native public function prependTranslation(x:Number,y:Number,z:Number):void;
  native public function prependRotation(degrees:Number,axis:flash.geom.Vector3D,pivotPoint:flash.geom.Vector3D = null):void;
  native public function prependScale(xScale:Number,yScale:Number,zScale:Number):void;
  native public function transformVector(v:flash.geom.Vector3D):flash.geom.Vector3D;
  native public function deltaTransformVector(v:flash.geom.Vector3D):flash.geom.Vector3D;

  native public function transformVectors(vin:Vector.<Number>,vout:Vector.<Number>):void;
  native public function get determinant():Number;
  native public function transpose():void;
  native public function pointAt(pos:flash.geom.Vector3D,at:flash.geom.Vector3D = null,up:flash.geom.Vector3D = null):void;
  native public function interpolateTo(toMat:Matrix3D,percent:Number):void;

  [API("674")]
  native public function copyFrom(sourceMatrix3D:Matrix3D):void;
  [API("674")]
  native public function copyRawDataTo(vector:Vector.<Number>,index:uint = 0,transpose:Boolean = false):void;
  [API("674")]
  native public function copyRawDataFrom(vector:Vector.<Number>,index:uint = 0,transpose:Boolean = false):void;
  [API("674")]
  native public function copyRowTo(row:uint,vector3D:flash.geom.Vector3D):void;
  [API("674")]
  native public function copyColumnTo(column:uint,vector3D:flash.geom.Vector3D):void;

  [API("674")]
  native public function copyRowFrom(row:uint,vector3D:flash.geom.Vector3D):void;
  [API("674")]
  native public function copyColumnFrom(column:uint,vector3D:flash.geom.Vector3D):void;
  static native public final function interpolate(thisMat:Matrix3D,toMat:Matrix3D,percent:Number):Matrix3D;
}


[API("674")]
public final class flash.media.H264Profile extends Object
{
  native public function H264Profile():*;
  static native public const BASELINE:String = "baseline";

  static native public const MAIN:String = "main";
}


public final class flash.display.Scene extends Object
{
  native public function Scene(name:String,labels:Array,numFrames:int):*;
  native private var _name:String;
  native private var _labels:Array;
  native private var _numFrames:int;

  native public function get name():String;
  native public function get labels():Array;
  native public function get numFrames():int;
}


[API("675")]
public final class flash.text.SoftKeyboardType extends Object
{
  native public function SoftKeyboardType():*;
  static native public const DEFAULT:String = "default";

  static native public const PUNCTUATION:String = "punctuation";
  static native public const URL:String = "url";
  static native public const NUMBER:String = "number";
  static native public const CONTACT:String = "contact";
  static native public const EMAIL:String = "email";
}


public final class flash.display3D.Context3DClearMask extends Object
{

  native public function Context3DClearMask():*;
  static native public const COLOR:int;
  static native public const DEPTH:int;
  static native public const STENCIL:int;
  static native public const ALL:int;
}


[Version("10.1")]
public final class flash.net.NetStreamMulticastInfo extends Object
{

  native public function NetStreamMulticastInfo(sendDataBytesPerSecond:Number,sendControlBytesPerSecond:Number,receiveDataBytesPerSecond:Number,receiveControlBytesPerSecond:Number,bytesPushedToPeers:Number,fragmentsPushedToPeers:Number,bytesRequestedByPeers:Number,fragmentsRequestedByPeers:Number,bytesPushedFromPeers:Number,fragmentsPushedFromPeers:Number,bytesRequestedFromPeers:Number,fragmentsRequestedFromPeers:Number,sendControlBytesPerSecondToServer:Number,receiveDataBytesPerSecondFromServer:Number,bytesReceivedFromServer:Number,fragmentsReceivedFromServer:Number,receiveDataBytesPerSecondFromIPMulticast:Number,bytesReceivedFromIPMulticast:Number,fragmentsReceivedFromIPMulticast:Number):*;
  native private var m_sendDataBytesPerSecond:Number;
  native private var m_sendControlBytesPerSecond:Number;
  native private var m_receiveDataBytesPerSecond:Number;
  native private var m_receiveControlBytesPerSecond:Number;

  native private var m_bytesPushedToPeers:Number;
  native private var m_fragmentsPushedToPeers:Number;
  native private var m_bytesRequestedByPeers:Number;
  native private var m_fragmentsRequestedByPeers:Number;
  native private var m_bytesPushedFromPeers:Number;

  native private var m_fragmentsPushedFromPeers:Number;
  native private var m_bytesRequestedFromPeers:Number;
  native private var m_fragmentsRequestedFromPeers:Number;
  native private var m_sendControlBytesPerSecondToServer:Number;
  native private var m_receiveDataBytesPerSecondFromServer:Number;

  native private var m_bytesReceivedFromServer:Number;
  native private var m_fragmentsReceivedFromServer:Number;
  native private var m_receiveDataBytesPerSecondFromIPMulticast:Number;
  native private var m_bytesReceivedFromIPMulticast:Number;
  native private var m_fragmentsReceivedFromIPMulticast:Number;

  native public function get sendDataBytesPerSecond():Number;
  native public function get sendControlBytesPerSecond():Number;
  native public function get receiveDataBytesPerSecond():Number;
  native public function get receiveControlBytesPerSecond():Number;
  native public function get bytesPushedToPeers():Number;

  native public function get fragmentsPushedToPeers():Number;
  native public function get bytesRequestedByPeers():Number;
  native public function get fragmentsRequestedByPeers():Number;
  native public function get bytesPushedFromPeers():Number;
  native public function get fragmentsPushedFromPeers():Number;

  native public function get bytesRequestedFromPeers():Number;
  native public function get fragmentsRequestedFromPeers():Number;
  native public function get sendControlBytesPerSecondToServer():Number;
  native public function get receiveDataBytesPerSecondFromServer():Number;
  native public function get bytesReceivedFromServer():Number;

  native public function get fragmentsReceivedFromServer():Number;
  native public function get receiveDataBytesPerSecondFromIPMulticast():Number;
  native public function get bytesReceivedFromIPMulticast():Number;
  native public function get fragmentsReceivedFromIPMulticast():Number;
  native public function toString():String;
}


public class flash.events.ActivityEvent extends flash.events.Event
{

  native public function ActivityEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,activating:Boolean = false):*;
  native private var m_activating:Boolean;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get activating():Boolean;

  native public function set activating(value:Boolean):void;
  static native public const ACTIVITY:String = "activity";
}


[Version("10.1")]
public final class flash.globalization.LastOperationStatus extends Object
{
  native public function LastOperationStatus():*;
  static native public const NO_ERROR:String = "noError";
  static native public const USING_FALLBACK_WARNING:String = "usingFallbackWarning";

  static native public const USING_DEFAULT_WARNING:String = "usingDefaultWarning";
  static native public const PARSE_ERROR:String = "parseError";
  static native public const UNSUPPORTED_ERROR:String = "unsupportedError";
  static native public const ERROR_CODE_UNKNOWN:String = "errorCodeUnknown";
  static native public const PATTERN_SYNTAX_ERROR:String = "patternSyntaxError";

  static native public const MEMORY_ALLOCATION_ERROR:String = "memoryAllocationError";
  static native public const ILLEGAL_ARGUMENT_ERROR:String = "illegalArgumentError";
  static native public const BUFFER_OVERFLOW_ERROR:String = "bufferOverflowError";
  static native public const INVALID_ATTR_VALUE:String = "invalidAttrValue";
  static native public const NUMBER_OVERFLOW_ERROR:String = "numberOverflowError";

  static native public const INVALID_CHAR_FOUND:String = "invalidCharFound";
  static native public const TRUNCATED_CHAR_FOUND:String = "truncatedCharFound";
  static native public const INDEX_OUT_OF_BOUNDS_ERROR:String = "indexOutOfBoundsError";
  static native public const PLATFORM_API_FAILED:String = "platformAPIFailed";
  static native public const UNEXPECTED_TOKEN:String = "unexpectedToken";
}


[native(cls="NetConnectionClass",instance="NetConnectionObject",methods="auto")]
[Event(name="netStatus",type="flash.events.NetStatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="asyncError",type="flash.events.AsyncErrorEvent")]
public class flash.net.NetConnection extends flash.events.EventDispatcher
{

  native public function NetConnection():*;
  native public function get connected():Boolean;
  native public function get uri():String;
  native public function close():void;
  [Inspectable(environment="none")]
  native public function addHeader(operation:String,mustUnderstand:Boolean = false,param:Object = null):void;

  native public function call(command:String,responder:flash.net.Responder,... rest):void;
  native public function connect(command:String,... rest):void;
  native public function get client():Object;
  native public function set client(object:Object):void;
  native public function get objectEncoding():uint;

  native public function set objectEncoding(version:uint):void;
  native public function get proxyType():String;
  native public function set proxyType(ptype:String):void;
  native public function get connectedProxyType():String;
  native public function get usingTLS():Boolean;

  [Version("10")]
  native public function get protocol():String;
  [Version("10")]
  native public function get maxPeerConnections():uint;
  [Version("10")]
  native public function set maxPeerConnections(maxPeers:uint):void;
  [Version("10")]
  native public function get nearID():String;
  [Version("10")]
  native public function get farID():String;

  [Version("10")]
  native public function get nearNonce():String;
  [Version("10")]
  native public function get farNonce():String;
  [Version("10")]
  native public function get unconnectedPeerStreams():Array;
  native private function invoke(index:uint,... rest):*;
  native private function invokeWithArgsArray(index:uint,args:Array):*;

  native private function _SetHTTPIdleTimeout(value:Number):void;
  [API("671")]
  native public function get httpIdleTimeout():Number;
  [API("671")]
  native public function set httpIdleTimeout(value:Number):void;
  static native public final function get defaultObjectEncoding():uint;
  static native public final function set defaultObjectEncoding(version:uint):void;

  static native private const kConnect:uint = 0;
  static native private const kClose:uint = 1;
  static native private const kCall:uint = 2;
  static native private const kAddHeader:uint = 3;
  static native private const kGetConnectedProxyType:uint = 4;

  static native private const kGetUsingTLS:uint = 5;
  static native private const kGetProtocol:uint = 6;
  static native private const kGetNearID:uint = 7;
  static native private const kGetFarID:uint = 8;
  static native private const kGetNearNonce:uint = 9;

  static native private const kGetFarNonce:uint = 10;
}


[API("675")]
public final class flash.media.AudioPlaybackMode extends Object
{
  native public function AudioPlaybackMode():*;
  [API("683")]
  static native public const AMBIENT:String = "ambient";
  static native public const MEDIA:String = "media";
  static native public const VOICE:String = "voice";
}


[Version("air2.0")]
[native(cls="StorageVolumeInfoClass",instance="StorageVolumeInfoObject",methods="auto",construct="native")]
[Event(name="storageVolumeUnmount",type="flash.events.StorageVolumeChangeEvent")]
[Event(name="storageVolumeMount",type="flash.events.StorageVolumeChangeEvent")]
public final class flash.filesystem.StorageVolumeInfo extends flash.events.EventDispatcher
{

  native public function StorageVolumeInfo():void;
  native public function getStorageVolumes():Vector.<flash.filesystem.StorageVolume>;
  static native public final function get storageVolumeInfo():StorageVolumeInfo;
  static native private final function _getInstance():StorageVolumeInfo;
  [Version("air2.0")]
  static native public final function get isSupported():Boolean;
}


[API("661")]
[native(cls="HTMLPopupWindowClass",instance="HTMLPopupWindowObject",methods="IHTMLPopupWindowObject<HTMLPopupWindowObject>",construct="native")]
public final class flash.html.HTMLPopupWindow extends Object
{

  native public function HTMLPopupWindow(owner:flash.html.HTMLLoader,closePopupWindowIfNeededClosure:Function,setDeactivateClosure:Function,computedFontSize:Number):*;
  native private var m_popupWindowWidth:uint;
  native private var m_ownerHtmlControl:flash.html.HTMLLoader;
  native private var m_activePopupWindow:flash.display.NativeWindow;
  native private var m_popupContent:XML;

  native private var m_popupHtmlControl:flash.html.HTMLLoader;
  native private var m_allowSelectedItemUpdate:Boolean;
  native private var m_closePopupWindowIfNeededClosure:Function;
  native private var m_setDeactivateClosure:Function;
  native private var m_itemsWidth:Number;

  native private var m_itemsHeight:Number;
  native private function getCSSPropertyAsFloat(element:*,propertyName:String):Number;
  native private function popupClickHandler(itemIndex:int):void;
  native private function popupItemsRootBorderSize():flash.geom.Point;
  native private function clampToActivePopupWindowLimits(width:Number,height:Number):flash.geom.Rectangle;

  native private function popupCompleteHandler(evt:flash.events.Event):void;
  native private function show(windowX:int,windowY:int,popupWindowWidth:int):void;
  native private function onDeactivate(evt:flash.events.Event):void;
  native private function onResize(evt:flash.events.NativeWindowBoundsEvent):void;
  native private function onOrientationChange(evt:flash.events.Event):void;

  native private function setPopupHtmlControlSize(width:int,height:int):*;
  native private function doDismiss():void;
  native public function close():void;
  native public function isActive():Boolean;
  native private function beginPopulate(computedFontSize:Number):void;

  native private function escapeStringIfNeeded(str:String):String;
  native private function addOption(optionText:String,itemIndex:int,isSelected:Boolean,isDisabled:Boolean,isChildOfGroup:Boolean):void;
  native private function addGroupLabel(optionText:String,itemIndex:int,isDisabled:Boolean):void;
  native private function addSeparator(itemIndex:int):void;
  native private function updateSelectedItem(itemIndex:int):void;

  native private function nativeOnItemClicked(itemIndex:int):void;
  native private function nativeOnPopupClosed():void;
  native private function get nativeHasXMLSerializationBug():Boolean;
  native private function nativeModifyActiveWindowMinWidth(window:flash.display.NativeWindow,minWidth:uint):void;
  native private function createHTMLLoader():flash.html.HTMLLoader;

  native private function nativeShowPopupControl():void;
  native private function nativeUpdatePopupControlMatrix():void;
  native private function nativeHidePopupControl():void;
  static native private const MIN_POPUP_HEIGHT:uint = 20;
  static native private const MIN_POPUP_WIDTH:uint = 50;

  static native private const MAX_POPUP_HEIGHT:uint = 400;
  static native private const POPUP_WIDTH_DELTA:uint = 16;
}


[API("670")]
public class flash.events.VideoEvent extends flash.events.Event
{
  native public function VideoEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,status:String = null):*;
  native public function get status():String;
  native private var m_status:String;

  native public const codecInfo:String;
  static native public const RENDER_STATE:String = "renderState";
  static native public const RENDER_STATUS_UNAVAILABLE:String = "unavailable";
  static native public const RENDER_STATUS_SOFTWARE:String = "software";
  static native public const RENDER_STATUS_ACCELERATED:String = "accelerated";
}


public final class flash.filters.BitmapFilterType extends Object
{

  native public function BitmapFilterType():*;
  static native public const INNER:String = "inner";
  static native public const OUTER:String = "outer";
  static native public const FULL:String = "full";
}


public final class flash.display.SpreadMethod extends Object
{
  native public function SpreadMethod():*;

  static native public const PAD:String = "pad";
  static native public const REFLECT:String = "reflect";
  static native public const REPEAT:String = "repeat";
}


[native(cls="TextFieldClass",gc="exact",instance="TextFieldObject",methods="auto")]
[Event(name="textInteractionModeChange",type="flash.events.Event")]
[Event(name="textInput",type="flash.events.TextEvent")]
[Event(name="scroll",type="flash.events.Event")]
[Event(name="link",type="flash.events.TextEvent")]
[Event(name="change",type="flash.events.Event")]
public class flash.text.TextField extends flash.display.InteractiveObject
{
  native public function TextField():*;
  native public function get alwaysShowSelection():Boolean;

  native public function set alwaysShowSelection(value:Boolean):void;
  native public function get antiAliasType():String;
  native public function set antiAliasType(antiAliasType:String):void;
  native public function get autoSize():String;
  native public function set autoSize(value:String):void;

  native public function get background():Boolean;
  native public function set background(value:Boolean):void;
  native public function get backgroundColor():uint;
  native public function set backgroundColor(value:uint):void;
  native public function get border():Boolean;

  native public function set border(value:Boolean):void;
  native public function get borderColor():uint;
  native public function set borderColor(value:uint):void;
  native public function get bottomScrollV():int;
  native public function get caretIndex():int;

  native public function get condenseWhite():Boolean;
  native public function set condenseWhite(value:Boolean):void;
  native public function get defaultTextFormat():flash.text.TextFormat;
  native public function set defaultTextFormat(format:flash.text.TextFormat):void;
  native public function get embedFonts():Boolean;

  native public function set embedFonts(value:Boolean):void;
  native public function get gridFitType():String;
  native public function set gridFitType(gridFitType:String):void;
  native public function get htmlText():String;
  native public function set htmlText(value:String):void;

  native public function get length():int;
  [API("670")]
  native public function get textInteractionMode():String;
  native public function get maxChars():int;
  native public function set maxChars(value:int):void;
  native public function get maxScrollH():int;

  native public function get maxScrollV():int;
  native public function get mouseWheelEnabled():Boolean;
  native public function set mouseWheelEnabled(value:Boolean):void;
  native public function get multiline():Boolean;
  native public function set multiline(value:Boolean):void;

  native public function get numLines():int;
  native public function get displayAsPassword():Boolean;
  native public function set displayAsPassword(value:Boolean):void;
  native public function get restrict():String;
  native public function set restrict(value:String):void;

  native public function get scrollH():int;
  native public function set scrollH(value:int):void;
  native public function get scrollV():int;
  native public function set scrollV(value:int):void;
  native public function get selectable():Boolean;

  native public function set selectable(value:Boolean):void;
  [Inspectable(environment="none")]
  native public function get selectedText():String;
  native public function get selectionBeginIndex():int;
  native public function get selectionEndIndex():int;
  native public function get sharpness():Number;

  native public function set sharpness(value:Number):void;
  native public function get styleSheet():flash.text.StyleSheet;
  native public function set styleSheet(value:flash.text.StyleSheet):void;
  native public function get text():String;
  native public function set text(value:String):void;

  native public function get textColor():uint;
  native public function set textColor(value:uint):void;
  native public function get textHeight():Number;
  native public function get textWidth():Number;
  native public function get thickness():Number;

  native public function set thickness(value:Number):void;
  native public function get type():String;
  native public function set type(value:String):void;
  native public function get wordWrap():Boolean;
  native public function set wordWrap(value:Boolean):void;

  native public function appendText(newText:String):void;
  [cppcall]
  native internal function copyRichText():String;
  native public function getCharBoundaries(charIndex:int):flash.geom.Rectangle;
  native public function getCharIndexAtPoint(x:Number,y:Number):int;
  native private function getCharIndexNearestPoint(x:Number,y:Number):int;

  native public function getFirstCharInParagraph(charIndex:int):int;
  native public function getLineIndexAtPoint(x:Number,y:Number):int;
  native public function getLineIndexOfChar(charIndex:int):int;
  native public function getLineLength(lineIndex:int):int;
  native public function getLineMetrics(lineIndex:int):flash.text.TextLineMetrics;

  native public function getLineOffset(lineIndex:int):int;
  native public function getLineText(lineIndex:int):String;
  native public function getParagraphLength(charIndex:int):int;
  native public function getTextFormat(beginIndex:int = -1,endIndex:int = -1):flash.text.TextFormat;
  [Inspectable(environment="none")]
  native public function getTextRuns(beginIndex:int = 0,endIndex:int = 2147483647):Array;

  [Inspectable(environment="none")]
  native public function getRawText():String;
  [Inspectable(environment="none")]
  native public function getXMLText(beginIndex:int = 0,endIndex:int = 2147483647):String;
  [Inspectable(environment="none")]
  native public function insertXMLText(beginIndex:int,endIndex:int,richText:String,pasting:Boolean = false):void;
  [cppcall]
  native internal function pasteRichText(richText:String):Boolean;
  native public function replaceSelectedText(value:String):void;

  native public function replaceText(beginIndex:int,endIndex:int,newText:String):void;
  native public function setSelection(beginIndex:int,endIndex:int):void;
  native public function setTextFormat(format:flash.text.TextFormat,beginIndex:int = -1,endIndex:int = -1):void;
  native public function getImageReference(id:String):flash.display.DisplayObject;
  native public function get useRichTextClipboard():Boolean;

  native public function set useRichTextClipboard(value:Boolean):void;
  native private function _dragEnter(event:flash.events.NativeDragEvent):void;
  native private function _dragOver(event:flash.events.NativeDragEvent):void;
  native private function _dragDrop(event:flash.events.NativeDragEvent):void;
  native private function _dragExit(event:flash.events.NativeDragEvent):void;

  [cppcall]
  native internal function _doDrag():void;
  native private var _dragAlwaysShowSelection:Boolean;
  native private function get dragCaretVisible():Boolean;
  native private function set dragCaretVisible(visible:Boolean):void;
  native private function get dragCaretIndex():int;

  native private function set dragCaretIndex(dragCaretIndex:int):void;
  native private function setSelectionToDragCaret():void;
  native private function isDragCaretSurrogateTrail(dragCaretIndex:int):Boolean;
  static native private var richTextFields:Array;
  [Version("10")]
  static native public final function isFontCompatible(fontName:String,fontStyle:String):Boolean;
}


[native(cls="GestureEventClass",instance="GestureEventObject",methods="auto")]
[Version("10.1")]
public class flash.events.GestureEvent extends flash.events.Event
{

  native public function GestureEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,phase:String = null,localX:Number = 0,localY:Number = 0,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,commandKey:Boolean = false,controlKey:Boolean = false):*;
  native private var m_phase:String;
  native private var m_ctrlKey:Boolean;
  native private var m_altKey:Boolean;
  native private var m_shiftKey:Boolean;

  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get localX():Number;
  native public function set localX(value:Number):void;
  native public function get localY():Number;

  native public function set localY(value:Number):void;
  native public function get phase():String;
  native public function set phase(value:String):void;
  native public function get ctrlKey():Boolean;
  native public function set ctrlKey(value:Boolean):void;

  native public function get altKey():Boolean;
  native public function set altKey(value:Boolean):void;
  native public function get shiftKey():Boolean;
  native public function set shiftKey(value:Boolean):void;
  native public function get stageX():Number;

  native public function get stageY():Number;
  native public function updateAfterEvent():void;
  native private function getStageX():Number;
  native private function getStageY():Number;
  native private var m_commandKey:Boolean;

  native private var m_controlKey:Boolean;
  native public function get commandKey():Boolean;
  native public function set commandKey(value:Boolean):void;
  native public function get controlKey():Boolean;
  native public function set controlKey(value:Boolean):void;

  static native public const GESTURE_TWO_FINGER_TAP:String = "gestureTwoFingerTap";
}


[native(cls="PressAndTapGestureEventClass",instance="PressAndTapGestureEventObject",methods="auto")]
[API("667")]
public class flash.events.PressAndTapGestureEvent extends flash.events.GestureEvent
{
  native public function PressAndTapGestureEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,phase:String = null,localX:Number = 0,localY:Number = 0,tapLocalX:Number = 0,tapLocalY:Number = 0,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,commandKey:Boolean = false,controlKey:Boolean = false):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get tapLocalX():Number;

  native public function set tapLocalX(value:Number):void;
  native public function get tapLocalY():Number;
  native public function set tapLocalY(value:Number):void;
  native public function get tapStageX():Number;
  native public function get tapStageY():Number;

  native private function getTapStageX():Number;
  native private function getTapStageY():Number;
  static native public const GESTURE_PRESS_AND_TAP:String = "gesturePressAndTap";
}


[native(cls="SoundChannelClass",gc="exact",instance="SoundChannelObject",methods="auto")]
[Event(name="soundComplete",type="flash.events.Event")]
public final class flash.media.SoundChannel extends flash.events.EventDispatcher
{
  native public function SoundChannel():*;
  native public function get position():Number;

  native public function get soundTransform():flash.media.SoundTransform;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
  native public function stop():void;
  native public function get leftPeak():Number;
  native public function get rightPeak():Number;
}


public final class flash.events.TouchEventIntent extends Object
{

  native public function TouchEventIntent():*;
  static native public const UNKNOWN:String = "unknown";
  static native public const PEN:String = "pen";
  static native public const ERASER:String = "eraser";
}


[native(cls="EastAsianJustifierClass",instance="EastAsianJustifierObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.EastAsianJustifier extends flash.text.engine.TextJustifier
{
  native public function EastAsianJustifier(locale:String = "ja",lineJustification:String = "allButLast",justificationStyle:String = "pushInKinsoku"):*;

  native public function get justificationStyle():String;
  native public function set justificationStyle(value:String):void;
  [API("674")]
  native public function get composeTrailingIdeographicSpaces():Boolean;
  [API("674")]
  native public function set composeTrailingIdeographicSpaces(value:Boolean):void;
  native public override function clone():flash.text.engine.TextJustifier;
}


[Version("air2.0")]
public final class flash.net.IPVersion extends Object
{

  native public function IPVersion():*;
  static native public const IPV4:String = "IPv4";
  static native public const IPV6:String = "IPv6";
}


public class flash.accessibility.AccessibilityImplementation extends Object
{
  native public function AccessibilityImplementation():*;
  native public var stub:Boolean;

  native public var errno:uint;
  native public function get_accRole(childID:uint):uint;
  native public function get_accName(childID:uint):String;
  native public function get_accValue(childID:uint):String;
  native public function get_accState(childID:uint):uint;

  native public function get_accDefaultAction(childID:uint):String;
  native public function accDoDefaultAction(childID:uint):void;
  native public function isLabeledBy(labelBounds:flash.geom.Rectangle):Boolean;
  native public function getChildIDArray():Array;
  native public function accLocation(childID:uint):*;

  native public function get_accSelection():Array;
  native public function get_accFocus():uint;
  native public function accSelect(operation:uint,childID:uint):void;
  [cppcall]
  [API("708")]
  native public function get_selectionAnchorIndex():*;
  [cppcall]
  [API("708")]
  native public function get_selectionActiveIndex():*;
}


[API("661")]
public class flash.data.SQLCollationType extends Object
{

  native public function SQLCollationType():*;
  static native public const BINARY:String = "binary";
  static native public const NO_CASE:String = "noCase";
}


[API("668")]
[native(cls="CameraRollClass",instance="CameraRollObject",methods="auto")]
[Event(name="cancel",type="flash.events.Event")]
[Event(name="select",type="flash.events.MediaEvent")]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
public class flash.media.CameraRoll extends flash.events.EventDispatcher
{
  native public function CameraRoll():*;
  native public function addBitmapData(bitmapData:flash.display.BitmapData):void;

  [API("669")]
  native public function browseForImage(value:flash.media.CameraRollBrowseOptions = null):void;
  static native public final function get supportsAddBitmapData():Boolean;
  [API("669")]
  static native public final function get supportsBrowseForImage():Boolean;
}


[native(cls="CSMSettingsClass",instance="CSMSettingsObject",methods="auto")]
public final class flash.text.CSMSettings extends Object
{
  native public function CSMSettings(fontSize:Number,insideCutoff:Number,outsideCutoff:Number):*;
  native public var fontSize:Number;

  native public var insideCutoff:Number;
  native public var outsideCutoff:Number;
}


[native(cls="DRMContentDataClass",instance="DRMContentDataObject",methods="auto")]
[API("667")]
public class flash.net.drm.DRMContentData extends Object
{
  native public function DRMContentData(rawData:flash.utils.ByteArray = null):*;
  native public function get serverURL():String;
  native private function get FMRMSURL():String;

  native public function get authenticationMethod():String;
  native public function get licenseID():String;
  native public function get domain():String;
  [API("667")]
  native public function getVoucherAccessInfo():Vector.<flash.net.drm.VoucherAccessInfo>;
  native private var m_licenseID:String;

  native private var m_domain:String;
  native private var m_voucherAccessInfo:Vector.<flash.net.drm.VoucherAccessInfo>;
  native private function getLicenseIDInner():String;
  native private function getDomainInner():String;
  native private function setRawMetadataInner(inRawData:flash.utils.ByteArray):uint;

  native private function errorCodeToThrow(errorCode:uint):void;
  native private function populateVoucherAccessInfo():void;
  [cppcall]
  native private function addVoucherAccessInfo(newVoucherAccessInfo:flash.net.drm.VoucherAccessInfo):void;
  static native private var m_internalOnly:flash.utils.ByteArray;
}


[API("661")]
public class flash.data.SQLTransactionLockType extends Object
{
  native public function SQLTransactionLockType():*;

  static native public const DEFERRED:String = "deferred";
  static native public const EXCLUSIVE:String = "exclusive";
  static native public const IMMEDIATE:String = "immediate";
}


[API("670")]
public class flash.events.StageVideoAvailabilityEvent extends flash.events.Event
{
  native public function StageVideoAvailabilityEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,availability:String = null):*;
  native public function get availability():String;

  native private var m_availability:String;
  native public const reason:String;
  native public const driver:String;
  static native public const STAGE_VIDEO_AVAILABILITY:String = "stageVideoAvailability";
}


[Version("10.1")]
public final class flash.net.NetGroupSendMode extends Object
{
  native public function NetGroupSendMode():*;

  static native public const NEXT_INCREASING:String = "nextIncreasing";
  static native public const NEXT_DECREASING:String = "nextDecreasing";
}


[ExcludeClass]
public class flash.text.TextRun extends Object
{
  native public function TextRun(beginIndex:int,endIndex:int,textFormat:flash.text.TextFormat):*;
  native public var beginIndex:int;
  native public var endIndex:int;

  native public var textFormat:flash.text.TextFormat;
}


[native(cls="XMLSocketClass",instance="XMLSocketObject",methods="auto")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="data",type="flash.events.DataEvent")]
[Event(name="connect",type="flash.events.Event")]
[Event(name="close",type="flash.events.Event")]
public class flash.net.XMLSocket extends flash.events.EventDispatcher
{
  native public function XMLSocket(host:String = null,port:int = 0):void;
  native private var _internalSocket:flash.net.Socket;
  native private var _rcvBuffer:flash.utils.ByteArray;
  native private var _bytesInPacket:uint;

  native private function reflectEvent(e:flash.events.Event):void;
  native private function scanAndSendEvent(e:flash.events.ProgressEvent):void;
  native public function connect(host:String,port:int):void;
  native public function send(object:*):void;
  [Version("10")]
  native public function get timeout():int;

  [Version("10")]
  native public function set timeout(value:int):void;
  native public function close():void;
  native public function get connected():Boolean;
}


[native(cls="DictionaryClass",gc="exact",instance="DictionaryObject",methods="auto")]
public dynamic class flash.utils.Dictionary extends Object
{
  native public function Dictionary(weakKeys:Boolean = false):*;
  native private function init(weakKeys:Boolean):void;
}


public final class flash.display3D.Context3DCompareMode extends Object
{

  native public function Context3DCompareMode():*;
  static native public const ALWAYS:String = "always";
  static native public const NEVER:String = "never";
  static native public const LESS:String = "less";
  static native public const LESS_EQUAL:String = "lessEqual";

  static native public const EQUAL:String = "equal";
  static native public const GREATER_EQUAL:String = "greaterEqual";
  static native public const GREATER:String = "greater";
  static native public const NOT_EQUAL:String = "notEqual";
}


public final class flash.text.TextFieldAutoSize extends Object
{
  native public function TextFieldAutoSize():*;

  static native public const NONE:String = "none";
  static native public const LEFT:String = "left";
  static native public const CENTER:String = "center";
  static native public const RIGHT:String = "right";
}


public final class flash.sampler.ScriptMember extends Object
{
  native public function ScriptMember():*;

  native public const propertyName:String;
  native public const id:Number;
}

[native(cls="ScriptSamplerClass",methods="auto",construct="none")]
public final class flash.sampler.ScriptSampler extends Object
{
  native public function ScriptSampler():*;
  static native public final function getType(id:Number):String;
  static native public final function getSize(id:Number):Number;

  static native public final function getMembers(id:Number):Vector.<flash.sampler.ScriptMember>;
  static native public final function getInvocationCount(id:Number):Number;
  static native public final function getName(id:Number):String;
  static native public final function getFilename(id:Number):String;
}


[ExcludeClass]
public class flash.automation.AutomationAction extends Object
{
  native public function AutomationAction():*;

  native private var _type:String = "";
  native public function get type():String;
  native public function set type(value:String):void;
}


[ExcludeClass]
public class flash.automation.KeyboardAutomationAction extends flash.automation.AutomationAction
{
  native public function KeyboardAutomationAction(type:String,keyCode:uint = 0):*;
  native private var _keyCode:uint = 0;

  native public function get keyCode():uint;
  native public function set keyCode(value:uint):void;
  static native public const KEY_DOWN:String = "keyDown";
  static native public const KEY_UP:String = "keyUp";
}


[native(cls="GroupElementClass",instance="GroupElementObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.GroupElement extends flash.text.engine.ContentElement
{
  native public function GroupElement(elements:Vector.<flash.text.engine.ContentElement> = null,elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;

  native public function get elementCount():int;
  native public function getElementAt(index:int):flash.text.engine.ContentElement;
  native public function setElements(value:Vector.<flash.text.engine.ContentElement>):void;
  native public function groupElements(beginIndex:int,endIndex:int):GroupElement;
  native public function ungroupElements(groupIndex:int):void;

  native public function mergeTextElements(beginIndex:int,endIndex:int):flash.text.engine.TextElement;
  native public function splitTextElement(elementIndex:int,splitIndex:int):flash.text.engine.TextElement;
  native public function replaceElements(beginIndex:int,endIndex:int,newElements:Vector.<flash.text.engine.ContentElement>):Vector.<flash.text.engine.ContentElement>;
  native public function getElementAtCharIndex(charIndex:int):flash.text.engine.ContentElement;
  native public function getElementIndex(element:flash.text.engine.ContentElement):int;
}


[native(cls="NetStreamPlayOptionsClass",instance="NetStreamPlayOptionsObject",methods="auto")]
[API("662")]
public dynamic class flash.net.NetStreamPlayOptions extends flash.events.EventDispatcher
{

  native public function NetStreamPlayOptions():*;
  native public var streamName:String;
  native public var oldStreamName:String;
  native public var start:Number;
  native public var len:Number;

  [API("667")]
  native public var offset:Number;
  native public var transition:String;
}


[native(cls="ElementFormatClass",instance="ElementFormatObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.ElementFormat extends Object
{
  native public function ElementFormat(fontDescription:flash.text.engine.FontDescription = null,fontSize:Number = 12.0,color:uint = 0,alpha:Number = 1.0,textRotation:String = "auto",dominantBaseline:String = "roman",alignmentBaseline:String = "useDominantBaseline",baselineShift:Number = 0.0,kerning:String = "on",trackingRight:Number = 0.0,trackingLeft:Number = 0.0,locale:String = "en",breakOpportunity:String = "auto",digitCase:String = "default",digitWidth:String = "default",ligatureLevel:String = "common",typographicCase:String = "default"):*;
  native public function get alignmentBaseline():String;
  native public function set alignmentBaseline(alignmentBaseline:String):void;

  native public function get alpha():Number;
  native public function set alpha(value:Number):void;
  native public function get baselineShift():Number;
  native public function set baselineShift(value:Number):void;
  native public function get breakOpportunity():String;

  native public function set breakOpportunity(opportunityType:String):void;
  native public function get color():uint;
  native public function set color(value:uint):void;
  native public function get dominantBaseline():String;
  native public function set dominantBaseline(dominantBaseline:String):void;

  native public function get fontDescription():flash.text.engine.FontDescription;
  native public function set fontDescription(value:flash.text.engine.FontDescription):void;
  native public function get digitCase():String;
  native public function set digitCase(digitCaseType:String):void;
  native public function get digitWidth():String;

  native public function set digitWidth(digitWidthType:String):void;
  native public function get ligatureLevel():String;
  native public function set ligatureLevel(ligatureLevelType:String):void;
  native public function get fontSize():Number;
  native public function set fontSize(value:Number):void;

  native public function get kerning():String;
  native public function set kerning(value:String):void;
  native public function get locale():String;
  native public function set locale(value:String):void;
  native public function get textRotation():String;

  native public function set textRotation(value:String):void;
  native public function get trackingRight():Number;
  native public function set trackingRight(value:Number):void;
  native public function get trackingLeft():Number;
  native public function set trackingLeft(value:Number):void;

  native public function get typographicCase():String;
  native public function set typographicCase(typographicCaseType:String):void;
  native public function get locked():Boolean;
  native public function set locked(value:Boolean):void;
  native public function getFontMetrics():flash.text.engine.FontMetrics;

  native public function clone():ElementFormat;
}


[native(cls="DisplacementMapFilterClass",instance="DisplacementMapFilterObject",methods="auto")]
public final class flash.filters.DisplacementMapFilter extends flash.filters.BitmapFilter
{
  native public function DisplacementMapFilter(mapBitmap:flash.display.BitmapData = null,mapPoint:flash.geom.Point = null,componentX:uint = 0,componentY:uint = 0,scaleX:Number = 0.0,scaleY:Number = 0.0,mode:String = "wrap",color:uint = 0,alpha:Number = 0.0):*;
  native public function get mapBitmap():flash.display.BitmapData;
  native public function set mapBitmap(value:flash.display.BitmapData):void;
  native public function get mapPoint():flash.geom.Point;

  native public function set mapPoint(value:flash.geom.Point):void;
  native public function get componentX():uint;
  native public function set componentX(value:uint):void;
  native public function get componentY():uint;
  native public function set componentY(value:uint):void;

  native public function get scaleX():Number;
  native public function set scaleX(value:Number):void;
  native public function get scaleY():Number;
  native public function set scaleY(value:Number):void;
  native public function get mode():String;

  native public function set mode(value:String):void;
  native public function get color():uint;
  native public function set color(value:uint):void;
  native public function get alpha():Number;
  native public function set alpha(value:Number):void;

  native public override function clone():flash.filters.BitmapFilter;
}


[Version("air2.0")]
public final class flash.printing.PrintUIOptions extends Object
{
  native public function PrintUIOptions():*;
  native public var minPage:uint = 0;
  native public var maxPage:uint = 0;
  native public var disablePageRange:Boolean = false;
}


[native(cls="CurrencyParseResultClass",instance="CurrencyParseResultObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.CurrencyParseResult extends Object
{

  native public function CurrencyParseResult(value:Number = NaN,symbol:String = ""):*;
  native private function ctor(value:Number,symbol:String):void;
  native public function get value():Number;
  native public function get currencyString():String;
}


[native(cls="Context3DClass",instance="Context3DObject",methods="auto",construct="native")]
[API("674")]
public final class flash.display3D.Context3D extends flash.events.EventDispatcher
{
  native public function Context3D():*;

  native public function get driverInfo():String;
  native public function dispose(recreate:Boolean = true):void;
  native public function get enableErrorChecking():Boolean;
  native public function set enableErrorChecking(toggle:Boolean):void;
  native public function configureBackBuffer(width:int,height:int,antiAlias:int,enableDepthAndStencil:Boolean = true,wantsBestResolution:Boolean = false,wantsBestResolutionOnBrowserZoom:Boolean = false):void;

  native public function clear(red:Number = 0.0,green:Number = 0.0,blue:Number = 0.0,alpha:Number = 1.0,depth:Number = 1.0,stencil:uint = 0,mask:uint = NaN):void;
  native public function drawTriangles(indexBuffer:flash.display3D.IndexBuffer3D,firstIndex:int = 0,numTriangles:int = -1):void;
  native public function present():void;
  native public function setProgram(program:flash.display3D.Program3D):void;
  native public function setProgramConstantsFromVector(programType:String,firstRegister:int,data:Vector.<Number>,numRegisters:int = -1):void;

  native public function setProgramConstantsFromMatrix(programType:String,firstRegister:int,matrix:flash.geom.Matrix3D,transposedMatrix:Boolean = false):void;
  [API("676")]
  native public function setProgramConstantsFromByteArray(programType:String,firstRegister:int,numRegisters:int,data:flash.utils.ByteArray,byteArrayOffset:uint):void;
  native public function setVertexBufferAt(index:int,buffer:flash.display3D.VertexBuffer3D,bufferOffset:int = 0,format:String = "float4"):void;
  native public function setBlendFactors(sourceFactor:String,destinationFactor:String):void;
  native public function setColorMask(red:Boolean,green:Boolean,blue:Boolean,alpha:Boolean):void;

  native public function setDepthTest(depthMask:Boolean,passCompareMode:String):void;
  native public function setTextureAt(sampler:int,texture:flash.display3D.textures.TextureBase):void;
  native public function setRenderToTexture(texture:flash.display3D.textures.TextureBase,enableDepthAndStencil:Boolean = false,antiAlias:int = 0,surfaceSelector:int = 0,colorOutputIndex:int = 0):void;
  native public function setRenderToBackBuffer():void;
  native private function setRenderToTextureInternal(texture:flash.display3D.textures.TextureBase,targetType:int,enableDepthAndStencil:Boolean,antiAlias:int,surfaceSelector:int,colorOutputIndex:int):void;

  native public function setCulling(triangleFaceToCull:String):void;
  native public function setStencilActions(triangleFace:String = "frontAndBack",compareMode:String = "always",actionOnBothPass:String = "keep",actionOnDepthFail:String = "keep",actionOnDepthPassStencilFail:String = "keep"):void;
  native public function setStencilReferenceValue(referenceValue:uint,readMask:uint = 255,writeMask:uint = 255):void;
  native public function setScissorRectangle(rectangle:flash.geom.Rectangle):void;
  native public function createVertexBuffer(numVertices:int,data32PerVertex:int,bufferUsage:String = "staticDraw"):flash.display3D.VertexBuffer3D;

  native public function createIndexBuffer(numIndices:int,bufferUsage:String = "staticDraw"):flash.display3D.IndexBuffer3D;
  native public function createTexture(width:int,height:int,format:String,optimizeForRenderToTexture:Boolean,streamingLevels:int = 0):flash.display3D.textures.Texture;
  native public function createCubeTexture(size:int,format:String,optimizeForRenderToTexture:Boolean,streamingLevels:int = 0):flash.display3D.textures.CubeTexture;
  [API("690")]
  native public function createRectangleTexture(width:int,height:int,format:String,optimizeForRenderToTexture:Boolean):flash.display3D.textures.RectangleTexture;
  native public function createProgram():flash.display3D.Program3D;

  native public function drawToBitmapData(destination:flash.display.BitmapData):void;
  [API("686")]
  native public function setSamplerStateAt(sampler:int,wrap:String,filter:String,mipfilter:String):void;
  [API("692")]
  native public function get profile():String;
  native private function setTextureInternal(sampler:int,texture:flash.display3D.textures.Texture):void;
  native private function setCubeTextureInternal(sampler:int,texture:flash.display3D.textures.CubeTexture):void;

  native private function setRectangleTextureInternal(sampler:int,texture:flash.display3D.textures.RectangleTexture):void;
  native private function setVideoTextureInternal(sampler:int,texture:flash.display3D.textures.VideoTexture):void;
  [API("700")]
  native public function get backBufferWidth():int;
  [API("700")]
  native public function get backBufferHeight():int;
  [API("700")]
  native public function get maxBackBufferWidth():int;

  [API("700")]
  native public function set maxBackBufferWidth(width:int):void;
  [API("700")]
  native public function get maxBackBufferHeight():int;
  [API("700")]
  native public function set maxBackBufferHeight(height:int):void;
  [API("705")]
  native public function createVideoTexture():flash.display3D.textures.VideoTexture;
  [API("703")]
  native public function setFillMode(fillMode:String):void;

  [API("705")]
  static native public final function get supportsVideoTexture():Boolean;
}


[native(cls="PrintJobClass",instance="PrintJobObject",methods="auto",construct="check")]
public class flash.printing.PrintJob extends flash.events.EventDispatcher
{
  native public function PrintJob():*;
  native public function get paperHeight():int;
  native public function get paperWidth():int;
  native public function get pageHeight():int;

  native public function get pageWidth():int;
  native public function get orientation():String;
  native public function start():Boolean;
  native private function invoke(index:uint,... rest):*;
  native private function _invoke(index:*,... rest):*;

  native public function send():void;
  native private function toClassicRectangle(printArea:flash.geom.Rectangle):*;
  native public function addPage(sprite:flash.display.Sprite,printArea:flash.geom.Rectangle = null,options:flash.printing.PrintJobOptions = null,frameNum:int = 0):void;
  [Version("air2.0")]
  native public function set orientation(orientStr:String):void;
  native private function get thisJobIsActive():Boolean;

  [Version("air2.0")]
  native public function get printer():String;
  [Version("air2.0")]
  native public function set printer(name:String):void;
  [Version("air2.0")]
  native public function get jobName():String;
  [Version("air2.0")]
  native public function set jobName(name:String):void;
  [Version("air2.0")]
  native public function get paperArea():flash.geom.Rectangle;

  [Version("air2.0")]
  native public function get printableArea():flash.geom.Rectangle;
  [Version("air2.0")]
  native public function get maxPixelsPerInch():Number;
  [Version("air2.0")]
  native public function get isColor():Boolean;
  [Version("air2.0")]
  native public function get firstPage():int;
  [Version("air2.0")]
  native public function get lastPage():int;

  [Version("air2.0")]
  native public function get copies():int;
  [Version("air2.0")]
  native public function set copies(numCopies:int):void;
  [Version("air2.0")]
  native public function showPageSetupDialog():Boolean;
  [Version("air2.0")]
  native public function selectPaperSize(paperSize:String):void;
  native private function get lessThanAIR2():Boolean;

  [Version("air2.0")]
  native public function start2(uiOptions:flash.printing.PrintUIOptions = null,showPrintDialog:Boolean = true):Boolean;
  [Version("air2.0")]
  native public function terminate():void;
  native private var stubProperties:Object;
  native private function initStubProperties():void;
  native private function setStubProperty(key:String,value:*):*;

  native private function getStubProperty(key:String):*;
  static native private const kGetPaperHeight:uint = 1;
  static native private const kGetPaperWidth:uint = 3;
  static native private const kGetPageHeight:uint = 5;
  static native private const kGetPageWidth:uint = 7;

  static native private const kGetOrientation:uint = 9;
  static native private const kStart:uint = 100;
  static native private const kAddPage:uint = 101;
  static native private const kSend:uint = 102;
  [Version("10.1")]
  static native public final function get isSupported():Boolean;

  static native private final function _checkSupported():Boolean;
  static native private const kSetOrientation:uint = 10;
  static native private const kGetPrinter:uint = 11;
  static native private const kSetPrinter:uint = 12;
  static native private const kGetJobName:uint = 13;

  static native private const kSetJobName:uint = 14;
  static native private const kGetPaperArea:uint = 15;
  static native private const kGetPrintableArea:uint = 17;
  static native private const kGetMaxPixelsPerInch:uint = 19;
  static native private const kGetIsColor:uint = 21;

  static native private const kGetFirstPage:uint = 23;
  static native private const kGetLastPage:uint = 25;
  static native private const kGetCopies:uint = 27;
  static native private const kSetCopies:uint = 28;
  static native private const kShowPageSetupDialog:uint = 103;

  static native private const kSelectPaperSize:uint = 104;
  static native private const kStart2:uint = 105;
  static native private const kTerminate:uint = 106;
  [Version("air2.0")]
  static native public final function get supportsPageSetupDialog():Boolean;
  [Version("air2.0")]
  static native public final function get active():Boolean;

  static native private final function get activeInternal():Boolean;
  [Version("air2.0")]
  static native public final function get printers():Vector.<String>;
}


public final class flash.xml.XMLNodeType extends Object
{
  native public function XMLNodeType():*;
  static native public const ELEMENT_NODE:uint = 1;
  static native public const TEXT_NODE:uint = 3;

  [Inspectable(environment="none")]
  static native public const CDATA_NODE:uint = 4;
  [Inspectable(environment="none")]
  static native public const PROCESSING_INSTRUCTION_NODE:uint = 7;
  [Inspectable(environment="none")]
  static native public const COMMENT_NODE:uint = 8;
  [Inspectable(environment="none")]
  static native public const DOCUMENT_TYPE_NODE:uint = 10;
  [Inspectable(environment="none")]
  static native public const XML_DECLARATION:uint = 13;
}


[native(cls="TransformGestureEventClass",instance="TransformGestureEventObject",methods="auto")]
[Version("10.1")]
public class flash.events.TransformGestureEvent extends flash.events.GestureEvent
{

  native public function TransformGestureEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,phase:String = null,localX:Number = 0,localY:Number = 0,scaleX:Number = 1.0,scaleY:Number = 1.0,rotation:Number = 0,offsetX:Number = 0,offsetY:Number = 0,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,commandKey:Boolean = false,controlKey:Boolean = false):*;
  native private var m_scaleX:Number;
  native private var m_scaleY:Number;
  native private var m_rotation:Number;
  native private var m_offsetX:Number;

  native private var m_offsetY:Number;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get scaleX():Number;
  native public function set scaleX(value:Number):void;

  native public function get scaleY():Number;
  native public function set scaleY(value:Number):void;
  native public function get rotation():Number;
  native public function set rotation(value:Number):void;
  native public function get offsetX():Number;

  native public function set offsetX(value:Number):void;
  native public function get offsetY():Number;
  native public function set offsetY(value:Number):void;
  static native public const GESTURE_ZOOM:String = "gestureZoom";
  static native public const GESTURE_PAN:String = "gesturePan";

  static native public const GESTURE_ROTATE:String = "gestureRotate";
  static native public const GESTURE_SWIPE:String = "gestureSwipe";
}


[native(cls="GroupspecClass",instance="GroupspecObject",methods="auto")]
[API("667")]
public class flash.net.GroupSpecifier extends Object
{
  native public function GroupSpecifier(name:String):*;
  native public function makeUnique():void;
  native public function get routingEnabled():Boolean;

  native public function set routingEnabled(enabled:Boolean):void;
  native public function get multicastEnabled():Boolean;
  native public function set multicastEnabled(enabled:Boolean):void;
  native public function get objectReplicationEnabled():Boolean;
  native public function set objectReplicationEnabled(enabled:Boolean):void;

  native public function get postingEnabled():Boolean;
  native public function set postingEnabled(enabled:Boolean):void;
  native private function clearIPMulticastAddresses():void;
  native private function clearBootstrapPeers():void;
  native public function get peerToPeerDisabled():Boolean;

  native public function set peerToPeerDisabled(disable:Boolean):void;
  native public function get ipMulticastMemberUpdatesEnabled():Boolean;
  native public function set ipMulticastMemberUpdatesEnabled(enabled:Boolean):void;
  native public function setPublishPassword(password:String = null,salt:String = null):void;
  native public function setPostingPassword(password:String = null,salt:String = null):void;

  native public function get serverChannelEnabled():Boolean;
  native public function set serverChannelEnabled(enabled:Boolean):void;
  native public function addBootstrapPeer(peerID:String):void;
  native public function addIPMulticastAddress(address:String,port:* = null,source:String = null):void;
  native public function toString():String;

  native public function groupspecWithoutAuthorizations():String;
  native private function groupspecExtras():String;
  native public function groupspecWithAuthorizations():String;
  native public function authorizations():String;
  [API("684")]
  native public function get minGroupspecVersion():int;

  [API("684")]
  native public function set minGroupspecVersion(version:int):void;
  native private var m_routing:String;
  native private var m_multicast:String;
  native private var m_objectReplication:String;
  native private var m_posting:String;

  native private var m_publishAuthHash:String;
  native private var m_postingAuthHash:String;
  native private var m_ipMulticastAddresses:String;
  native private var m_bootstrapPeers:String;
  native private var m_openServerChannel:String;

  native private var m_disablePeerToPeer:String;
  native private var m_tag:String;
  native private var m_unique:String;
  native private var m_publishAuth:String;
  native private var m_postingAuth:String;

  native private var m_ipMulticastMemberUpdates:String;
  native private var m_minGroupspecVersion:int;
  native private function get swfVersion():int;
  static native public final function encodePostingAuthorization(password:String):String;
  static native public final function encodePublishAuthorization(password:String):String;

  static native public final function encodeIPMulticastAddressSpec(address:String,port:* = null,source:String = null):String;
  static native public final function encodeBootstrapPeerIDSpec(peerID:String):String;
  [API("684")]
  static native public final function get maxSupportedGroupspecVersion():int;
  static native private final function SaltedSHA256(salt:String,bytes:flash.utils.ByteArray):String;
  static native private final function encodeIPMulticastAddress(address:String,port:*,source:String):String;

  static native private final function hexByte(byte:uint):String;
  static native private final function vlu(num:uint):String;
  static native private final function toOption(optionID:uint,hexBytes:String):String;
  static native private final function inet_ptohex4(address:String,port:* = null):String;
  static native private final function inet_ptohex6(address:String,port:* = null):String;

  static native private final function byteArrayToHex(bytes:flash.utils.ByteArray):String;
  static native private final function stringToBytes(str:String):flash.utils.ByteArray;
  static native private final function SHA256(arr:flash.utils.ByteArray):String;
  static native private final function calcSHA256Digest(input:flash.utils.ByteArray):String;
  static native private final function GetCryptoRandomString(length:uint):String;
}


public class flash.events.DRMLicenseRequestEvent extends flash.events.Event
{

  native public function DRMLicenseRequestEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,inServerURL:String = null):*;
  native private var m_serverURL:String;
  native public override function clone():flash.events.Event;
  native public function get serverURL():String;
  native public function set serverURL(value:String):void;

  static native public const LICENSE_REQUEST:String = "licenseRequest";
}


public final class flash.system.SecurityPanel extends Object
{
  native public function SecurityPanel():*;
  static native public const DEFAULT:String = "default";
  static native public const PRIVACY:String = "privacy";
  static native public const LOCAL_STORAGE:String = "localStorage";

  static native public const MICROPHONE:String = "microphone";
  static native public const CAMERA:String = "camera";
  static native public const DISPLAY:String = "display";
  static native public const SETTINGS_MANAGER:String = "settingsManager";
}


[native(cls="CollatorClass",instance="CollatorObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.Collator extends Object
{
  native public function Collator(requestedLocaleIDName:String,initialMode:String = "sorting"):*;

  native private function ctor(requestedLocaleIDName:String,initialMode:String):void;
  native public function get ignoreCase():Boolean;
  native public function set ignoreCase(value:Boolean):void;
  native public function get ignoreDiacritics():Boolean;
  native public function set ignoreDiacritics(value:Boolean):void;

  native public function get ignoreKanaType():Boolean;
  native public function set ignoreKanaType(value:Boolean):void;
  native public function get ignoreSymbols():Boolean;
  native public function set ignoreSymbols(value:Boolean):void;
  native public function get ignoreCharacterWidth():Boolean;

  native public function set ignoreCharacterWidth(value:Boolean):void;
  native public function get numericComparison():Boolean;
  native public function set numericComparison(value:Boolean):void;
  native public function compare(string1:String,string2:String):int;
  native public function equals(string1:String,string2:String):Boolean;

  native public function get lastOperationStatus():String;
  native public function get actualLocaleIDName():String;
  native public function get requestedLocaleIDName():String;
  static native public final function getAvailableLocaleIDNames():Vector.<String>;
}


[native(cls="GraphicsClass",gc="exact",instance="GraphicsObject",methods="auto",construct="native")]
public final class flash.display.Graphics extends Object
{
  native public function Graphics():*;

  native public function clear():void;
  native public function beginFill(color:uint,alpha:Number = 1.0):void;
  native public function beginGradientFill(type:String,colors:Array,alphas:Array,ratios:Array,matrix:flash.geom.Matrix = null,spreadMethod:String = "pad",interpolationMethod:String = "rgb",focalPointRatio:Number = 0):void;
  native public function beginBitmapFill(bitmap:flash.display.BitmapData,matrix:flash.geom.Matrix = null,repeat:Boolean = true,smooth:Boolean = false):void;
  [Version("10")]
  native public function beginShaderFill(shader:flash.display.Shader,matrix:flash.geom.Matrix = null):void;

  native public function lineGradientStyle(type:String,colors:Array,alphas:Array,ratios:Array,matrix:flash.geom.Matrix = null,spreadMethod:String = "pad",interpolationMethod:String = "rgb",focalPointRatio:Number = 0):void;
  native public function lineStyle(thickness:Number = 0,color:uint = 0,alpha:Number = 1.0,pixelHinting:Boolean = false,scaleMode:String = "normal",caps:String = null,joints:String = null,miterLimit:Number = 3):void;
  native public function drawRect(x:Number,y:Number,width:Number,height:Number):void;
  native public function drawRoundRect(x:Number,y:Number,width:Number,height:Number,ellipseWidth:Number,ellipseHeight:Number = 0):void;
  [Inspectable(environment="none")]
  native public function drawRoundRectComplex(x:Number,y:Number,width:Number,height:Number,topLeftRadius:Number,topRightRadius:Number,bottomLeftRadius:Number,bottomRightRadius:Number):void;

  native public function drawCircle(x:Number,y:Number,radius:Number):void;
  native public function drawEllipse(x:Number,y:Number,width:Number,height:Number):void;
  native public function moveTo(x:Number,y:Number):void;
  native public function lineTo(x:Number,y:Number):void;
  native public function curveTo(controlX:Number,controlY:Number,anchorX:Number,anchorY:Number):void;

  [API("674")]
  native public function cubicCurveTo(controlX1:Number,controlY1:Number,controlX2:Number,controlY2:Number,anchorX:Number,anchorY:Number):void;
  native public function endFill():void;
  [Version("10")]
  native public function copyFrom(sourceGraphics:Graphics):void;
  [Version("10")]
  native public function lineBitmapStyle(bitmap:flash.display.BitmapData,matrix:flash.geom.Matrix = null,repeat:Boolean = true,smooth:Boolean = false):void;
  [Version("10")]
  native public function lineShaderStyle(shader:flash.display.Shader,matrix:flash.geom.Matrix = null):void;

  [Version("10")]
  native public function drawPath(commands:Vector.<int>,data:Vector.<Number>,winding:String = "evenOdd"):void;
  [Version("10")]
  native public function drawTriangles(vertices:Vector.<Number>,indices:Vector.<int> = null,uvtData:Vector.<Number> = null,culling:String = "none"):void;
  native private function drawPathObject(path:flash.display.IGraphicsPath):void;
  native private function beginFillObject(fill:flash.display.IGraphicsFill):void;
  native private function beginStrokeObject(istroke:flash.display.IGraphicsStroke):void;

  [Version("10")]
  native public function drawGraphicsData(graphicsData:Vector.<flash.display.IGraphicsData>):void;
  native private function nativeGetGraphicsData(data:Vector.<flash.display.IGraphicsData>,recurse:Boolean):void;
  [API("686")]
  native public function readGraphicsData(recurse:Boolean = true):Vector.<flash.display.IGraphicsData>;
}


[native(cls="ContextMenuItemClass",gc="exact",instance="ContextMenuItemObject",methods="auto")]
[Event(name="menuItemSelect",type="flash.events.ContextMenuEvent")]
public final class flash.ui.ContextMenuItem extends flash.display.NativeMenuItem
{
  native public function ContextMenuItem(caption:String,separatorBefore:Boolean = false,enabled:Boolean = true,visible:Boolean = true):*;
  native public function get caption():String;

  native public function set caption(value:String):void;
  native public function get separatorBefore():Boolean;
  native public function set separatorBefore(value:Boolean):void;
  native public function get visible():Boolean;
  native public function set visible(value:Boolean):void;

  native private function cut(ev:flash.events.ContextMenuEvent):void;
  native private function copy(ev:flash.events.ContextMenuEvent):void;
  native private function paste(ev:flash.events.ContextMenuEvent):void;
  native private function clear(ev:flash.events.ContextMenuEvent):void;
  native private function selectAll(ev:flash.events.ContextMenuEvent):void;

  native private function openLink(event:flash.events.ContextMenuEvent):void;
  native private function copyLink(event:flash.events.ContextMenuEvent):void;
  native private function nativeClear():void;
  native private function nativeCopy():void;
  native private function nativeCut():void;

  native private function nativePaste():void;
  native private function nativeSelectAll():void;
  native public override function clone():flash.display.NativeMenuItem;
  static native private final function _getMenuString(label:String):String;
  static native internal final function systemCutMenuItem():ContextMenuItem;

  static native internal final function systemCopyMenuItem():ContextMenuItem;
  static native internal final function systemPasteMenuItem():ContextMenuItem;
  static native private final function _setUserRequestingPaste(requesting:Boolean):void;
  static native internal final function systemClearMenuItem():ContextMenuItem;
  static native internal final function systemSelectAllMenuItem():ContextMenuItem;

  static native internal final function systemOpenLinkMenuItem():ContextMenuItem;
  static native internal final function systemCopyLinkMenuItem():ContextMenuItem;
  static native private final function _isTextEditor(obj:flash.display.InteractiveObject):Boolean;
}


[API("661")]
public class flash.errors.SQLError extends Error
{
  native public function SQLError(operation:String,details:String = "",message:String = "",id:int = 0,detailID:int = -1,detailArgs:Array = null):*;
  native public function get details():String;

  native public function get detailID():int;
  native public function get detailArguments():Array;
  native public function get operation():String;
  native public function toString():String;
  native private var _details:String;

  native private var _detailID:int;
  native private var _detailArgs:Array;
  native private var _operation:String;
}


public class flash.events.DataEvent extends flash.events.TextEvent
{
  native public function DataEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,data:String = ""):*;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native public function get data():String;
  native public function set data(value:String):void;
  static native public const DATA:String = "data";
  static native public const UPLOAD_COMPLETE_DATA:String = "uploadCompleteData";
}


[native(cls="FileReferenceListClass",instance="FileReferenceListObject",methods="auto")]
[Event(name="select",type="flash.events.Event")]
[Event(name="cancel",type="flash.events.Event")]
public class flash.net.FileReferenceList extends flash.events.EventDispatcher
{

  native public function FileReferenceList():*;
  native public function get fileList():Array;
  native public function browse(typeFilter:Array = null):Boolean;
}


[native(cls="Utils3DClass",methods="auto",construct="none")]
[Version("10")]
public class flash.geom.Utils3D extends Object
{
  native public function Utils3D():*;
  static native public final function projectVector(m:flash.geom.Matrix3D,v:flash.geom.Vector3D):flash.geom.Vector3D;

  static native public final function projectVectors(m:flash.geom.Matrix3D,verts:Vector.<Number>,projectedVerts:Vector.<Number>,uvts:Vector.<Number>):void;
  static native public final function pointTowards(percent:Number,mat:flash.geom.Matrix3D,pos:flash.geom.Vector3D,at:flash.geom.Vector3D = null,up:flash.geom.Vector3D = null):flash.geom.Matrix3D;
}


public final class flash.text.TextColorType extends Object
{
  native public function TextColorType():*;
  static native public const DARK_COLOR:String = "dark";
  static native public const LIGHT_COLOR:String = "light";
}


[API("669")]
[native(cls="ExtensionContextClass",instance="ExtensionContextObject",methods="auto")]
[Event(name="status",type="flash.events.StatusEvent")]
public final class flash.external.ExtensionContext extends flash.events.EventDispatcher
{

  native public function ExtensionContext():*;
  native public function call(functionName:String,... rest):Object;
  native private function _call(functionName:String,arguments:Array):Object;
  native public function get actionScriptData():Object;
  native public function set actionScriptData(object:Object):void;

  native public function dispose():void;
  native internal function _disposed():Boolean;
  native internal function getActionScriptData():Object;
  native internal function setActionScriptData(object:Object):void;
  static native public final function createExtensionContext(extensionID:String,contextType:String):ExtensionContext;

  static native private final function _createExtensionContext(extensionID:String,contextType:String):ExtensionContext;
  static native public final function getExtensionDirectory(extensionID:String):flash.filesystem.File;
  static native private final function _getExtensionDirectory(extensionID:String):String;
}


public final class flash.ui.KeyLocation extends Object
{
  native public function KeyLocation():*;
  static native public const STANDARD:uint = 0;

  static native public const LEFT:uint = 1;
  static native public const RIGHT:uint = 2;
  static native public const NUM_PAD:uint = 3;
  [API("669")]
  static native public const D_PAD:uint = 4;
}


[API("661")]
public class flash.data.SQLTriggerSchema extends flash.data.SQLSchema
{
  native public function SQLTriggerSchema(database:String,name:String,sql:String,table:String):*;

  native public function get table():String;
  native private var _table:String;
}


[API("661")]
[native(cls="SQLStatementClass",instance="SQLStatementObject",methods="auto")]
[Event(name="error",type="flash.events.SQLErrorEvent")]
[Event(name="result",type="flash.events.SQLEvent")]
public class flash.data.SQLStatement extends flash.events.EventDispatcher
{
  native public function SQLStatement():*;
  native public function get executing():Boolean;
  native public function get sqlConnection():flash.data.SQLConnection;

  native public function set sqlConnection(value:flash.data.SQLConnection):void;
  native public function get itemClass():Class;
  native public function set itemClass(value:Class):void;
  native public function get parameters():Object;
  native public function get text():String;

  native public function set text(value:String):void;
  native public function cancel():void;
  native public function clearParameters():void;
  native public function execute(prefetch:int = -1,responder:flash.net.Responder = null):void;
  native public function getResult():flash.data.SQLResult;

  native public function next(prefetch:int = -1,responder:flash.net.Responder = null):void;
  native private function checkAllowed():void;
  native private function checkComplete():void;
  native private function checkReady():void;
  native private function get prepared():Boolean;

  native private function internalCancel():void;
  native private function internalExecute(sql:String,params:Object,mustFinalize:Boolean,prefetch:int,responder:flash.net.Responder):void;
  native private function internalNext(prefecth:int,responder:flash.net.Responder):void;
  native private function isSQLComplete(sql:String):Boolean;
  native private function isExecuting():Boolean;

  native private var _sql:String = "";
  native private var _params:Object;
  native private var _finalize:Boolean = false;
}


public final class flash.display.BitmapDataChannel extends Object
{
  native public function BitmapDataChannel():*;
  static native public const RED:uint = 1;

  static native public const GREEN:uint = 2;
  static native public const BLUE:uint = 4;
  static native public const ALPHA:uint = 8;
}


[native(cls="StaticTextClass",gc="exact",instance="StaticTextObject",methods="auto",construct="restricted-check")]
public final class flash.text.StaticText extends flash.display.DisplayObject
{
  native public function StaticText():*;
  native public function get text():String;
}


public class flash.events.FocusEvent extends flash.events.Event
{

  native public function FocusEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,relatedObject:flash.display.InteractiveObject = null,shiftKey:Boolean = false,keyCode:uint = 0,direction:String = "none"):*;
  native private var m_relatedObject:flash.display.InteractiveObject;
  native private var m_shiftKey:Boolean;
  native private var m_keyCode:uint;
  native private var m_isRelatedObjectInaccessible:Boolean;

  native public override function clone():flash.events.Event;
  native public function get relatedObject():flash.display.InteractiveObject;
  native public function set relatedObject(value:flash.display.InteractiveObject):void;
  native public function get shiftKey():Boolean;
  native public function set shiftKey(value:Boolean):void;

  native public function get keyCode():uint;
  native public function set keyCode(value:uint):void;
  [Version("10")]
  native public function get isRelatedObjectInaccessible():Boolean;
  [Version("10")]
  native public function set isRelatedObjectInaccessible(value:Boolean):void;
  native private var m_direction:String;

  native public override function toString():String;
  native public function get direction():String;
  native public function set direction(value:String):void;
  static native public const FOCUS_IN:String = "focusIn";
  static native public const FOCUS_OUT:String = "focusOut";

  static native public const KEY_FOCUS_CHANGE:String = "keyFocusChange";
  static native public const MOUSE_FOCUS_CHANGE:String = "mouseFocusChange";
}


public final class flash.net.SharedObjectFlushStatus extends Object
{
  native public function SharedObjectFlushStatus():*;
  static native public const FLUSHED:String = "flushed";
  static native public const PENDING:String = "pending";
}


public final class flash.display.BlendMode extends Object
{

  native public function BlendMode():*;
  static native public const NORMAL:String = "normal";
  static native public const LAYER:String = "layer";
  static native public const MULTIPLY:String = "multiply";
  static native public const SCREEN:String = "screen";

  static native public const LIGHTEN:String = "lighten";
  static native public const DARKEN:String = "darken";
  static native public const ADD:String = "add";
  static native public const SUBTRACT:String = "subtract";
  static native public const DIFFERENCE:String = "difference";

  static native public const INVERT:String = "invert";
  static native public const OVERLAY:String = "overlay";
  static native public const HARDLIGHT:String = "hardlight";
  static native public const ALPHA:String = "alpha";
  static native public const ERASE:String = "erase";

  static native public const SHADER:String = "shader";
}


[Version("10")]
public final class flash.display.GraphicsPath extends Object
  implements flash.display.IGraphicsPath,flash.display.IGraphicsData
{
  native public function GraphicsPath(commands:Vector.<int> = null,data:Vector.<Number> = null,winding:String = "evenOdd"):*;
  native public var commands:Vector.<int>;
  native public var data:Vector.<Number>;
  native public function get winding():String;

  native public function set winding(value:String):*;
  native private var _winding:String;
  native public function moveTo(x:Number,y:Number):void;
  native public function lineTo(x:Number,y:Number):void;
  native public function curveTo(controlX:Number,controlY:Number,anchorX:Number,anchorY:Number):void;

  [API("674")]
  native public function cubicCurveTo(controlX1:Number,controlY1:Number,controlX2:Number,controlY2:Number,anchorX:Number,anchorY:Number):void;
  native public function wideLineTo(x:Number,y:Number):void;
  native public function wideMoveTo(x:Number,y:Number):void;
}


public class flash.events.HTTPStatusEvent extends flash.events.Event
{
  native public function HTTPStatusEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,status:int = 0,redirected:Boolean = false):*;
  native private var m_status:int;

  native private var m_responseHeaders:Array;
  native private var m_responseUrl:String;
  native private var m_redirected:Boolean;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native public function get status():int;
  [API("661")]
  native public function get responseURL():String;
  [API("661")]
  native public function set responseURL(value:String):void;
  [API("661")]
  native public function get responseHeaders():Array;
  [API("661")]
  native public function set responseHeaders(value:Array):void;

  [API("690")]
  native public function get redirected():Boolean;
  [API("690")]
  native public function set redirected(value:Boolean):void;
  static native public const HTTP_STATUS:String = "httpStatus";
  [API("661")]
  static native public const HTTP_RESPONSE_STATUS:String = "httpResponseStatus";
}


[native(cls="TextBlockClass",instance="TextBlockObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.TextBlock extends Object
{
  native public function TextBlock(content:flash.text.engine.ContentElement = null,tabStops:Vector.<flash.text.engine.TabStop> = null,textJustifier:flash.text.engine.TextJustifier = null,lineRotation:String = "rotate0",baselineZero:String = "roman",bidiLevel:int = 0,applyNonLinearFontScaling:Boolean = true,baselineFontDescription:flash.text.engine.FontDescription = null,baselineFontSize:Number = 12.0):*;

  native public var userData:*;
  native public function get applyNonLinearFontScaling():Boolean;
  native public function set applyNonLinearFontScaling(value:Boolean):void;
  native public function get baselineFontDescription():flash.text.engine.FontDescription;
  native public function set baselineFontDescription(value:flash.text.engine.FontDescription):void;

  native public function get baselineFontSize():Number;
  native public function set baselineFontSize(value:Number):void;
  native public function get baselineZero():String;
  native public function set baselineZero(value:String):void;
  native public function get content():flash.text.engine.ContentElement;

  native public function set content(value:flash.text.engine.ContentElement):void;
  native public function get bidiLevel():int;
  native public function set bidiLevel(value:int):void;
  native public function get firstInvalidLine():flash.text.engine.TextLine;
  native public function get firstLine():flash.text.engine.TextLine;

  native public function get lastLine():flash.text.engine.TextLine;
  native public function get textJustifier():flash.text.engine.TextJustifier;
  native public function set textJustifier(value:flash.text.engine.TextJustifier):void;
  native private function getTextJustifier():flash.text.engine.TextJustifier;
  native private function setTextJustifier(value:flash.text.engine.TextJustifier):void;

  native public function get textLineCreationResult():String;
  native public function get lineRotation():String;
  native public function set lineRotation(value:String):void;
  native public function get tabStops():Vector.<flash.text.engine.TabStop>;
  native public function set tabStops(value:Vector.<flash.text.engine.TabStop>):void;

  native private function getTabStops():Vector.<flash.text.engine.TabStop>;
  native private function setTabStops(value:Vector.<flash.text.engine.TabStop>):void;
  native public function findNextAtomBoundary(afterCharIndex:int):int;
  native public function findPreviousAtomBoundary(beforeCharIndex:int):int;
  native public function findNextWordBoundary(afterCharIndex:int):int;

  native public function findPreviousWordBoundary(beforeCharIndex:int):int;
  native public function getTextLineAtCharIndex(charIndex:int):flash.text.engine.TextLine;
  native public function createTextLine(previousLine:flash.text.engine.TextLine = null,width:Number = 1000000,lineOffset:Number = 0.0,fitSomething:Boolean = false):flash.text.engine.TextLine;
  [Version("10.1")]
  native public function recreateTextLine(textLine:flash.text.engine.TextLine,previousLine:flash.text.engine.TextLine = null,width:Number = 1000000,lineOffset:Number = 0.0,fitSomething:Boolean = false):flash.text.engine.TextLine;
  native private function DoCreateTextLine(previousLine:flash.text.engine.TextLine,width:Number,lineOffset:Number = 0.0,fitSomething:Boolean = false,reuseLine:flash.text.engine.TextLine = null):flash.text.engine.TextLine;

  [Version("10.1")]
  native public function releaseLineCreationData():void;
  native public function releaseLines(firstLine:flash.text.engine.TextLine,lastLine:flash.text.engine.TextLine):void;
  native public function dump():String;
}


[Version("10")]
public final class flash.geom.Orientation3D extends Object
{
  native public function Orientation3D():*;
  static native public const EULER_ANGLES:String = "eulerAngles";

  static native public const AXIS_ANGLE:String = "axisAngle";
  static native public const QUATERNION:String = "quaternion";
}


[native(cls="SystemClass",methods="auto",construct="none")]
public final class flash.system.System extends Object
{
  native public function System():*;
  static native private var theIME:flash.system.IME = null;
  static native public final function get ime():flash.system.IME;

  static native public final function setClipboard(string:String):void;
  static native public final function get totalMemory():uint;
  static native public final function get totalMemoryNumber():Number;
  static native public final function get freeMemory():Number;
  static native public final function get privateMemory():Number;

  [API("674")]
  static native public final function get processCPUUsage():Number;
  static native public final function get useCodePage():Boolean;
  static native public final function set useCodePage(value:Boolean):void;
  [Inspectable(environment="none")]
  static native public final function get vmVersion():String;
  static native public final function pause():void;

  static native public final function resume():void;
  static native public final function exit(code:uint):void;
  static native public final function gc():void;
  static native public final function pauseForGCIfCollectionImminent(imminence:Number = 0.75):void;
  [API("667")]
  static native public final function disposeXML(node:XML):void;
}


[native(cls="BlurFilterClass",instance="BlurFilterObject",methods="auto")]
public final class flash.filters.BlurFilter extends flash.filters.BitmapFilter
{

  native public function BlurFilter(blurX:Number = 4.0,blurY:Number = 4.0,quality:int = 1):*;
  native public function get blurX():Number;
  native public function set blurX(value:Number):void;
  native public function get blurY():Number;
  native public function set blurY(value:Number):void;

  native public function get quality():int;
  native public function set quality(value:int):void;
  native public override function clone():flash.filters.BitmapFilter;
}


[API("670")]
public final class flash.media.StageVideoAvailability extends Object
{
  native public function StageVideoAvailability():*;
  static native public const AVAILABLE:String = "available";

  static native public const UNAVAILABLE:String = "unavailable";
}


[API("663")]
public final class flash.security.ReferencesValidationSetting extends Object
{
  native public function ReferencesValidationSetting():*;
  static native public const VALID_IDENTITY:String = "validIdentity";
  static native public const VALID_OR_UNKNOWN_IDENTITY:String = "validOrUnknownIdentity";
  static native public const NEVER:String = "never";
}


[API("690")]
public class flash.events.DRMReturnVoucherErrorEvent extends flash.events.ErrorEvent
{

  native public function DRMReturnVoucherErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,inDetail:String = "",inErrorID:int = 0,inSubErrorID:int = 0,inServerURL:String = null,inLicenseID:String = null,inPolicyID:String = null):*;
  native public override function clone():flash.events.Event;
  native public function get subErrorID():int;
  native public function set subErrorID(value:int):void;
  native public function get serverURL():String;

  native public function set serverURL(value:String):void;
  native public function get licenseID():String;
  native public function set licenseID(value:String):void;
  native public function get policyID():String;
  native public function set policyID(value:String):void;

  native private var m_subErrorID:int;
  native private var m_serverURL:String;
  native private var m_licenseID:String;
  native private var m_policyID:String;
  static native public const RETURN_VOUCHER_ERROR:String = "returnVoucherError";
}


[native(cls="CapabilitiesClass",gc="exact",methods="auto",construct="none")]
public final class flash.system.Capabilities extends Object
{

  native public function Capabilities():*;
  static native public final function get isEmbeddedInAcrobat():Boolean;
  static native public final function get hasEmbeddedVideo():Boolean;
  static native public final function get hasAudio():Boolean;
  static native public final function get avHardwareDisable():Boolean;

  static native public final function get hasAccessibility():Boolean;
  static native public final function get hasAudioEncoder():Boolean;
  static native public final function get hasMP3():Boolean;
  static native public final function get hasPrinting():Boolean;
  static native public final function get hasScreenBroadcast():Boolean;

  static native public final function get hasScreenPlayback():Boolean;
  static native public final function get hasStreamingAudio():Boolean;
  static native public final function get hasStreamingVideo():Boolean;
  static native public final function get hasVideoEncoder():Boolean;
  static native public final function get isDebugger():Boolean;

  static native public final function get localFileReadDisable():Boolean;
  static native public final function get language():String;
  static native public final function get manufacturer():String;
  static native public final function get os():String;
  static native public final function get cpuArchitecture():String;

  static native public final function get playerType():String;
  static native public final function get serverString():String;
  static native public final function get version():String;
  static native public final function get screenColor():String;
  static native public final function get pixelAspectRatio():Number;

  static native public final function get screenDPI():Number;
  static native public final function get screenResolutionX():Number;
  static native public final function get screenResolutionY():Number;
  [Version("10.1")]
  static native public final function get touchscreenType():String;
  static native public final function get hasIME():Boolean;

  static native public final function get hasTLS():Boolean;
  [Version("10")]
  static native public final function get maxLevelIDC():String;
  [Version("10.0.32")]
  static native public final function get supports32BitProcesses():Boolean;
  [Version("10.0.32")]
  static native public final function get supports64BitProcesses():Boolean;
  static native public final function get _internal():uint;

  [API("674")]
  static native public final function hasMultiChannelAudio(type:String):Boolean;
  static native public final function get languages():Array;
}


[native(cls="ApplicationDomainClass",gc="exact",instance="ApplicationDomainObject",methods="auto")]
public final class flash.system.ApplicationDomain extends Object
{
  native public function ApplicationDomain(parentDomain:ApplicationDomain = null):*;
  native private function ctor(parentDomain:ApplicationDomain):void;
  native public function get parentDomain():ApplicationDomain;

  native public function getDefinition(name:String):Object;
  native public function hasDefinition(name:String):Boolean;
  native public function getQualifiedDefinitionNames():Vector.<String>;
  [API("663")]
  native public function get domainMemory():flash.utils.ByteArray;
  [API("663")]
  native public function set domainMemory(mem:flash.utils.ByteArray):*;

  static native public final function get currentDomain():ApplicationDomain;
  [API("663")]
  static native public final function get MIN_DOMAIN_MEMORY_LENGTH():uint;
}


public class flash.events.VideoTextureEvent extends flash.events.Event
{
  native public function VideoTextureEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,status:String = null,colorSpace:String = null):*;
  native private var m_status:String;
  native private var m_colorSpace:String;

  [API("705")]
  native public function get status():String;
  [API("705")]
  native public function get colorSpace():String;
  [API("705")]
  native public const codecInfo:String;
  [API("705")]
  static native public const RENDER_STATE:String = "renderState";
}


public final class flash.display.StageAlign extends Object
{
  native public function StageAlign():*;

  static native public const TOP:String = "T";
  static native public const LEFT:String = "L";
  static native public const BOTTOM:String = "B";
  static native public const RIGHT:String = "R";
  static native public const TOP_LEFT:String = "TL";

  static native public const TOP_RIGHT:String = "TR";
  static native public const BOTTOM_LEFT:String = "BL";
  static native public const BOTTOM_RIGHT:String = "BR";
}


[API("686")]
public final class flash.display3D.Context3DMipFilter extends Object
{
  native public function Context3DMipFilter():*;
  static native public const MIPNONE:String = "mipnone";

  static native public const MIPNEAREST:String = "mipnearest";
  static native public const MIPLINEAR:String = "miplinear";
}


public final class flash.text.TextFieldType extends Object
{
  native public function TextFieldType():*;
  static native public const INPUT:String = "input";
  static native public const DYNAMIC:String = "dynamic";
}


[Version("10")]
public final class flash.display.GraphicsStroke extends Object
  implements flash.display.IGraphicsStroke,flash.display.IGraphicsData
{

  native public function GraphicsStroke(thickness:Number = NaN,pixelHinting:Boolean = false,scaleMode:String = "normal",caps:String = "none",joints:String = "round",miterLimit:Number = 3.0,fill:flash.display.IGraphicsFill = null):*;
  native public var thickness:Number;
  native public var pixelHinting:Boolean;
  native public function get caps():String;
  native public function set caps(value:String):void;

  native private var _caps:String;
  native public function get joints():String;
  native public function set joints(value:String):*;
  native private var _joints:String;
  native public var miterLimit:Number;

  native public function get scaleMode():String;
  native public function set scaleMode(value:String):void;
  native private var _scaleMode:String;
  native public var fill:flash.display.IGraphicsFill;
}


[Version("10.1")]
public final class flash.globalization.DateTimeStyle extends Object
{
  native public function DateTimeStyle():*;

  static native public const CUSTOM:String = "custom";
  static native public const LONG:String = "long";
  static native public const MEDIUM:String = "medium";
  static native public const SHORT:String = "short";
  static native public const NONE:String = "none";
}


[API("667")]
public class flash.events.DRMAuthenticationErrorEvent extends flash.events.ErrorEvent
{

  native public function DRMAuthenticationErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,inDetail:String = "",inErrorID:int = 0,inSubErrorID:int = 0,inServerURL:String = null,inDomain:String = null):*;
  native public override function clone():flash.events.Event;
  native public function get subErrorID():int;
  native public function set subErrorID(value:int):void;
  native public function get serverURL():String;

  native public function set serverURL(value:String):void;
  native public function get domain():String;
  native public function set domain(value:String):void;
  native private var m_subErrorID:int;
  native private var m_serverURL:String;

  native private var m_domain:String;
  static native public const AUTHENTICATION_ERROR:String = "authenticationError";
}


[API("661")]
public class flash.data.SQLSchemaResult extends Object
{
  native public function SQLSchemaResult(tables:Array,views:Array,indices:Array,triggers:Array):*;
  native public function get indices():Array;
  native public function get tables():Array;

  native public function get triggers():Array;
  native public function get views():Array;
  native private var _indices:Array;
  native private var _tables:Array;
  native private var _triggers:Array;

  native private var _views:Array;
}


[Version("10.1")]
public final class flash.net.NetGroupReplicationStrategy extends Object
{
  native public function NetGroupReplicationStrategy():*;
  static native public const RAREST_FIRST:String = "rarestFirst";
  static native public const LOWEST_FIRST:String = "lowestFirst";
}


[ExcludeClass]
public class flash.events.NetFilterEvent extends flash.events.Event
{
  native public function NetFilterEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,header:flash.utils.ByteArray = null,data:flash.utils.ByteArray = null):*;

  native public var header:flash.utils.ByteArray;
  native public var data:flash.utils.ByteArray;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
}


[native(cls="Vector3DClass",instance="Vector3DObject",methods="auto")]
[Version("10")]
public class flash.geom.Vector3D extends Object
{
  native public function Vector3D(x:Number = 0.0,y:Number = 0.0,z:Number = 0.0,w:Number = 0.0):*;

  native public var x:Number;
  native public var y:Number;
  native public var z:Number;
  native public var w:Number;
  native public function clone():Vector3D;

  native public function dotProduct(a:Vector3D):Number;
  native public function crossProduct(a:Vector3D):Vector3D;
  native public function get length():Number;
  native public function get lengthSquared():Number;
  native public function normalize():Number;

  native public function scaleBy(s:Number):void;
  native public function incrementBy(a:Vector3D):void;
  native public function decrementBy(a:Vector3D):void;
  native public function add(a:Vector3D):Vector3D;
  native public function subtract(a:Vector3D):Vector3D;

  native public function negate():void;
  native public function equals(toCompare:Vector3D,allFour:Boolean = false):Boolean;
  native public function nearEquals(toCompare:Vector3D,tolerance:Number,allFour:Boolean = false):Boolean;
  native public function project():void;
  native public function toString():String;

  [API("674")]
  native public function copyFrom(sourceVector3D:Vector3D):void;
  [API("674")]
  native public function setTo(xa:Number,ya:Number,za:Number):void;
  static native public const X_AXIS:Vector3D;
  static native public const Y_AXIS:Vector3D;
  static native public const Z_AXIS:Vector3D;

  static native public final function angleBetween(a:Vector3D,b:Vector3D):Number;
  static native public final function distance(pt1:Vector3D,pt2:Vector3D):Number;
}


[native(cls="ThrottleEventClass",gc="exact",instance="ThrottleEventObject",methods="auto")]
[API("676")]
public class flash.events.ThrottleEvent extends flash.events.Event
{
  native public function ThrottleEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,state:String = null,targetFrameRate:Number = 0):*;
  native public function get targetFrameRate():Number;
  native public function get state():String;

  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native private var m_targetFrameRate:Number;
  native private var m_state:String;
  static native public const THROTTLE:String = "throttle";
}


[native(cls="NetworkInfoClass",instance="NetworkInfoObject",methods="auto",construct="native")]
[Version("air2.0")]
[Event(name="networkChange",type="flash.events.Event")]
public class flash.net.NetworkInfo extends flash.events.EventDispatcher
{

  native public function NetworkInfo():*;
  native private function onNetworkChange(event:flash.events.Event):*;
  native public function findInterfaces():Vector.<flash.net.NetworkInterface>;
  static native public final function get isSupported():Boolean;
  static native public final function get networkInfo():NetworkInfo;

  static native private final function getInstance():NetworkInfo;
}


[API("661")]
public class flash.events.InvokeEvent extends flash.events.Event
{
  native public function InvokeEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,dir:flash.filesystem.File = null,argv:Array = null,reason:String = "standard"):*;
  native public override function clone():flash.events.Event;
  native public function get currentDirectory():flash.filesystem.File;
  native public function get arguments():Array;

  [API("664")]
  native public function get reason():String;
  native private var m_dir:flash.filesystem.File;
  native private var m_argv:Array;
  native private var m_reason:String;
  static native public const INVOKE:String = "invoke";
}


[API("669")]
public class flash.events.MediaEvent extends flash.events.Event
{

  native public function MediaEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,data:flash.media.MediaPromise = null):*;
  native private var m_data:flash.media.MediaPromise;
  native public function get data():flash.media.MediaPromise;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  static native public const COMPLETE:String = "complete";
  static native public const SELECT:String = "select";
}


[native(cls="LocaleIDClass",instance="LocaleIDObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.LocaleID extends Object
{
  native public function LocaleID(name:String):*;
  native private function ctor(name:String):void;
  native public function getLanguage():String;

  native public function getRegion():String;
  native public function getScript():String;
  native public function getVariant():String;
  native public function get name():String;
  native public function getKeysAndValues():Object;

  native public function get lastOperationStatus():String;
  native public function isRightToLeft():Boolean;
  static native public const DEFAULT:String = "i-default";
  static native public final function determinePreferredLocales(want:Vector.<String>,have:Vector.<String>,keyword:String = "userinterface"):Vector.<String>;
}


[Version("air2.0")]
public class flash.net.dns.MXRecord extends flash.net.dns.ResourceRecord
{
  native public function MXRecord():*;

  native private var _exchange:String = "";
  native public function get exchange():String;
  native public function set exchange(value:String):void;
  native private var _preference:int = 0;
  native public function get preference():int;

  native public function set preference(value:int):void;
}


[Version("10.1")]
public final class flash.events.GesturePhase extends Object
{
  native public function GesturePhase():*;
  static native public const BEGIN:String = "begin";
  static native public const UPDATE:String = "update";
  static native public const END:String = "end";

  static native public const ALL:String = "all";
}


[Version("10.1")]
public final class flash.globalization.DateTimeNameStyle extends Object
{
  native public function DateTimeNameStyle():*;
  static native public const FULL:String = "full";
  static native public const LONG_ABBREVIATION:String = "longAbbreviation";
  static native public const SHORT_ABBREVIATION:String = "shortAbbreviation";
}


[ExcludeClass]
public class flash.automation.MouseAutomationAction extends flash.automation.AutomationAction
{

  native public function MouseAutomationAction(type:String,stageX:Number = 0,stageY:Number = 0,delta:int = 0):*;
  native private var _stageX:Number = 0;
  native public function get stageX():Number;
  native public function set stageX(value:Number):void;
  native private var _stageY:Number = 0;

  native public function get stageY():Number;
  native public function set stageY(value:Number):void;
  native private var _delta:int = 0;
  native public function get delta():int;
  native public function set delta(value:int):void;

  static native public const MOUSE_DOWN:String = "mouseDown";
  static native public const MOUSE_MOVE:String = "mouseMove";
  static native public const MOUSE_UP:String = "mouseUp";
  static native public const MOUSE_WHEEL:String = "mouseWheel";
  static native public const MIDDLE_MOUSE_DOWN:String = "middleMouseDown";

  static native public const MIDDLE_MOUSE_UP:String = "middleMouseUp";
  static native public const RIGHT_MOUSE_DOWN:String = "rightMouseDown";
  static native public const RIGHT_MOUSE_UP:String = "rightMouseUp";
}


[API("686")]
public final class flash.display3D.Context3DWrapMode extends Object
{
  native public function Context3DWrapMode():*;
  static native public const REPEAT:String = "repeat";

  static native public const CLAMP:String = "clamp";
  [API("696")]
  static native public const CLAMP_U_REPEAT_V:String = "clamp_u_repeat_v";
  [API("696")]
  static native public const REPEAT_U_CLAMP_V:String = "repeat_u_clamp_v";
}


[API("674")]
public final class flash.display3D.Context3DTextureFormat extends Object
{
  native public function Context3DTextureFormat():*;
  static native public const BGRA:String = "bgra";

  [API("698")]
  static native public const RGBA_HALF_FLOAT:String = "rgbaHalfFloat";
  static native public const COMPRESSED:String = "compressed";
  [API("682")]
  static native public const COMPRESSED_ALPHA:String = "compressedAlpha";
  [API("688")]
  static native public const BGR_PACKED:String = "bgrPacked565";
  [API("688")]
  static native public const BGRA_PACKED:String = "bgraPacked4444";
}


[native(cls="MouseCursorDataClass",instance="MouseCursorDataObject",methods="auto")]
[API("670")]
public final class flash.ui.MouseCursorData extends Object
{

  native public function MouseCursorData():*;
  native public function get data():Vector.<flash.display.BitmapData>;
  native public function set data(data:Vector.<flash.display.BitmapData>):void;
  native public function get hotSpot():flash.geom.Point;
  native public function set hotSpot(data:flash.geom.Point):void;

  native public function get frameRate():Number;
  native public function set frameRate(data:Number):void;
}


public final class flash.display.StageDisplayState extends Object
{
  native public function StageDisplayState():*;
  static native public const FULL_SCREEN:String = "fullScreen";
  static native public const FULL_SCREEN_INTERACTIVE:String = "fullScreenInteractive";

  static native public const NORMAL:String = "normal";
}


[API("661")]
public class flash.data.SQLViewSchema extends flash.data.SQLTableSchema
{
  native public function SQLViewSchema(database:String,name:String,sql:String,columns:Array):*;
}


[native(cls="NetMonitorClass",instance="NetMonitorObject",methods="auto")]
[API("672")]
[Event(name="netStreamCreate",type="flash.events.NetMonitorEvent")]
public class flash.net.NetMonitor extends flash.events.EventDispatcher
{
  native public function NetMonitor():*;
  native public function listStreams():Vector.<flash.net.NetStream>;
}


public class flash.events.SyncEvent extends flash.events.Event
{
  native public function SyncEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,changeList:Array = null):*;

  native private var m_changeList:Array;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get changeList():Array;
  native public function set changeList(value:Array):void;

  static native public const SYNC:String = "sync";
}


[native(cls="NumberFormatterClass",instance="NumberFormatterObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.NumberFormatter extends Object
{
  native public function NumberFormatter(requestedLocaleIDName:String):*;
  native private function ctor(requestedLocaleIDName:String):void;
  native public function get lastOperationStatus():String;
  native public function get requestedLocaleIDName():String;

  native public function get actualLocaleIDName():String;
  native public function get fractionalDigits():int;
  native public function set fractionalDigits(value:int):void;
  native public function get useGrouping():Boolean;
  native public function set useGrouping(value:Boolean):void;

  native public function get groupingPattern():String;
  native public function set groupingPattern(value:String):void;
  native public function get digitsType():uint;
  native public function set digitsType(value:uint):void;
  native public function get decimalSeparator():String;

  native public function set decimalSeparator(value:String):void;
  native public function get groupingSeparator():String;
  native public function set groupingSeparator(value:String):void;
  native public function get negativeSymbol():String;
  native public function set negativeSymbol(value:String):void;

  native public function get negativeNumberFormat():uint;
  native public function set negativeNumberFormat(value:uint):void;
  native public function get leadingZero():Boolean;
  native public function set leadingZero(value:Boolean):void;
  native public function get trailingZeros():Boolean;

  native public function set trailingZeros(value:Boolean):void;
  native public function parse(parseString:String):flash.globalization.NumberParseResult;
  native public function parseNumber(parseString:String):Number;
  native public function formatInt(value:int):String;
  native public function formatUint(value:uint):String;

  native public function formatNumber(value:Number):String;
  static native public final function getAvailableLocaleIDNames():Vector.<String>;
}


[API("672")]
public final class flash.media.MicrophoneEnhancedOptions extends Object
{
  native public function MicrophoneEnhancedOptions():*;
  native private var m_mode:String;
  native private var m_echoPath:int;

  native private var m_nlp:Boolean;
  native private var m_isVoiceDetected:int;
  native public function get mode():String;
  native public function set mode(mode:String):void;
  native public function get echoPath():int;

  native public function set echoPath(echoPath:int):void;
  native public function get nonLinearProcessing():Boolean;
  native public function set nonLinearProcessing(enabled:Boolean):void;
  native public function get autoGain():Boolean;
  native public function set autoGain(enabled:Boolean):void;

  native public function get isVoiceDetected():int;
  native public function set isVoiceDetected(voiceDetected:int):*;
}


[API("669")]
[native(cls="CameraUIClass",instance="CameraUIObject",methods="auto")]
[Event(name="cancel",type="flash.events.Event")]
[Event(name="error",type="flash.events.ErrorEvent")]
[Event(name="complete",type="flash.events.MediaEvent")]
public class flash.media.CameraUI extends flash.events.EventDispatcher
{
  native public function CameraUI():*;
  native public function launch(requestedMediaType:String):void;
  native private function internalLaunch(requestedMediaType:String):void;

  [cppcall]
  native private function handleUnavailableFeature():void;
  native private function fireUnavailableError(e:flash.events.TimerEvent):void;
  native private var errorTimer:flash.utils.Timer = null;
  static native public final function get isSupported():Boolean;
  static native private const kInvalidParamError:uint = 2004;

  static native private const kFeatureNotAvailableError:uint = 2014;
}


[native(cls="TraceClass",methods="auto",construct="none")]
public class flash.trace.Trace extends Object
{
  native public function Trace():*;
  static native public const OFF:int = 0;
  static native public const METHODS:int = 1;
  static native public const METHODS_WITH_ARGS:int = 2;

  static native public const METHODS_AND_LINES:int = 3;
  static native public const METHODS_AND_LINES_WITH_ARGS:int = 4;
  static native public const FILE:* = 1;
  static native public const LISTENER:* = 2;
  static native public final function setLevel(l:int,target:int = 2):*;

  static native public final function getLevel(target:int = 2):int;
  static native public final function setListener(f:Function):*;
  static native public final function getListener():Function;
}


[native(cls="XMLNodeClass",instance="XMLNodeObject",gc="exact",methods="auto")]
public class flash.xml.XMLNode extends Object
{
  native public function XMLNode(type:uint,value:String):*;
  native public var nodeType:uint;

  native public var previousSibling:XMLNode;
  native public var nextSibling:XMLNode;
  native public var parentNode:XMLNode;
  native public var firstChild:XMLNode;
  native public var lastChild:XMLNode;

  native public function get childNodes():Array;
  native private var _childNodes:Array;
  native public function get attributes():Object;
  native public function set attributes(value:Object):void;
  native private var _attributes:Object;

  native public var nodeName:String;
  native public var nodeValue:String;
  native private function init(type:uint,value:String):void;
  native public function hasChildNodes():Boolean;
  native public function cloneNode(deep:Boolean):XMLNode;

  native public function removeNode():void;
  native public function insertBefore(node:XMLNode,before:XMLNode):void;
  native public function appendChild(node:XMLNode):void;
  native public function toString():String;
  native public function getNamespaceForPrefix(prefix:String):String;

  native public function getPrefixForNamespace(ns:String):String;
  native public function get localName():String;
  native public function get prefix():String;
  native public function get namespaceURI():String;
  static native private final function escapeXML(value:String):String;
}


public final class flash.system.IMEConversionMode extends Object
{

  native public function IMEConversionMode():*;
  static native public const ALPHANUMERIC_FULL:String = "ALPHANUMERIC_FULL";
  static native public const ALPHANUMERIC_HALF:String = "ALPHANUMERIC_HALF";
  static native public const CHINESE:String = "CHINESE";
  static native public const JAPANESE_HIRAGANA:String = "JAPANESE_HIRAGANA";

  static native public const JAPANESE_KATAKANA_FULL:String = "JAPANESE_KATAKANA_FULL";
  static native public const JAPANESE_KATAKANA_HALF:String = "JAPANESE_KATAKANA_HALF";
  static native public const KOREAN:String = "KOREAN";
  static native public const UNKNOWN:String = "UNKNOWN";
}


[ExcludeClass]
public final class flash.text.TextFormatDisplay extends Object
{
  native public function TextFormatDisplay():*;

  static native public const INLINE:String = "inline";
  static native public const BLOCK:String = "block";
}


[API("667")]
public class flash.events.DRMErrorEvent extends flash.events.ErrorEvent
{
  native public function DRMErrorEvent(type:String = "drmError",bubbles:Boolean = false,cancelable:Boolean = false,inErrorDetail:String = "",inErrorCode:int = 0,insubErrorID:int = 0,inMetadata:flash.net.drm.DRMContentData = null,inSystemUpdateNeeded:Boolean = false,inDrmUpdateNeeded:Boolean = false):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native public function get subErrorID():int;
  [API("667")]
  native public function get contentData():flash.net.drm.DRMContentData;
  [API("667")]
  native public function set contentData(value:flash.net.drm.DRMContentData):void;
  [API("667")]
  native public function get systemUpdateNeeded():Boolean;
  [API("667")]
  native public function get drmUpdateNeeded():Boolean;

  native private var m_metadata:flash.net.drm.DRMContentData;
  native private var m_subErrorID:int;
  native private var m_systemUpdateNeeded:Boolean;
  native private var m_drmUpdateNeeded:Boolean;
  static native public const DRM_ERROR:String = "drmError";

  static native public const DRM_LOAD_DEVICEID_ERROR:String = "drmLoadDeviceIdError";
}


[API("690")]
public class flash.events.DRMReturnVoucherCompleteEvent extends flash.events.Event
{
  native public function DRMReturnVoucherCompleteEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,inServerURL:String = null,inLicenseID:String = null,inPolicyID:String = null,inNumberOfVouchersReturned:int = 0):*;
  native public override function clone():flash.events.Event;
  native private var m_serverURL:String;
  native private var m_licenseID:String;

  native private var m_policyID:String;
  native private var m_numberOfVouchersReturned:int;
  native public function get serverURL():String;
  native public function set serverURL(value:String):void;
  native public function get licenseID():String;

  native public function set licenseID(value:String):void;
  native public function get policyID():String;
  native public function set policyID(value:String):void;
  native public function get numberOfVouchersReturned():int;
  native public function set numberOfVouchersReturned(value:int):void;

  static native public const RETURN_VOUCHER_COMPLETE:String = "returnVoucherComplete";
}


[native(cls="ColorMatrixFilterClass",instance="ColorMatrixFilterObject",methods="auto")]
public final class flash.filters.ColorMatrixFilter extends flash.filters.BitmapFilter
{
  native public function ColorMatrixFilter(matrix:Array = null):*;
  native public function get matrix():Array;
  native public function set matrix(value:Array):void;
  native public override function clone():flash.filters.BitmapFilter;
}


[native(cls="SystemUpdaterClass",instance="SystemUpdaterObject",methods="auto",construct="check")]
[API("667")]
[Version("10.1")]
[Event(name="cancel",type="flash.events.Event")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="status",type="flash.events.StatusEvent")]
[Event(name="open",type="flash.events.Event")]
public class flash.system.SystemUpdater extends flash.events.EventDispatcher
{

  native public function SystemUpdater():*;
  native private var _pm:adobe.utils.ProductManager;
  native public function update(type:String):void;
  native public function cancel():void;
  native private function onProductManagerEvent(e:flash.events.Event):void;

  native private function _update(type:String,pm:adobe.utils.ProductManager):Boolean;
  native private function _cancel(viaAPI:Boolean,pm:adobe.utils.ProductManager):void;
}

[API("667")]
public class flash.system.SystemUpdaterType extends Object
{
  native public function SystemUpdaterType():*;
  static native public const SYSTEM:String = "system";
  static native public const DRM:String = "drm";
}


public final class flash.display.ActionScriptVersion extends Object
{

  native public function ActionScriptVersion():*;
  static native public const ACTIONSCRIPT2:uint = 2;
  static native public const ACTIONSCRIPT3:uint = 3;
}


[native(cls="VideoClass",instance="VideoObject",methods="auto")]
public class flash.media.Video extends flash.display.DisplayObject
{
  native public function Video(width:int = 320,height:int = 240):*;
  native private function ctor(width:int,height:int):void;

  native public function get deblocking():int;
  native public function set deblocking(value:int):void;
  native public function get smoothing():Boolean;
  native public function set smoothing(value:Boolean):void;
  native public function get videoWidth():int;

  native public function get videoHeight():int;
  native public function clear():void;
  native public function attachNetStream(netStream:flash.net.NetStream):void;
  native public function attachCamera(camera:flash.media.Camera):void;
}


[API("661")]
[native(cls="WindowIconClass",instance="WindowIconObject",methods="auto")]
public class flash.desktop.NativeWindowIcon extends flash.desktop.InteractiveIcon
{
  native public function NativeWindowIcon():*;

  native public override function set bitmaps(value:Array):void;
  native public override function get bitmaps():Array;
  native public override function get width():int;
  native public override function get height():int;
}


[Version("air1")]
[Version("10")]
public class flash.desktop.ClipboardFormats extends Object
{
  native public function ClipboardFormats():*;

  static native internal const FLASH_PREFIX:String = "flash:";
  static native internal const AIR_PREFIX:String = "air:";
  static native internal const REFERENCE_PREFIX:String = "air:reference:";
  static native internal const SERIALIZATION_PREFIX:String = "air:serialization:";
  static native public const TEXT_FORMAT:String = "air:text";

  static native public const HTML_FORMAT:String = "air:html";
  static native public const RICH_TEXT_FORMAT:String = "air:rtf";
  static native public const URL_FORMAT:String = "air:url";
  static native public const FILE_LIST_FORMAT:String = "air:file list";
  static native public const BITMAP_FORMAT:String = "air:bitmap";

  static native public const FILE_PROMISE_LIST_FORMAT:String = "air:file promise list";
}

[Version("air1")]
[Version("10")]
public class flash.desktop.ClipboardTransferMode extends Object
{
  native public function ClipboardTransferMode():*;
  static native public const ORIGINAL_PREFERRED:String = "originalPreferred";
  static native public const ORIGINAL_ONLY:String = "originalOnly";
  static native public const CLONE_PREFERRED:String = "clonePreferred";

  static native public const CLONE_ONLY:String = "cloneOnly";
}

[native(cls="ClipboardClass",instance="ClipboardObject",methods="auto",construct="check")]
[Version("air1")]
[Version("10")]
public class flash.desktop.Clipboard extends Object
{
  native public function Clipboard():*;
  native public function get formats():Array;
  native public function clear():void;
  native public function clearData(format:String):void;

  [cppcall]
  native public function setData(format:String,data:Object,serializable:Boolean = true):Boolean;
  native public function setDataHandler(format:String,handler:Function,serializable:Boolean = true):Boolean;
  native public function getData(format:String,transferMode:String = "originalPreferred"):Object;
  native public function hasFormat(format:String):Boolean;
  native private function getOriginal(format:String):Object;

  native private function getClone(format:String):Object;
  native private function get alive():Boolean;
  native private function get canReadContents():Boolean;
  native private function get canWriteContents():Boolean;
  native private function checkAccess(requestRead:Boolean,requestWrite:Boolean):void;

  native private function nativeSetHandler(format:String,handler:Function):void;
  native private function getObjectReference(format:String):Object;
  native private function putObjectReference(format:String,data:Object):void;
  native private function getDeserialization(format:String):Object;
  native private function putSerialization(format:String,data:Object):void;

  native private function getString():String;
  native private function putString(s:String):void;
  native private function getHTML():String;
  native private function putHTML(html:String):void;
  native private function getRTF():flash.utils.ByteArray;

  native private function putRTF(rtf:flash.utils.ByteArray):void;
  native private function getByteArray(format:String):flash.utils.ByteArray;
  native private function putByteArray(format:String,bytes:flash.utils.ByteArray):void;
  native private function convertNativeFormat(format:String):Object;
  native private function convertFlashFormat(flashFormat:String,data:Object,serializable:Boolean):Boolean;

  native private function get swfVersion():int;
  native private function setHandlerStoringData(status:Boolean):void;
  [Version("air2.0")]
  native public function get supportsFilePromise():Boolean;
  native private function getURL():String;
  native private function putURL(url:String):void;

  native private function getBitmapData():flash.display.BitmapData;
  native private function putBitmapData(bitmapData:flash.display.BitmapData):void;
  native private function getFileList():Array;
  native private function putFileList(files:Array):void;
  native private function nativePutFileList(paths:Array):void;

  native private function getFilePromiseList():Array;
  native private function nativeGetFilePromiseList():Array;
  native private function putFilePromiseList(filePromises:Array):void;
  native private function nativePutFilePromiseList(paths:Array):void;
  static native private const LIFETIME_ERROR:String = "Attempt to access a dead clipboard";

  static native private const READ_ACCESS_ERROR:String = "Reading from clipboard not permitted in this context";
  static native private const WRITE_ACCESS_ERROR:String = "Writing to clipboard not permitted in this context";
  static native public final function get generalClipboard():Clipboard;
  static native private final function isSystemFormat(format:String):Boolean;
  static native private final function initFormatMap():void;

  static native private final function addFormatMapping(flashFormat:String,exportFromFlash:Function,importToFlash:Function):*;
  static native private var _fromFlash:flash.utils.Dictionary;
  static native private var _toFlash:flash.utils.Dictionary;
  static native private var _wasFormatMapInitialized:Boolean = false;
}


[native(cls="AVM1MovieClass",instance="AVM1MovieObject",methods="auto",construct="native")]
public class flash.display.AVM1Movie extends flash.display.DisplayObject
{
  native public function AVM1Movie():*;

  [Inspectable(environment="none")]
  native public function call(functionName:String,... rest):*;
  native private function get _interopAvailable():Boolean;
  native private function _callAS2(functionName:String,arguments:flash.utils.ByteArray):void;
  native private function _setCallAS3(closure:Function):void;
  native private function _callAS3(functionName:String,data:flash.utils.ByteArray):void;

  [Inspectable(environment="none")]
  native public function addCallback(functionName:String,closure:Function):void;
  native private var callbackTable:Object;
}


[native(cls="GradientBevelFilterClass",instance="GradientBevelFilterObject",methods="auto")]
public final class flash.filters.GradientBevelFilter extends flash.filters.BitmapFilter
{
  native public function GradientBevelFilter(distance:Number = 4.0,angle:Number = 45,colors:Array = null,alphas:Array = null,ratios:Array = null,blurX:Number = 4.0,blurY:Number = 4.0,strength:Number = 1,quality:int = 1,type:String = "inner",knockout:Boolean = false):*;
  native public function get distance():Number;
  native public function set distance(value:Number):void;

  native public function get angle():Number;
  native public function set angle(value:Number):void;
  native public function get colors():Array;
  native public function set colors(value:Array):void;
  native public function get alphas():Array;

  native public function set alphas(value:Array):void;
  native public function get ratios():Array;
  native public function set ratios(value:Array):void;
  native public function get blurX():Number;
  native public function set blurX(value:Number):void;

  native public function get blurY():Number;
  native public function set blurY(value:Number):void;
  native public function get knockout():Boolean;
  native public function set knockout(value:Boolean):void;
  native public function get quality():int;

  native public function set quality(value:int):void;
  native public function get strength():Number;
  native public function set strength(value:Number):void;
  native public function get type():String;
  native public function set type(value:String):void;

  native public override function clone():flash.filters.BitmapFilter;
}


[API("661")]
[native(cls="HTMLResourceLoaderClass",instance="HTMLResourceLoaderObject",methods="auto",construct="native")]
public class flash.html.ResourceLoader extends Object
{
  native public function ResourceLoader(urlReq:flash.net.URLRequest,htmlControl:flash.html.HTMLLoader,isStageWebViewRequest:Boolean = false):*;
  [cppcall]
  native private function detachURLStream():void;
  native private function doTrace(traceStr:String):void;
  native public function cancel():void;

  native private function startMailTo():void;
  native private function startData():void;
  native private function startFile():void;
  native private function onFileHTTPStatus(ev:flash.events.Event):void;
  native private function onFileProgress(ev:flash.events.Event):void;

  native private function onFileError(event:flash.events.Event):void;
  native private function onFileComplete(ev:flash.events.Event):void;
  native private function start():void;
  native private function receivedResponse(httpStatus:int,responseHeaders:Array,responseURL:String,traceStrNotSent:String,traceStrSent:String = null):void;
  native private function receivedAllData(traceStrNotSent:String,traceStrSent:String = null):void;

  native private function didFail(traceStrNotSent:String,traceStrSent:* = null):void;
  native private function releaseClient(closeStream:Boolean):void;
  native private function findHeader(header:String,headersArray:Array):flash.net.URLRequestHeader;
  native private function makeURLAbsolute(baseURL:String,url:String):String;
  native private function getRedirectLocation(currentURL:String,responseHeadersArray:Array):String;

  native private function onHTTPStatus(event:flash.events.HTTPStatusEvent):void;
  native private function onProgress(event:flash.events.ProgressEvent):void;
  native private function onComplete(event:flash.events.Event):void;
  native private function onError(event:flash.events.IOErrorEvent):void;
  native private function onSecurityError(event:flash.events.SecurityErrorEvent):void;

  native private function startLoadSWF():void;
  native private function onLoadSWFError(event:flash.events.Event):void;
  native private function onLoadSWFComplete(ev:flash.events.Event):void;
  native private function nativeInit(cancelMethod:Function,startMethod:Function):void;
  native private function nativeReceivedRedirect(newRequest:flash.net.URLRequest,httpStatusCode:int,responseHeaders:Array,responseURL:String):flash.net.URLRequest;

  native private function nativeReceivedResponse(httpStatusCode:int,responseHeaders:Array,responseURL:String):void;
  native private function nativeReceivedData(bytes:flash.utils.ByteArray):void;
  native private function nativeCanLoadDataURL():Boolean;
  native private function nativeIsSynchronous():Boolean;
  native private function nativeReceivedRawDataURLBuffer(bytes:flash.utils.ByteArray,isBase64Encoded:Boolean):void;

  native private function nativeReceivedAllData():void;
  native private function nativeDidFail(failedURL:String):void;
  native private function nativeReleaseClient(closeStream:Boolean):void;
  native private function nativeCopySynchronousAttribute(newRequest:flash.net.URLRequest,originalRequest:flash.net.URLRequest):void;
  native private function nativeIsPlatformAIR20():Boolean;

  native private var m_CurrStateFunction:Function;
  native private var m_URLRequest:flash.net.URLRequest;
  native private var m_htmlControl:flash.html.HTMLLoader;
  native private var m_URLStream:flash.net.URLStream;
  native private var m_loader:flash.display.Loader;

  native private var m_receivedResponse:Boolean;
  native private var m_receivedAllData:Boolean;
  native private var m_clientReleased:Boolean;
  native private var m_isStageWebViewRequest:Boolean;
  static native internal const s_MailToURLScheme:String = "mailto:";

  static native internal const s_FileURLScheme:String = "file:";
  static native internal const s_AboutURLScheme:String = "about:";
  static native internal const s_HttpURLScheme:String = "http:";
  static native internal const s_HttpsURLScheme:String = "https:";
  static native internal const s_FtpURLScheme:String = "ftp:";

  static native internal const s_AppURLScheme:String = "app:";
  static native internal const s_AppStorageURLScheme:String = "app-storage:";
  static native internal const s_DataURLScheme:String = "data:";
  static native private final function isScheme(urlStr:String,scheme:String):Boolean;
  static native private final function isLocalURL(urlStr:String):Boolean;

  static native private final function makeRequestForRedirect(request:flash.net.URLRequest,newURL:String):flash.net.URLRequest;
  static native private const s_LocationHeaderName:String;
  static native private const s_LoadSwfHeaderName:String;
  static native private const s_HTTP_STATUS_OK:int = 200;
  static native private const s_HTTP_STATUS_FILE_NOT_FOUND:int = 404;

  static native private const s_HTTP_CONTENT_LENGTH_HEADER_NAME:String = "Content-Length";
}


public final class flash.ui.ContextMenuBuiltInItems extends Object
{
  native public function ContextMenuBuiltInItems():*;
  native public function get save():Boolean;
  native public function set save(val:Boolean):void;
  native private var _save:Boolean = true;

  native public function get zoom():Boolean;
  native public function set zoom(val:Boolean):void;
  native private var _zoom:Boolean = true;
  native public function get quality():Boolean;
  native public function set quality(val:Boolean):void;

  native private var _quality:Boolean = true;
  native public function get play():Boolean;
  native public function set play(val:Boolean):void;
  native private var _play:Boolean = true;
  native public function get loop():Boolean;

  native public function set loop(val:Boolean):void;
  native private var _loop:Boolean = true;
  native public function get rewind():Boolean;
  native public function set rewind(val:Boolean):void;
  native private var _rewind:Boolean = true;

  native public function get forwardAndBack():Boolean;
  native public function set forwardAndBack(val:Boolean):void;
  native private var _forwardAndBack:Boolean = true;
  native public function get print():Boolean;
  native public function set print(val:Boolean):void;

  native private var _print:Boolean = true;
  [Inspectable(environment="none")]
  native public function clone():ContextMenuBuiltInItems;
}


[Version("10")]
public final class flash.text.engine.BreakOpportunity extends Object
{
  native public function BreakOpportunity():*;
  static native public const AUTO:String = "auto";
  static native public const ANY:String = "any";

  static native public const NONE:String = "none";
  static native public const ALL:String = "all";
}


[API("661")]
public final class flash.display.NativeWindowResize extends Object
{
  native public function NativeWindowResize():*;
  static native public const TOP:String = "T";
  static native public const LEFT:String = "L";

  static native public const BOTTOM:String = "B";
  static native public const RIGHT:String = "R";
  static native public const TOP_LEFT:String = "TL";
  static native public const TOP_RIGHT:String = "TR";
  static native public const BOTTOM_LEFT:String = "BL";

  static native public const BOTTOM_RIGHT:String = "BR";
  static native public const NONE:String = "";
}


[native(cls="PNGEncoderOptionsClass",instance="PNGEncoderOptionsObject",methods="auto")]
[API("680")]
public final class flash.display.PNGEncoderOptions extends Object
{
  native public function PNGEncoderOptions(fastCompression:Boolean = false):*;
  native public var fastCompression:Boolean;
}


[Version("10.1")]
public final class flash.globalization.NationalDigitsType extends Object
{
  native public function NationalDigitsType():*;

  static native public const EUROPEAN:uint = 48;
  static native public const ARABIC_INDIC:uint = 1632;
  static native public const EXTENDED_ARABIC_INDIC:uint = 1776;
  static native public const NKO:uint = 1984;
  static native public const DEVANAGARI:uint = 2406;

  static native public const BENGALI:uint = 2534;
  static native public const GURMUKHI:uint = 2662;
  static native public const GUJARATI:uint = 2790;
  static native public const ORIYA:uint = 2918;
  static native public const TAMIL:uint = 3046;

  static native public const TELUGU:uint = 3174;
  static native public const KANNADA:uint = 3302;
  static native public const MALAYALAM:uint = 3430;
  static native public const THAI:uint = 3664;
  static native public const LAO:uint = 3792;

  static native public const TIBETAN:uint = 3872;
  static native public const MYANMAR:uint = 4160;
  static native public const MYANMAR_SHAN:uint = 4240;
  static native public const KHMER:uint = 6112;
  static native public const MONGOLIAN:uint = 6160;

  static native public const LIMBU:uint = 6470;
  static native public const NEW_TAI_LUE:uint = 6608;
  static native public const BALINESE:uint = 6992;
  static native public const SUNDANESE:uint = 7088;
  static native public const LEPCHA:uint = 7232;

  static native public const OL_CHIKI:uint = 7248;
  static native public const VAI:uint = 42528;
  static native public const SAURASHTRA:uint = 43216;
  static native public const KAYAH_LI:uint = 43264;
  static native public const CHAM:uint = 43600;

  static native public const FULL_WIDTH:uint = 65296;
  static native public const OSMANYA:uint = 66720;
}


public class flash.text.TextExtent extends Object
{
  native public function TextExtent(width:Number,height:Number,textFieldWidth:Number,textFieldHeight:Number,ascent:Number,descent:Number):*;
  native public var width:Number;
  native public var height:Number;

  native public var textFieldWidth:Number;
  native public var textFieldHeight:Number;
  native public var ascent:Number;
  native public var descent:Number;
}


[native(cls="GraphicElementClass",instance="GraphicElementObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.GraphicElement extends flash.text.engine.ContentElement
{
  native public function GraphicElement(graphic:flash.display.DisplayObject = null,elementWidth:Number = 15.0,elementHeight:Number = 15.0,elementFormat:flash.text.engine.ElementFormat = null,eventMirror:flash.events.EventDispatcher = null,textRotation:String = "rotate0"):*;

  native public function get graphic():flash.display.DisplayObject;
  native public function set graphic(value:flash.display.DisplayObject):void;
  native public function get elementHeight():Number;
  native public function set elementHeight(value:Number):void;
  native public function get elementWidth():Number;

  native public function set elementWidth(value:Number):void;
}


[native(cls="IMEClass",instance="IMEObject",methods="auto",construct="native")]
[Event(name="imeComposition",type="flash.events.IMEEvent")]
public final class flash.system.IME extends flash.events.EventDispatcher
{
  native public function IME():*;
  static native public final function get enabled():Boolean;
  static native public final function set enabled(enabled:Boolean):void;
  static native public final function get conversionMode():String;

  static native public final function set conversionMode(mode:String):void;
  static native public final function setCompositionString(composition:String):void;
  static native public final function doConversion():void;
  static native public final function compositionSelectionChanged(start:int,end:int):void;
  static native public final function compositionAbandoned():void;

  [Version("10.1")]
  static native public final function get isSupported():Boolean;
  static native private final function _checkSupported():Boolean;
}


[Version("air2.0")]
public class flash.events.NativeProcessExitEvent extends flash.events.Event
{
  native public function NativeProcessExitEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,exitCode:Number = NaN):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native private var _exitCode:Number;
  native public function get exitCode():Number;
  native public function set exitCode(value:Number):void;
  static native public const EXIT:String = "exit";
}


[Version("10")]
public final class flash.text.engine.FontMetrics extends Object
{
  native public function FontMetrics(emBox:flash.geom.Rectangle,strikethroughOffset:Number,strikethroughThickness:Number,underlineOffset:Number,underlineThickness:Number,subscriptOffset:Number,subscriptScale:Number,superscriptOffset:Number,superscriptScale:Number,lineGap:Number = 0.0):*;

  native public var emBox:flash.geom.Rectangle;
  native public var strikethroughOffset:Number;
  native public var strikethroughThickness:Number;
  native public var underlineOffset:Number;
  native public var underlineThickness:Number;

  native public var subscriptOffset:Number;
  native public var subscriptScale:Number;
  native public var superscriptOffset:Number;
  native public var superscriptScale:Number;
  [API("674")]
  native public var lineGap:Number;
}


[Version("air2.0")]
public class flash.events.DatagramSocketDataEvent extends flash.events.Event
{

  native public function DatagramSocketDataEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,srcAddress:String = "",srcPort:int = 0,dstAddress:String = "",dstPort:int = 0,data:flash.utils.ByteArray = null):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native private var _srcAddress:String = "";
  native public function get srcAddress():String;

  native public function set srcAddress(value:String):void;
  native private var _srcPort:int = 0;
  native public function get srcPort():int;
  native public function set srcPort(value:int):void;
  native private var _dstAddress:String = "";

  native public function get dstAddress():String;
  native public function set dstAddress(value:String):void;
  native private var _dstPort:int = 0;
  native public function get dstPort():int;
  native public function set dstPort(value:int):void;

  native private var _data:flash.utils.ByteArray = null;
  native public function get data():flash.utils.ByteArray;
  native public function set data(value:flash.utils.ByteArray):void;
  static native public const DATA:String = "data";
}


[native(cls="X509CertificateClass",instance="X509CertificateObject",methods="auto")]
[API("674")]
public class flash.security.X509Certificate extends Object
{
  native public function X509Certificate():*;

  native public function get version():uint;
  native public function get serialNumber():String;
  native public function get signatureAlgorithmOID():String;
  native public function get signatureAlgorithmParams():flash.utils.ByteArray;
  native public function get issuer():flash.security.X500DistinguishedName;

  native public function get validNotBefore():Date;
  native public function get validNotAfter():Date;
  native public function get subject():flash.security.X500DistinguishedName;
  native public function get subjectPublicKeyAlgorithmOID():String;
  native public function get subjectPublicKey():String;

  native public function get issuerUniqueID():String;
  native public function get subjectUniqueID():String;
  native public function get encoded():flash.utils.ByteArray;
}


[native(cls="TouchEventClass",instance="TouchEventObject",gc="exact",methods="auto")]
[Version("10.1")]
public class flash.events.TouchEvent extends flash.events.Event
{
  native public function TouchEvent(type:String,bubbles:Boolean = true,cancelable:Boolean = false,touchPointID:int = 0,isPrimaryTouchPoint:Boolean = false,localX:Number = NaN,localY:Number = NaN,sizeX:Number = NaN,sizeY:Number = NaN,pressure:Number = NaN,relatedObject:flash.display.InteractiveObject = null,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,commandKey:Boolean = false,controlKey:Boolean = false,timestamp:Number = NaN,touchIntent:String = "unknown",samples:flash.utils.ByteArray = null,isTouchPointCanceled:Boolean = false):*;
  native private var m_touchPointID:int;

  native private var m_isPrimaryTouchPoint:Boolean;
  native private var m_sizeY:Number;
  native private var m_sizeX:Number;
  native private var m_pressure:Number;
  native private var m_relatedObject:flash.display.InteractiveObject;

  native private var m_isRelatedObjectInaccessible:Boolean;
  native private var m_ctrlKey:Boolean;
  native private var m_altKey:Boolean;
  native private var m_shiftKey:Boolean;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native public function get localX():Number;
  native public function set localX(value:Number):void;
  native public function get localY():Number;
  native public function set localY(value:Number):void;

  native public function get touchPointID():int;
  native public function set touchPointID(value:int):void;
  native public function get isPrimaryTouchPoint():Boolean;
  native public function set isPrimaryTouchPoint(value:Boolean):void;
  native public function get sizeX():Number;

  native public function set sizeX(value:Number):void;
  native public function get sizeY():Number;
  native public function set sizeY(value:Number):void;
  native public function get pressure():Number;
  native public function set pressure(value:Number):void;

  native public function get relatedObject():flash.display.InteractiveObject;
  native public function set relatedObject(value:flash.display.InteractiveObject):void;
  native public function get ctrlKey():Boolean;
  native public function set ctrlKey(value:Boolean):void;
  native public function get altKey():Boolean;

  native public function set altKey(value:Boolean):void;
  native public function get shiftKey():Boolean;
  native public function set shiftKey(value:Boolean):void;
  native public function get stageX():Number;
  native public function get stageY():Number;

  native public function updateAfterEvent():void;
  native private function getStageX():Number;
  native private function getStageY():Number;
  native public function get isRelatedObjectInaccessible():Boolean;
  native public function set isRelatedObjectInaccessible(value:Boolean):void;

  native private var m_commandKey:Boolean;
  native private var m_controlKey:Boolean;
  native private var m_timestamp:Number;
  native private var m_touchIntent:String;
  native private var m_isTouchPointCanceled:Boolean;

  native public function get commandKey():Boolean;
  native public function set commandKey(value:Boolean):void;
  native public function get controlKey():Boolean;
  native public function set controlKey(value:Boolean):void;
  [API("675")]
  native public function isToolButtonDown(index:int):Boolean;

  [API("675")]
  native public function get timestamp():Number;
  [API("675")]
  native public function set timestamp(value:Number):void;
  [API("675")]
  native public function get touchIntent():String;
  [API("675")]
  native public function set touchIntent(value:String):void;
  [API("675")]
  native public function get isTouchPointCanceled():Boolean;

  [API("675")]
  native public function set isTouchPointCanceled(value:Boolean):void;
  [API("675")]
  native public function getSamples(buffer:flash.utils.ByteArray,append:Boolean = false):uint;
  native private function privateGetSamples(buffer:flash.utils.ByteArray):uint;
  native private function setSamples(buffer:flash.utils.ByteArray):void;
  static native public const TOUCH_BEGIN:String = "touchBegin";

  static native public const TOUCH_END:String = "touchEnd";
  static native public const TOUCH_MOVE:String = "touchMove";
  static native public const TOUCH_OVER:String = "touchOver";
  static native public const TOUCH_OUT:String = "touchOut";
  static native public const TOUCH_ROLL_OVER:String = "touchRollOver";

  static native public const TOUCH_ROLL_OUT:String = "touchRollOut";
  static native public const TOUCH_TAP:String = "touchTap";
  static native public const PROXIMITY_BEGIN:String = "proximityBegin";
  static native public const PROXIMITY_END:String = "proximityEnd";
  static native public const PROXIMITY_MOVE:String = "proximityMove";

  static native public const PROXIMITY_OUT:String = "proximityOut";
  static native public const PROXIMITY_OVER:String = "proximityOver";
  static native public const PROXIMITY_ROLL_OUT:String = "proximityRollOut";
  static native public const PROXIMITY_ROLL_OVER:String = "proximityRollOver";
}


[Version("10")]
public final class flash.text.engine.TextRotation extends Object
{
  native public function TextRotation():*;

  static native public const ROTATE_0:String = "rotate0";
  static native public const ROTATE_90:String = "rotate90";
  static native public const ROTATE_180:String = "rotate180";
  static native public const ROTATE_270:String = "rotate270";
  static native public const AUTO:String = "auto";
}


[API("661")]
public class flash.html.HTMLHistoryItem extends Object
{

  native public function HTMLHistoryItem(url:String,originalUrl:String,isPost:Boolean,title:String):*;
  native public function get url():String;
  native private var _url:String;
  native public function get originalUrl():String;
  native private var _originalUrl:String;

  native public function get isPost():Boolean;
  native private var _isPost:Boolean;
  native public function get title():String;
  native private var _title:String;
}


[API("675")]
[native(cls="StageTextInitOptionsClass",instance="StageTextInitOptionsObject",methods="auto")]
public class flash.text.StageTextInitOptions extends Object
{
  native public function StageTextInitOptions(multiline:Boolean = false):*;

  native public function set multiline(value:Boolean):*;
  native public function get multiline():Boolean;
}


[API("682")]
public final class flash.display3D.Context3DProfile extends Object
{
  native public function Context3DProfile():*;
  static native public const BASELINE:String = "baseline";
  static native public const BASELINE_CONSTRAINED:String = "baselineConstrained";

  [API("690")]
  static native public const BASELINE_EXTENDED:String = "baselineExtended";
  [API("698")]
  static native public const STANDARD:String = "standard";
  [API("702")]
  static native public const STANDARD_CONSTRAINED:String = "standardConstrained";
  [API("704")]
  static native public const STANDARD_EXTENDED:String = "standardExtended";
}


[API("667")]
[Event(name="textInput",type="flash.events.TextEvent")]
[Event(name="imeStartComposition",type="flash.events.IMEEvent")]
public interface flash.text.ime.IIMEClient
{
  [cppcall]
  native function updateComposition(text:String,attributes:Vector.<flash.text.ime.CompositionAttributeRange>,compositionStartIndex:int,compositionEndIndex:int):void;

  [cppcall]
  native function confirmComposition(text:String = null,preserveSelection:Boolean = false):void;
  [cppcall]
  native function getTextBounds(startIndex:int,endIndex:int):flash.geom.Rectangle;
  [cppcall]
  native function get compositionStartIndex():int;
  [cppcall]
  native function get compositionEndIndex():int;
  [cppcall]
  native function get verticalTextLayout():Boolean;

  [cppcall]
  native function get selectionAnchorIndex():int;
  [cppcall]
  native function get selectionActiveIndex():int;
  [cppcall]
  native function selectRange(anchorIndex:int,activeIndex:int):void;
  [cppcall]
  native function getTextInRange(startIndex:int,endIndex:int):String;
}


[API("674")]
public final class flash.display3D.Context3DTriangleFace extends Object
{
  native public function Context3DTriangleFace():*;

  static native public const NONE:String = "none";
  static native public const BACK:String = "back";
  static native public const FRONT:String = "front";
  static native public const FRONT_AND_BACK:String = "frontAndBack";
}


public class flash.xml.XMLDocument extends flash.xml.XMLNode
{
  native public function XMLDocument(source:String = null):*;

  native public var xmlDecl:Object = null;
  native public var docTypeDecl:Object = null;
  native public var idMap:Object;
  native public var ignoreWhite:Boolean = false;
  native public function createElement(name:String):flash.xml.XMLNode;

  native public function createTextNode(text:String):flash.xml.XMLNode;
  native public override function toString():String;
  native public function parseXML(source:String):void;
  static native private const kNoError:int = 0;
  static native private const kEndOfDocument:int = -1;

  static native private const kUnterminatedCdata:int = -2;
  static native private const kUnterminatedXmlDeclaration:int = -3;
  static native private const kUnterminatedDoctypeDeclaration:int = -4;
  static native private const kUnterminatedComment:int = -5;
  static native private const kMalformedElement:int = -6;

  static native private const kOutOfMemory:int = -7;
  static native private const kUnterminatedAttributeValue:int = -8;
  static native private const kUnterminatedElement:int = -9;
  static native private const kElementNeverBegun:int = -10;
}


[Version("10")]
public final class flash.text.engine.RenderingMode extends Object
{
  native public function RenderingMode():*;

  static native public const NORMAL:String = "normal";
  static native public const CFF:String = "cff";
}


[API("669")]
public final class flash.media.MediaType extends Object
{
  native public function MediaType():*;
  static native public const IMAGE:String = "image";
  static native public const VIDEO:String = "video";
}


[native(cls="URLRequestClass",gc="exact",instance="URLRequestObject",methods="auto")]
public final class flash.net.URLRequest extends Object
{

  native public function URLRequest(url:String = null):*;
  native public function get url():String;
  native public function set url(value:String):void;
  native public function get data():Object;
  native public function set data(value:Object):void;

  native public function get method():String;
  native public function set method(value:String):void;
  native private function setMethod(value:String):void;
  native public function get contentType():String;
  native public function set contentType(value:String):void;

  native public function get requestHeaders():Array;
  native public function set requestHeaders(value:Array):void;
  native private function setRequestHeaders(value:Array):void;
  native private function filterRequestHeaders(item:*,index:int,array:Array):Boolean;
  native public function get digest():String;

  native public function set digest(value:String):void;
  [API("690")]
  native public function useRedirectedURL(sourceRequest:URLRequest,wholeURL:Boolean = false,pattern:* = null,replace:String = null):void;
  [cppcall]
  native private function shouldFilterHTTPHeader(header:String):Boolean;
  [API("661")]
  native public function get followRedirects():Boolean;
  [API("661")]
  native public function set followRedirects(value:Boolean):void;

  [API("661")]
  native public function get userAgent():String;
  [API("661")]
  native public function set userAgent(value:String):void;
  [API("661")]
  native public function get manageCookies():Boolean;
  [API("661")]
  native public function set manageCookies(value:Boolean):void;
  [API("661")]
  native public function get useCache():Boolean;

  [API("661")]
  native public function set useCache(value:Boolean):void;
  [API("661")]
  native public function get cacheResponse():Boolean;
  [API("661")]
  native public function set cacheResponse(value:Boolean):void;
  native private function _SetIdleTimeout(value:Number):void;
  [Version("air2.0")]
  native public function get idleTimeout():Number;

  [Version("air2.0")]
  native public function set idleTimeout(value:Number):void;
  [API("661")]
  native public function get authenticate():Boolean;
  [API("661")]
  native public function set authenticate(value:Boolean):void;
  static native private const kInvalidParamError:uint = 2004;
}


[native(cls="StageCaptureClass",instance="StageCaptureObject",methods="auto")]
[ExcludeClass]
public class flash.automation.StageCapture extends flash.events.EventDispatcher
{
  native public function StageCapture():*;

  native public function capture(type:String):void;
  native public function cancel():void;
  native public function set fileNameBase(value:String):void;
  native public function get fileNameBase():String;
  native public function set clipRect(value:flash.geom.Rectangle):void;

  native public function get clipRect():flash.geom.Rectangle;
  native public function captureBitmapData():flash.display.BitmapData;
  native public function set captureSource(value:String):void;
  native public function get captureSource():String;
  native public function set capturePTS(pts:Number):void;

  native public function get capturePTS():Number;
  static native public const CURRENT:String = "current";
  static native public const NEXT:String = "next";
  static native public const MULTIPLE:String = "multiple";
  static native public const RASTER:String = "raster";

  static native public const STAGE:String = "stage";
  static native public const SCREEN:String = "screen";
}


[native(cls="StageVideoClass",instance="StageVideoObject",methods="auto",construct="native")]
[API("667")]
[Event(name="renderState",type="flash.events.StageVideoEvent")]
public class flash.media.StageVideo extends flash.events.EventDispatcher
{
  native public function StageVideo():*;
  native public function attachNetStream(netStream:flash.net.NetStream):void;
  [API("682")]
  native public function attachCamera(theCamera:flash.media.Camera):void;

  native public function get viewPort():flash.geom.Rectangle;
  native public function set viewPort(rect:flash.geom.Rectangle):void;
  native public function set pan(point:flash.geom.Point):void;
  native public function get pan():flash.geom.Point;
  native public function set zoom(point:flash.geom.Point):void;

  native public function get zoom():flash.geom.Point;
  native public function set depth(depth:int):void;
  native public function get depth():int;
  native public function get videoWidth():int;
  native public function get videoHeight():int;

  native public function get colorSpaces():Vector.<String>;
}


[API("661")]
public class flash.events.SQLErrorEvent extends flash.events.ErrorEvent
{
  native public function SQLErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,error:flash.errors.SQLError = null):*;
  native public function get error():flash.errors.SQLError;
  native public override function clone():flash.events.Event;
  native public override function toString():String;

  native private var _error:flash.errors.SQLError;
  static native public const ERROR:String = "error";
}


[API("692")]
public class flash.events.DRMDeviceGroupErrorEvent extends flash.events.ErrorEvent
{
  native public function DRMDeviceGroupErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,errorDetail:String = "",errorCode:int = 0,subErrorID:int = 0,deviceGroup:flash.net.drm.DRMDeviceGroup = null,systemUpdateNeeded:Boolean = false,drmUpdateNeeded:Boolean = false):*;
  native public override function toString():String;
  native public function get subErrorID():int;

  native public function set subErrorID(value:int):void;
  native public function set deviceGroup(value:flash.net.drm.DRMDeviceGroup):*;
  native public function get deviceGroup():flash.net.drm.DRMDeviceGroup;
  native public override function clone():flash.events.Event;
  native public function get systemUpdateNeeded():Boolean;

  native public function get drmUpdateNeeded():Boolean;
  native private var m_deviceGroup:flash.net.drm.DRMDeviceGroup;
  native private var m_subErrorID:int;
  native private var m_systemUpdateNeeded:Boolean;
  native private var m_drmUpdateNeeded:Boolean;

  static native public const ADD_TO_DEVICE_GROUP_ERROR:String = "addToDeviceGroupError";
  static native public const REMOVE_FROM_DEVICE_GROUP_ERROR:String = "removeFromDeviceGroupError";
}


[ExcludeClass]
public class _2e90f78407c600baec84024197c10891c49dfc347f97e866be205971208d3fca_flash_display_Sprite extends flash.display.Sprite
{
  native public function _2e90f78407c600baec84024197c10891c49dfc347f97e866be205971208d3fca_flash_display_Sprite():*;
  native public function allowDomainInRSL(... rest):void;
  native public function allowInsecureDomainInRSL(... rest):void;
}


[native(cls="SoftKeyboardEventClass",instance="SoftKeyboardEventObject",methods="auto")]
[API("670")]
public class flash.events.SoftKeyboardEvent extends flash.events.Event
{

  native public function SoftKeyboardEvent(type:String,bubbles:Boolean,cancelable:Boolean,relatedObjectVal:flash.display.InteractiveObject,triggerTypeVal:String):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get triggerType():String;
  native public function get relatedObject():flash.display.InteractiveObject;

  native public function set relatedObject(value:flash.display.InteractiveObject):void;
  native private var m_relatedObject:flash.display.InteractiveObject;
  native private var m_triggerType:String;
  static native public const SOFT_KEYBOARD_ACTIVATE:String = "softKeyboardActivate";
  static native public const SOFT_KEYBOARD_DEACTIVATE:String = "softKeyboardDeactivate";

  static native public const SOFT_KEYBOARD_ACTIVATING:String = "softKeyboardActivating";
}


[API("667")]
public class flash.errors.DRMManagerError extends Error
{
  native public function DRMManagerError(message:String,id:int,subErrorID:int):*;
  native public function get subErrorID():int;
  native public function toString():String;
  native private var _subErrorID:int;
}


public final class flash.display.JointStyle extends Object
{

  native public function JointStyle():*;
  static native public const ROUND:String = "round";
  static native public const BEVEL:String = "bevel";
  static native public const MITER:String = "miter";
}


[Version("10")]
public final class flash.text.engine.FontPosture extends Object
{
  native public function FontPosture():*;

  static native public const NORMAL:String = "normal";
  static native public const ITALIC:String = "italic";
}


[Version("10")]
public final class flash.display.ShaderPrecision extends Object
{
  native public function ShaderPrecision():*;
  static native public const FULL:String = "full";
  static native public const FAST:String = "fast";
}


[API("661")]
public class flash.events.NativeWindowBoundsEvent extends flash.events.Event
{

  native public function NativeWindowBoundsEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,beforeBounds:flash.geom.Rectangle = null,afterBounds:flash.geom.Rectangle = null):*;
  native private var m_beforeBounds:flash.geom.Rectangle;
  native private var m_afterBounds:flash.geom.Rectangle;
  native public override function clone():flash.events.Event;
  native public function get beforeBounds():flash.geom.Rectangle;

  native public function get afterBounds():flash.geom.Rectangle;
  native public override function toString():String;
  static native public const MOVING:String = "moving";
  static native public const MOVE:String = "move";
  static native public const RESIZING:String = "resizing";

  static native public const RESIZE:String = "resize";
}


[native(cls="StringToolsClass",instance="StringToolsObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.StringTools extends Object
{
  native public function StringTools(requestedLocaleIDName:String):*;
  native private function ctor(requestedLocaleIDName:String):void;
  native public function get lastOperationStatus():String;
  native public function get requestedLocaleIDName():String;

  native public function get actualLocaleIDName():String;
  native public function toLowerCase(s:String):String;
  native public function toUpperCase(s:String):String;
  static native public final function getAvailableLocaleIDNames():Vector.<String>;
}


[Version("10")]
public final class flash.text.engine.LineJustification extends Object
{
  native public function LineJustification():*;

  static native public const UNJUSTIFIED:String = "unjustified";
  static native public const ALL_BUT_LAST:String = "allButLast";
  static native public const ALL_INCLUDING_LAST:String = "allIncludingLast";
  [API("674")]
  static native public const ALL_BUT_MANDATORY_BREAK:String = "allButMandatoryBreak";
}


[native(cls="StyleSheetClass",instance="StyleSheetObject",methods="auto")]
public dynamic class flash.text.StyleSheet extends flash.events.EventDispatcher
{
  native public function StyleSheet():*;

  native public function getStyle(styleName:String):Object;
  native public function setStyle(styleName:String,styleObject:Object):void;
  native public function clear():void;
  native public function get styleNames():Array;
  native public function transform(formatObject:Object):flash.text.TextFormat;

  native public function parseCSS(CSSText:String):void;
  native private var _css:Object;
  native private function get _styles():Object;
  native private function set _styles(styles:Object):void;
  native private function doTransform(n:String):void;

  native private function _copy(o:Object):Object;
  native private function _update():void;
  native private function _parseCSSInternal(cssText:String):Object;
  native private function _parseCSSFontFamily(fontFamily:String):String;
  native private function _parseColor(color:String):uint;
}


[native(cls="ShaderInputClass",instance="ShaderInputObject",methods="auto")]
[Version("10")]
public final dynamic class flash.display.ShaderInput extends Object
{

  native public function ShaderInput():*;
  native public function get input():Object;
  native public function set input(input:Object):void;
  native public function get width():int;
  native public function set width(value:int):void;

  native public function get height():int;
  native public function set height(value:int):void;
  native public function get channels():int;
  native public function get index():int;
}


[API("688")]
public final class flash.media.StageVideoAvailabilityReason extends Object
{
  native public function StageVideoAvailabilityReason():*;

  static native public const NO_ERROR:String = "noError";
  static native public const WMODE_INCOMPATIBLE:String = "wModeIncompatible";
  static native public const USER_DISABLED:String = "userDisabled";
  static native public const DRIVER_TOO_OLD:String = "driverTooOld";
  static native public const UNAVAILABLE:String = "unavailable";
}


[Version("air2.0")]
public class flash.net.NetworkInterface extends Object
{

  native public function NetworkInterface():*;
  native private var _name:String = "";
  native public function get name():String;
  native public function set name(value:String):void;
  native private var _displayName:String = "";

  native public function get displayName():String;
  native public function set displayName(value:String):void;
  native private var _addresses:Vector.<flash.net.InterfaceAddress>;
  native public function get addresses():Vector.<flash.net.InterfaceAddress>;
  native public function set addresses(value:Vector.<flash.net.InterfaceAddress>):void;

  native private var _mtu:int = -1;
  native public function get mtu():int;
  native public function set mtu(value:int):void;
  native private var _hardwareAddress:String = "";
  native public function get hardwareAddress():String;

  native public function set hardwareAddress(value:String):void;
  native private var _parent:NetworkInterface = null;
  native public function get parent():NetworkInterface;
  native public function set parent(value:NetworkInterface):void;
  native private var _subInterfaces:Vector.<flash.net.NetworkInterface>;

  native public function get subInterfaces():Vector.<flash.net.NetworkInterface>;
  native public function set subInterfaces(value:Vector.<flash.net.NetworkInterface>):void;
  native private var _active:Boolean = false;
  native public function get active():Boolean;
  native public function set active(value:Boolean):void;
}


[API("662")]
public class flash.net.NetStreamPlayTransitions extends Object
{

  native public function NetStreamPlayTransitions():*;
  static native public const APPEND:String = "append";
  static native public const RESET:String = "reset";
  static native public const SWITCH:String = "switch";
  static native public const SWAP:String = "swap";

  static native public const STOP:String = "stop";
  [API("667")]
  static native public const RESUME:String = "resume";
  [API("667")]
  static native public const APPEND_AND_WAIT:String = "appendAndWait";
}


[API("661")]
public class flash.data.SQLColumnNameStyle extends Object
{
  native public function SQLColumnNameStyle():*;
  static native public const DEFAULT:String = "default";

  static native public const LONG:String = "long";
  static native public const SHORT:String = "short";
}


[API("680")]
public final class flash.display.BitmapEncodingColorSpace extends Object
{
  native public function BitmapEncodingColorSpace():*;
  static native public const COLORSPACE_AUTO:String = "auto";
  static native public const COLORSPACE_4_4_4:String = "4:4:4";

  static native public const COLORSPACE_4_2_2:String = "4:2:2";
  static native public const COLORSPACE_4_2_0:String = "4:2:0";
}


[API("703")]
public final class flash.display3D.Context3DFillMode extends Object
{
  native public function Context3DFillMode():*;
  static native public const WIREFRAME:String = "wireframe";
  static native public const SOLID:String = "solid";
}


public final class flash.display.InterpolationMethod extends Object
{

  native public function InterpolationMethod():*;
  static native public const RGB:String = "rgb";
  static native public const LINEAR_RGB:String = "linearRGB";
}


public final dynamic class flash.media.ID3Info extends Object
{
  native public function ID3Info():*;
  native public var songName:String;

  native public var artist:String;
  native public var album:String;
  native public var year:String;
  native public var comment:String;
  native public var genre:String;

  native public var track:String;
}


[Version("air2.0")]
public class flash.net.dns.PTRRecord extends flash.net.dns.ResourceRecord
{
  native public function PTRRecord():*;
  native private var _ptrdName:String = "";
  native public function get ptrdName():String;
  native public function set ptrdName(value:String):void;
}


[Version("10.1")]
public final class flash.system.TouchscreenType extends Object
{

  native public function TouchscreenType():*;
  static native public const FINGER:String = "finger";
  static native public const STYLUS:String = "stylus";
  static native public const NONE:String = "none";
}


[API("667")]
public class flash.events.DRMAuthenticationCompleteEvent extends flash.events.Event
{
  native public function DRMAuthenticationCompleteEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,inServerURL:String = null,inDomain:String = null,inToken:flash.utils.ByteArray = null):*;

  native public override function clone():flash.events.Event;
  native private var m_serverURL:String;
  native private var m_domain:String;
  native private var m_token:flash.utils.ByteArray;
  native public function get serverURL():String;

  native public function set serverURL(value:String):void;
  native public function get domain():String;
  native public function set domain(value:String):void;
  native public function get token():flash.utils.ByteArray;
  native public function set token(value:flash.utils.ByteArray):void;

  static native public const AUTHENTICATION_COMPLETE:String = "authenticationComplete";
}


public class flash.events.SecurityErrorEvent extends flash.events.ErrorEvent
{
  native public function SecurityErrorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,text:String = "",id:int = 0):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  static native public const SECURITY_ERROR:String = "securityError";
}


[API("682")]
[native(cls="AuthorizedFeaturesClass",gc="exact",instance="AuthorizedFeaturesObject",methods="auto",construct="native")]
[ExcludeClass]
public final class flash.system.AuthorizedFeatures extends Object
{

  native public function AuthorizedFeatures():*;
  native public function createApplicationInstaller(strings:XML,icon:flash.utils.ByteArray):flash.system.ApplicationInstaller;
  native public function enableDiskCache(stream:flash.net.URLStream):Boolean;
  native internal function isFeatureEnabled(feature:String,data:String = null):Boolean;
  native internal function isNegativeToken():Boolean;
}


[native(cls="SoundClass",gc="exact",instance="SoundObject",methods="auto")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="id3",type="flash.events.Event")]
[Event(name="complete",type="flash.events.Event")]
[Event(name="sampleData",type="flash.events.SampleDataEvent")]
public class flash.media.Sound extends flash.events.EventDispatcher
{

  native public function Sound(stream:flash.net.URLRequest = null,context:flash.media.SoundLoaderContext = null):*;
  native public function load(stream:flash.net.URLRequest,context:flash.media.SoundLoaderContext = null):void;
  [API("674")]
  native public function loadCompressedDataFromByteArray(bytes:flash.utils.ByteArray,bytesLength:uint):void;
  [API("674")]
  native public function loadPCMFromByteArray(bytes:flash.utils.ByteArray,samples:uint,format:String = "float",stereo:Boolean = true,sampleRate:Number = 44100.0):void;
  native private function _buildLoaderContext(context:flash.media.SoundLoaderContext):flash.media.SoundLoaderContext;

  native private function _load(stream:flash.net.URLRequest,checkPolicyFile:Boolean,bufferTime:Number):void;
  native public function get url():String;
  native public function get isURLInaccessible():Boolean;
  native public function play(startTime:Number = 0,loops:int = 0,sndTransform:flash.media.SoundTransform = null):flash.media.SoundChannel;
  native public function get length():Number;

  native public function get isBuffering():Boolean;
  native public function get bytesLoaded():uint;
  native public function get bytesTotal():int;
  native public function get id3():flash.media.ID3Info;
  native public function close():void;

  [Version("10")]
  native public function extract(target:flash.utils.ByteArray,length:Number,startPosition:Number = -1):Number;
}


[Version("air2.0")]
public final class flash.printing.PrintMethod extends Object
{
  native public function PrintMethod():*;
  static native public const AUTO:String = "auto";
  static native public const VECTOR:String = "vector";
  static native public const BITMAP:String = "bitmap";
}


[native(cls="WorkerDomainClass",instance="WorkerDomainObject",methods="auto",construct="native")]
[API("680")]
public final class flash.system.WorkerDomain extends Object
{

  native public function WorkerDomain():*;
  native public function createWorker(swf:flash.utils.ByteArray,giveAppPrivileges:Boolean = false):flash.system.Worker;
  native public function listWorkers():Vector.<flash.system.Worker>;
  static native public final function get isSupported():Boolean;
  static native public final function get current():WorkerDomain;

  static native private var _current:WorkerDomain;
}


[API("661")]
[native(cls="SystemTrayIconClass",instance="SystemTrayIconObject",methods="auto",construct="native")]
[Event(name="rightClick",type="flash.events.ScreenMouseEvent")]
[Event(name="rightMouseUp",type="flash.events.ScreenMouseEvent")]
[Event(name="rightMouseDown",type="flash.events.ScreenMouseEvent")]
[Event(name="click",type="flash.events.ScreenMouseEvent")]
[Event(name="mouseUp",type="flash.events.ScreenMouseEvent")]
[Event(name="mouseDown",type="flash.events.ScreenMouseEvent")]
public class flash.desktop.SystemTrayIcon extends flash.desktop.InteractiveIcon
{
  native public function SystemTrayIcon():*;
  native public override function set bitmaps(value:Array):void;
  native public override function get bitmaps():Array;
  native public override function get width():int;

  native public override function get height():int;
  native public function get tooltip():String;
  native public function set tooltip(value:String):void;
  native public function get menu():flash.display.NativeMenu;
  native public function set menu(value:flash.display.NativeMenu):void;

  static native public const MAX_TIP_LENGTH:Number = 63;
}


[native(cls="URLStreamClass",instance="URLStreamObject",methods="auto")]
[Event(name="progress",type="flash.events.ProgressEvent")]
[Event(name="open",type="flash.events.Event")]
[Event(name="ioError",type="flash.events.IOErrorEvent")]
[Event(name="httpResponseStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="httpStatus",type="flash.events.HTTPStatusEvent")]
[Event(name="securityError",type="flash.events.SecurityErrorEvent")]
[Event(name="complete",type="flash.events.Event")]
public class flash.net.URLStream extends flash.events.EventDispatcher
  implements flash.utils.IDataInput
{
  native public function URLStream():*;
  native public function load(request:flash.net.URLRequest):void;
  native public function readBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function readBoolean():Boolean;

  native public function readByte():int;
  native public function readUnsignedByte():uint;
  native public function readShort():int;
  native public function readUnsignedShort():uint;
  native public function readUnsignedInt():uint;

  native public function readInt():int;
  native public function readFloat():Number;
  native public function readDouble():Number;
  native public function readMultiByte(length:uint,charSet:String):String;
  native public function readUTF():String;

  native public function readUTFBytes(length:uint):String;
  native public function get connected():Boolean;
  native public function get bytesAvailable():uint;
  native public function close():void;
  native public function readObject():*;

  native public function get objectEncoding():uint;
  native public function set objectEncoding(version:uint):void;
  native public function get endian():String;
  native public function set endian(type:String):void;
  native public function get diskCacheEnabled():Boolean;

  native public function get position():Number;
  native public function set position(offset:Number):void;
  native public function get length():Number;
  native public function stop():void;
}


[API("674")]
public class flash.events.OutputProgressEvent extends flash.events.Event
{
  native public function OutputProgressEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,bytesPending:Number = 0,bytesTotal:Number = 0):*;

  native private var m_bytesPending:Number;
  native private var m_bytesTotal:Number;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get bytesPending():Number;

  native public function set bytesPending(value:Number):void;
  native public function get bytesTotal():Number;
  native public function set bytesTotal(value:Number):void;
  static native public const OUTPUT_PROGRESS:String = "outputProgress";
}


[native(cls="SimpleButtonClass",gc="exact",instance="SimpleButtonObject",methods="auto")]
public class flash.display.SimpleButton extends flash.display.InteractiveObject
{
  native public function SimpleButton(upState:flash.display.DisplayObject = null,overState:flash.display.DisplayObject = null,downState:flash.display.DisplayObject = null,hitTestState:flash.display.DisplayObject = null):*;

  native private function _updateButton():void;
  native public function get useHandCursor():Boolean;
  native public function set useHandCursor(value:Boolean):void;
  native public function get enabled():Boolean;
  native public function set enabled(value:Boolean):void;

  native public function get trackAsMenu():Boolean;
  native public function set trackAsMenu(value:Boolean):void;
  native public function get upState():flash.display.DisplayObject;
  native public function set upState(value:flash.display.DisplayObject):void;
  native public function get overState():flash.display.DisplayObject;

  native public function set overState(value:flash.display.DisplayObject):void;
  native public function get downState():flash.display.DisplayObject;
  native public function set downState(value:flash.display.DisplayObject):void;
  native public function get hitTestState():flash.display.DisplayObject;
  native public function set hitTestState(value:flash.display.DisplayObject):void;

  native public function get soundTransform():flash.media.SoundTransform;
  native public function set soundTransform(sndTransform:flash.media.SoundTransform):void;
}


[native(cls="JPEGXREncoderOptionsClass",instance="JPEGXREncoderOptionsObject",methods="auto")]
[API("680")]
public final class flash.display.JPEGXREncoderOptions extends Object
{
  native public function JPEGXREncoderOptions(quantization:uint = 20,colorSpace:String = "auto",trimFlexBits:uint = 0):*;
  native public var quantization:uint;
  native public var colorSpace:String;

  native public var trimFlexBits:uint;
}


public final class flash.display.GradientType extends Object
{
  native public function GradientType():*;
  static native public const LINEAR:String = "linear";
  static native public const RADIAL:String = "radial";
}


[API("669")]
public class flash.events.LocationChangeEvent extends flash.events.Event
{
  native public function LocationChangeEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,location:String = null):*;

  native private var m_location:String;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get location():String;
  native public function set location(value:String):void;

  static native public const LOCATION_CHANGE:String = "locationChange";
  static native public const LOCATION_CHANGING:String = "locationChanging";
}


[native(cls="CurrencyFormatterClass",instance="CurrencyFormatterObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.CurrencyFormatter extends Object
{
  native public function CurrencyFormatter(requestedLocaleIDName:String):*;
  native private function ctor(requestedLocaleIDName:String):void;
  native public function get currencyISOCode():String;

  native public function get currencySymbol():String;
  native public function setCurrency(currencyISOCode:String,currencySymbol:String):void;
  native public function format(value:Number,withCurrencySymbol:Boolean = false):String;
  native private function formatImplementation(value:Number,withCurrencySymbol:Boolean):String;
  native public function formattingWithCurrencySymbolIsSafe(requestedISOCode:String):Boolean;

  native public function parse(inputString:String):flash.globalization.CurrencyParseResult;
  native public function get lastOperationStatus():String;
  native public function get requestedLocaleIDName():String;
  native public function get actualLocaleIDName():String;
  native public function get fractionalDigits():int;

  native public function set fractionalDigits(value:int):void;
  native public function get useGrouping():Boolean;
  native public function set useGrouping(value:Boolean):void;
  native public function get groupingPattern():String;
  native public function set groupingPattern(value:String):void;

  native public function get digitsType():uint;
  native public function set digitsType(value:uint):void;
  native public function get decimalSeparator():String;
  native public function set decimalSeparator(value:String):void;
  native public function get groupingSeparator():String;

  native public function set groupingSeparator(value:String):void;
  native public function get negativeSymbol():String;
  native public function set negativeSymbol(value:String):void;
  native public function get negativeCurrencyFormat():uint;
  native public function set negativeCurrencyFormat(value:uint):void;

  native public function get positiveCurrencyFormat():uint;
  native public function set positiveCurrencyFormat(value:uint):void;
  native public function get leadingZero():Boolean;
  native public function set leadingZero(value:Boolean):void;
  native public function get trailingZeros():Boolean;

  native public function set trailingZeros(value:Boolean):void;
  static native public final function getAvailableLocaleIDNames():Vector.<String>;
}


public dynamic class flash.net.URLVariables extends Object
{
  native public function URLVariables(source:String = null):*;
  native public function decode(source:String):void;
  native public function toString():String;

  native private function _unescape(value:String):String;
}


public final class flash.printing.PrintJobOrientation extends Object
{
  native public function PrintJobOrientation():*;
  static native public const LANDSCAPE:String = "landscape";
  static native public const PORTRAIT:String = "portrait";
}

[API("674")]
[native("FlashCryptoScript::generateRandomBytes")]
native public function flash.crypto.generateRandomBytes(numberRandomBytes:uint):flash.utils.ByteArray;


[API("672")]
public class flash.events.NetMonitorEvent extends flash.events.Event
{

  native public function NetMonitorEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,netStream:flash.net.NetStream = null):*;
  native private var m_netStream:flash.net.NetStream;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get netStream():flash.net.NetStream;

  static native public const NET_STREAM_CREATE:String = "netStreamCreate";
}


[Version("10")]
public final class flash.text.engine.TextLineValidity extends Object
{
  native public function TextLineValidity():*;
  static native public const VALID:String = "valid";
  static native public const POSSIBLY_INVALID:String = "possiblyInvalid";
  static native public const INVALID:String = "invalid";

  static native public const STATIC:String = "static";
}


[native(cls="TextSnapshotClass",instance="TextSnapshotObject",methods="auto",construct="native")]
public class flash.text.TextSnapshot extends Object
{
  native public function TextSnapshot():*;
  native public function findText(beginIndex:int,textToFind:String,caseSensitive:Boolean):int;
  native public function get charCount():int;
  native public function getSelected(beginIndex:int,endIndex:int):Boolean;

  native public function getSelectedText(includeLineEndings:Boolean = false):String;
  native public function getText(beginIndex:int,endIndex:int,includeLineEndings:Boolean = false):String;
  native public function getTextRunInfo(beginIndex:int,endIndex:int):Array;
  native public function hitTestTextNearPos(x:Number,y:Number,maxDistance:Number = 0):Number;
  native public function setSelectColor(hexColor:uint = 16776960):void;

  native public function setSelected(beginIndex:int,endIndex:int,select:Boolean):void;
}


[native(cls="LoaderClass",gc="exact",instance="LoaderObject",methods="auto")]
public class flash.display.Loader extends flash.display.DisplayObjectContainer
{
  native public function Loader():*;
  native public function load(request:flash.net.URLRequest,context:flash.system.LoaderContext = null):void;
  native private function _getJPEGLoaderContextdeblockingfilter(context:Object):Number;
  native private function _buildLoaderContext(context:flash.system.LoaderContext):flash.system.LoaderContext;

  native public function loadBytes(bytes:flash.utils.ByteArray,context:flash.system.LoaderContext = null):void;
  native private function _loadBytes(bytes:flash.utils.ByteArray,checkPolicyFile:Boolean,applicationDomain:flash.system.ApplicationDomain,securityDomain:flash.system.SecurityDomain,requestedContentParent:flash.display.DisplayObjectContainer,parameters:Object,deblockingFilter:Number,allowLoadBytesCodeExecution:Boolean,imageDecodingPolicy:String):void;
  native public function close():void;
  native public function unload():void;
  [Version("10")]
  native public function unloadAndStop(gc:Boolean = true):void;

  native private function _unload(halt:Boolean,gc:Boolean):void;
  native private function _close():void;
  native public function get content():flash.display.DisplayObject;
  native public function get contentLoaderInfo():flash.display.LoaderInfo;
  [Inspectable(environment="none")]
  native public override function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;

  [Inspectable(environment="none")]
  native public override function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  [Inspectable(environment="none")]
  native public override function removeChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  [Inspectable(environment="none")]
  native public override function removeChildAt(index:int):flash.display.DisplayObject;
  [Inspectable(environment="none")]
  native public override function setChildIndex(child:flash.display.DisplayObject,index:int):void;
  [Version("10.1")]
  native public function get uncaughtErrorEvents():flash.events.UncaughtErrorEvents;

  native private function _getUncaughtErrorEvents():flash.events.UncaughtErrorEvents;
  native private function _setUncaughtErrorEvents(value:flash.events.UncaughtErrorEvents):void;
  native private function _load(request:flash.net.URLRequest,checkPolicyFile:Boolean,applicationDomain:flash.system.ApplicationDomain,securityDomain:flash.system.SecurityDomain,requestedContentParent:flash.display.DisplayObjectContainer,parameters:Object,deblockingFilter:Number,allowCodeExecution:Boolean,imageDecodingPolicy:String):void;
  native private var _stream:flash.utils.IDataInput;
  native private var _iED:flash.events.IEventDispatcher;

  native private var _ba:flash.utils.ByteArray;
  native private var _isPromiseLoading:Boolean;
  [API("669")]
  native public function loadFilePromise(promise:flash.desktop.IFilePromise,context:flash.system.LoaderContext = null):void;
  native private function unregisterPromiseStreamListeners():void;
  native private function onPromiseComplete(e:flash.events.Event):void;

  native private function promiseReadBytes():void;
  native private function onPromiseProgress(e:flash.events.Event):void;
  native private function onPromiseClose(e:flash.events.Event):void;
  native private function onPromiseIOError(e:flash.events.IOErrorEvent):void;
  native private function _loadFilePromiseStart(checkPolicyFile:Boolean,applicationDomain:flash.system.ApplicationDomain,securityDomain:flash.system.SecurityDomain,requestedContentParent:flash.display.DisplayObjectContainer,parameters:Object,deblockingFilter:Number,allowLoadBytesCodeExecution:Boolean):void;

  native private function _promiseLoadCompleted():void;
  native private function _promiseLoadClose():void;
  native private function _promiseLoadProgress(bytes:flash.utils.ByteArray):void;
  native private function _dispatchIOErrorEvent(errorID:int):void;
  static native private final function cloneParams(lc:flash.system.LoaderContext):void;

  static native private const kStreamError:uint = 2032;
  static native private const kNullPointerError:uint = 2007;
}


public class flash.events.FullScreenEvent extends flash.events.ActivityEvent
{
  native public function FullScreenEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,fullScreen:Boolean = false,interactive:Boolean = false):*;
  native private var m_fullScreen:Boolean;
  native private var m_interactive:Boolean;

  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get fullScreen():Boolean;
  [API("680")]
  native public function get interactive():Boolean;
  static native public const FULL_SCREEN:String = "fullScreen";

  static native public const FULL_SCREEN_INTERACTIVE_ACCEPTED:String = "fullScreenInteractiveAccepted";
}


[native(cls="ObjectOutputClass",gc="exact",instance="ObjectOutputObject",methods="auto")]
public class flash.utils.ObjectOutput extends Object
  implements flash.utils.IDataOutput
{
  native public function ObjectOutput():*;
  native public function writeBytes(bytes:flash.utils.ByteArray,offset:uint = 0,length:uint = 0):void;
  native public function writeBoolean(value:Boolean):void;
  native public function writeByte(value:int):void;

  native public function writeShort(value:int):void;
  native public function writeInt(value:int):void;
  native public function writeUnsignedInt(value:uint):void;
  native public function writeFloat(value:Number):void;
  native public function writeDouble(value:Number):void;

  native public function writeMultiByte(value:String,charSet:String):void;
  native public function writeUTF(value:String):void;
  native public function writeUTFBytes(value:String):void;
  native public function writeObject(object:*):void;
  native public function get objectEncoding():uint;

  native public function set objectEncoding(version:uint):void;
  native public function get endian():String;
  native public function set endian(type:String):void;
}


public interface flash.utils.IExternalizable
{
  native function writeExternal(output:flash.utils.IDataOutput):void;
  native function readExternal(input:flash.utils.IDataInput):void;
}


[native(cls="FontDescriptionClass",instance="FontDescriptionObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.FontDescription extends Object
{

  native public function FontDescription(fontName:String = "_serif",fontWeight:String = "normal",fontPosture:String = "normal",fontLookup:String = "device",renderingMode:String = "cff",cffHinting:String = "horizontalStem"):*;
  native public function get renderingMode():String;
  native public function set renderingMode(value:String):void;
  native public function get fontLookup():String;
  native public function set fontLookup(value:String):void;

  native public function get fontName():String;
  native public function set fontName(value:String):void;
  native public function get fontPosture():String;
  native public function set fontPosture(value:String):void;
  native public function get fontWeight():String;

  native public function set fontWeight(value:String):void;
  native public function get cffHinting():String;
  native public function set cffHinting(value:String):void;
  native public function get locked():Boolean;
  native public function set locked(value:Boolean):void;

  native public function clone():FontDescription;
  static native public final function isFontCompatible(fontName:String,fontWeight:String,fontPosture:String):Boolean;
  [Version("10.1")]
  static native public final function isDeviceFontCompatible(fontName:String,fontWeight:String,fontPosture:String):Boolean;
}


[native(cls="NumberParseResultClass",instance="NumberParseResultObject",methods="auto")]
[Version("10.1")]
public final class flash.globalization.NumberParseResult extends Object
{
  native public function NumberParseResult(value:Number = NaN,startIndex:int = 2147483647,endIndex:int = 2147483647):*;
  native private function ctor(value:Number,startIndex:int,endIndex:int):void;

  native public function get value():Number;
  native public function get startIndex():int;
  native public function get endIndex():int;
}


[native(cls="StageCaptureEventClass",instance="StageCaptureEventObject",methods="auto")]
[ExcludeClass]
public class flash.automation.StageCaptureEvent extends flash.events.Event
{
  native public function StageCaptureEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,url:String = "",checksum:uint = 0,pts:Number = 0):*;
  native private var m_url:String;

  native private var m_checksum:uint;
  native private var m_pts:Number;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get url():String;

  native public function get checksum():uint;
  native public function get pts():Number;
  static native public const CAPTURE:String = "capture";
}


[API("661")]
public class flash.events.SQLUpdateEvent extends flash.events.Event
{
  native public function SQLUpdateEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,table:String = null,rowID:Number = 0):*;
  native public function get table():String;

  native public function get rowID():Number;
  native public override function clone():flash.events.Event;
  native private var _kind:String;
  native private var _rowID:Number;
  native private var _table:String;

  static native public const UPDATE:String = "update";
  static native public const INSERT:String = "insert";
  static native public const DELETE:String = "delete";
}


[Version("air2.0")]
public final class flash.desktop.SystemIdleMode extends Object
{
  native public function SystemIdleMode():*;
  static native public const NORMAL:String = "normal";

  static native public const KEEP_AWAKE:String = "keepAwake";
}


[API("675")]
public final class flash.media.CameraPosition extends Object
{
  native public function CameraPosition():*;
  static native public const FRONT:String = "front";
  static native public const BACK:String = "back";
  static native public const UNKNOWN:String = "unknown";
}


[API("661")]
[native(cls="SQLConnectionClass",instance="SQLConnectionObject",methods="auto")]
[Event(name="update",type="flash.events.SQLUpdateEvent")]
[Event(name="setSavepoint",type="flash.events.SQLEvent")]
[Event(name="schema",type="flash.events.SQLEvent")]
[Event(name="rollbackToSavepoint",type="flash.events.SQLEvent")]
[Event(name="rollback",type="flash.events.SQLEvent")]
[Event(name="releaseSavepoint",type="flash.events.SQLEvent")]
[Event(name="reencrypt",type="flash.events.SQLEvent")]
[Event(name="open",type="flash.events.SQLEvent")]
[Event(name="insert",type="flash.events.SQLUpdateEvent")]
[Event(name="error",type="flash.events.SQLErrorEvent")]
[Event(name="detach",type="flash.events.SQLEvent")]
[Event(name="delete",type="flash.events.SQLUpdateEvent")]
[Event(name="deanalyze",type="flash.events.SQLEvent")]
[Event(name="commit",type="flash.events.SQLEvent")]
[Event(name="close",type="flash.events.SQLEvent")]
[Event(name="compact",type="flash.events.SQLEvent")]
[Event(name="cancel",type="flash.events.SQLEvent")]
[Event(name="begin",type="flash.events.SQLEvent")]
[Event(name="attach",type="flash.events.SQLEvent")]
[Event(name="analyze",type="flash.events.SQLEvent")]
public class flash.data.SQLConnection extends flash.events.EventDispatcher
{

  native public function SQLConnection():*;
  native public function get autoCompact():Boolean;
  native public function get connected():Boolean;
  native public function get cacheSize():uint;
  native public function set cacheSize(value:uint):void;

  native public function get columnNameStyle():String;
  native public function set columnNameStyle(value:String):void;
  native public function get inTransaction():Boolean;
  native public function get lastInsertRowID():Number;
  native public function get pageSize():uint;

  native public function get totalChanges():Number;
  native public override function addEventListener(type:String,listener:Function,useCapture:Boolean = false,priority:int = 0.0,useWeakReference:Boolean = false):void;
  native public function analyze(resourceName:String = null,responder:flash.net.Responder = null):void;
  native public function attach(name:String,reference:Object = null,responder:flash.net.Responder = null,encryptionKey:flash.utils.ByteArray = null):void;
  native public function begin(option:String = null,responder:flash.net.Responder = null):void;

  native public function cancel(responder:flash.net.Responder = null):void;
  native public function commit(responder:flash.net.Responder = null):void;
  native public function compact(responder:flash.net.Responder = null):void;
  native public function close(responder:flash.net.Responder = null):void;
  native public function deanalyze(responder:flash.net.Responder = null):void;

  native public function detach(name:String,responder:flash.net.Responder = null):void;
  native public function getSchemaResult():flash.data.SQLSchemaResult;
  native public function loadSchema(type:Class = null,name:String = null,database:String = "main",includeColumnSchema:Boolean = true,responder:flash.net.Responder = null):void;
  native public function open(reference:Object = null,openMode:String = "create",autoCompact:Boolean = false,pageSize:int = 1024,encryptionKey:flash.utils.ByteArray = null):void;
  native public function openAsync(reference:Object = null,openMode:String = "create",responder:flash.net.Responder = null,autoCompact:Boolean = false,pageSize:int = 1024,encryptionKey:flash.utils.ByteArray = null):void;

  [API("663")]
  native public function reencrypt(newEncryptionKey:flash.utils.ByteArray,responder:flash.net.Responder = null):void;
  [Version("air2.0")]
  native public function releaseSavepoint(name:String = null,responder:flash.net.Responder = null):void;
  native public override function removeEventListener(type:String,listener:Function,useCapture:Boolean = false):void;
  native public function rollback(responder:flash.net.Responder = null):void;
  [Version("air2.0")]
  native public function rollbackToSavepoint(name:String = null,responder:flash.net.Responder = null):void;

  [Version("air2.0")]
  native public function setSavepoint(name:String = null,responder:flash.net.Responder = null):void;
  native private function checkConnected():void;
  native private function checkKey(key:flash.utils.ByteArray,reference:Object):void;
  native private function checkNotInTransaction():void;
  native private function checkTransactionActive():void;

  native private function getSavepointName(value:String,create:Boolean = true):String;
  native private function internalAnalyze(value:String,responder:flash.net.Responder):void;
  native private function internalAttach(name:String,reference:Object,responder:flash.net.Responder,key:flash.utils.ByteArray):void;
  native private function internalBegin(value:String,responder:flash.net.Responder):void;
  native private function internalCancel(responder:flash.net.Responder):void;

  native private function internalClean(responder:flash.net.Responder):void;
  native private function internalClose(responder:flash.net.Responder):void;
  native private function internalCommit(responder:flash.net.Responder):void;
  native private function internalDeanalyze(responder:flash.net.Responder):void;
  native private function internalDetach(name:String,responder:flash.net.Responder):void;

  native private function internalSetSavepoint(sql:String,responder:flash.net.Responder):void;
  native private function internalReleaseSavepoint(sql:String,responder:flash.net.Responder):void;
  native private function internalRollbackSavepoint(sql:String,responder:flash.net.Responder):void;
  native private function internalGetColumnNameStyle():String;
  native private function internalGetLastInsertRowID():Number;

  native private function internalLoadSchema(type:String,name:String,database:String,includeColumnSchema:Boolean,responder:flash.net.Responder):void;
  native private function internalOpen(reference:Object,openMode:String,autoCompact:Boolean,pageSize:int,key:flash.utils.ByteArray):void;
  native private function internalOpenAsync(reference:Object,openMode:String,responder:flash.net.Responder,autoCompact:Boolean,pageSize:int,key:flash.utils.ByteArray):void;
  native private function internalRekey(newKey:flash.utils.ByteArray,responder:flash.net.Responder):void;
  native private function internalRollback(responder:flash.net.Responder):void;

  native private function internalSetCacheSize(value:uint):void;
  native private function internalSetColumnNameStyle(value:String):void;
  native private function registerUpdateNotification():void;
  native private function unregisterUpdateNotification():void;
  native private var _allowCommitRollback:Boolean = false;

  native private var _savepoints:Array;
  [API("683")]
  static native public final function get isSupported():Boolean;
  static native private const SAVEPOINT_PREFIX:String = "$air_sp$";
}


[native(cls="X500DistinguishedNameClass",instance="X500DistinguishedNameObject",methods="auto")]
[API("674")]
public class flash.security.X500DistinguishedName extends Object
{
  native public function X500DistinguishedName():*;
  native public function get commonName():String;

  native public function get organizationName():String;
  native public function get organizationalUnitName():String;
  native public function get localityName():String;
  native public function get stateOrProvinceName():String;
  native public function get countryName():String;

  native public function toString():String;
}


public class flash.system.SecurityPrivilege extends Object
{
  native public function SecurityPrivilege():*;
  static native public const FILE:* = "file";
  static native public const FILE_READ:* = "fileRead";
  static native public const FILE_WRITE:* = "fileWrite";

  static native public const FILE_APPSTORE:* = "fileAppstore";
  static native public const FILE_PATHACCESS:* = "filePathAccess";
  static native public const FILE_TEMP:* = "fileTemp";
  static native public const FILE_WRITE_RESOURCE:* = "fileWriteResource";
  static native public const HTTP_ALL:* = "httpAll";

  static native public const HTML:* = "html";
  static native public const WINDOW:* = "window";
  static native public const SCREEN:* = "screen";
}


[Version("10")]
public final class flash.display.ColorCorrection extends Object
{
  native public function ColorCorrection():*;
  static native public const DEFAULT:String = "default";

  static native public const ON:String = "on";
  static native public const OFF:String = "off";
}


[native(cls="XMLUIClass",methods="auto",construct="none")]
public final class adobe.utils.XMLUI extends Object
{
  native public function XMLUI():*;
  static native public final function getProperty(name:String):String;
  static native public final function setProperty(name:String,value:String):void;

  static native public final function accept():void;
  static native public final function cancel():void;
}


[Version("10")]
public final class flash.text.engine.LigatureLevel extends Object
{
  native public function LigatureLevel():*;
  static native public const NONE:String = "none";
  static native public const MINIMUM:String = "minimum";

  static native public const COMMON:String = "common";
  static native public const UNCOMMON:String = "uncommon";
  static native public const EXOTIC:String = "exotic";
}


[Version("air2.0")]
public class flash.events.DNSResolverEvent extends flash.events.Event
{
  native public function DNSResolverEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,host:String = "",resourceRecords:Array = null):*;
  native public override function clone():flash.events.Event;

  native public override function toString():String;
  native private var _host:String = "";
  native public function get host():String;
  native public function set host(value:String):void;
  native private var _resourceRecords:Array = null;

  native public function get resourceRecords():Array;
  native public function set resourceRecords(value:Array):void;
  static native public const LOOKUP:String = "lookup";
}


[API("661")]
public class flash.errors.SQLErrorOperation extends Object
{
  native public function SQLErrorOperation():*;
  static native public const ANALYZE:String = "analyze";

  static native public const ATTACH:String = "attach";
  static native public const BEGIN:String = "begin";
  static native public const COMPACT:String = "compact";
  static native public const COMMIT:String = "commit";
  static native public const CLOSE:String = "close";

  static native public const DEANALYZE:String = "deanalyze";
  static native public const DETACH:String = "detach";
  static native public const EXECUTE:String = "execute";
  static native public const OPEN:String = "open";
  static native public const REENCRYPT:String = "reencrypt";

  static native public const ROLLBACK:String = "rollback";
  static native public const SCHEMA:String = "schema";
  static native public const SET_SAVEPOINT:String = "setSavepoint";
  static native public const RELEASE_SAVEPOINT:String = "releaseSavepoint";
  static native public const ROLLBACK_TO_SAVEPOINT:String = "rollbackToSavepoint";
}


[API("674")]
public class flash.media.VideoStreamSettings extends Object
{

  native public function VideoStreamSettings():*;
  native private var m_height:int;
  native private var m_width:int;
  native private var m_fps:Number;
  native private var m_bandwidth:int;

  native private var m_quality:int;
  native private var m_keyFrameInterval:int;
  [cppcall]
  native public function setMode(width:int,height:int,fps:Number):void;
  native public function get width():int;
  native public function get height():int;

  native public function get fps():Number;
  [cppcall]
  native public function setQuality(bandwidth:int,quality:int):void;
  native public function get quality():int;
  native public function get bandwidth():int;
  [cppcall]
  native public function setKeyFrameInterval(keyFrameInterval:int):void;

  native public function get keyFrameInterval():int;
  native public function get codec():String;
}


[API("674")]
public class flash.media.H264VideoStreamSettings extends flash.media.VideoStreamSettings
{
  native public function H264VideoStreamSettings():*;
  native private var m_profile:String;
  native private var m_level:String;

  native public override function get codec():String;
  [cppcall]
  native public function setProfileLevel(profile:String,level:String):void;
  native public function get profile():String;
  native public function get level():String;
}


[ExcludeClass]
[native(cls="ConfigurationClass",methods="auto",construct="none")]
public class flash.automation.Configuration extends Object
{
  native public function Configuration():*;

  static native public final function get testAutomationConfiguration():String;
  static native public final function set deviceConfiguration(configData:String):void;
  static native public final function get deviceConfiguration():String;
}


[Version("10")]
public final class flash.text.engine.JustificationStyle extends Object
{
  native public function JustificationStyle():*;
  static native public const PUSH_IN_KINSOKU:String = "pushInKinsoku";

  static native public const PUSH_OUT_ONLY:String = "pushOutOnly";
  static native public const PRIORITIZE_LEAST_ADJUSTMENT:String = "prioritizeLeastAdjustment";
}


[native(cls="URLRequestDefaultsClass",methods="auto")]
public class flash.net.URLRequestDefaults extends Object
{
  native public function URLRequestDefaults():*;
  static native public final function get followRedirects():Boolean;
  static native public final function set followRedirects(value:Boolean):void;

  static native private var _followRedirects:Boolean = true;
  static native public final function get manageCookies():Boolean;
  static native public final function set manageCookies(value:Boolean):void;
  static native private var _manageCookies:Boolean = true;
  static native public final function get authenticate():Boolean;

  static native public final function set authenticate(value:Boolean):void;
  static native private var _authenticate:Boolean = true;
  static native public final function get useCache():Boolean;
  static native public final function set useCache(value:Boolean):void;
  static native private var _useCache:Boolean = true;

  static native public final function get cacheResponse():Boolean;
  static native public final function set cacheResponse(value:Boolean):void;
  static native private var _cacheResponse:Boolean = true;
  [Version("air2.0")]
  static native public final function get idleTimeout():Number;
  [Version("air2.0")]
  static native public final function set idleTimeout(value:Number):void;

  static native private var _idleTimeout:Number = 0;
  static native public final function get userAgent():String;
  static native public final function set userAgent(value:String):void;
  static native private var _userAgent:String = null;
  static native public final function setLoginCredentialsForHost(hostname:String,user:String,password:String):*;

  static native private final function initLoginCredentials():Object;
  static native private var _loginCredentials:*;
  static native private final function initUA():String;
  static native private var _defaultUserAgent:String;
  static native private const kApplicationFeatureSecurityError:uint = 3205;
}


[Version("10.1")]
public final class flash.ui.KeyboardType extends Object
{

  native public function KeyboardType():*;
  static native public const ALPHANUMERIC:String = "alphanumeric";
  static native public const KEYPAD:String = "keypad";
  static native public const NONE:String = "none";
}


public final class flash.display.CapsStyle extends Object
{
  native public function CapsStyle():*;

  static native public const ROUND:String = "round";
  static native public const NONE:String = "none";
  static native public const SQUARE:String = "square";
}


[Version("10.1")]
public final class flash.text.ime.CompositionAttributeRange extends Object
{
  native public function CompositionAttributeRange(relativeStart:int,relativeEnd:int,selected:Boolean,converted:Boolean):void;
  native public var relativeStart:int;

  native public var relativeEnd:int;
  native public var selected:Boolean;
  native public var converted:Boolean;
}


[Version("air2.0")]
public class flash.desktop.NativeProcessStartupInfo extends Object
{
  native public function NativeProcessStartupInfo():*;
  native public function get executable():flash.filesystem.File;

  native public function set executable(value:flash.filesystem.File):void;
  native private var _executable:flash.filesystem.File = null;
  native public function get workingDirectory():flash.filesystem.File;
  native public function set workingDirectory(value:flash.filesystem.File):void;
  native private var _workingDirectory:flash.filesystem.File = null;

  native public function get arguments():Vector.<String>;
  native public function set arguments(value:Vector.<String>):void;
  native private var _args:Vector.<String>;
}


[native(cls="TabStopClass",instance="TabStopObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.TabStop extends Object
{
  native public function TabStop(alignment:String = "start",position:Number = 0.0,decimalAlignmentToken:String = ""):*;
  native public function get alignment():String;

  native public function set alignment(value:String):void;
  native public function get position():Number;
  native public function set position(value:Number):void;
  native public function get decimalAlignmentToken():String;
  native public function set decimalAlignmentToken(value:String):void;
}


public class flash.html.ControlInitializationError extends Error
{

  native public function ControlInitializationError():*;
}

[native(cls="HTMLScriptObjectClass",instance="HTMLScriptProxy::HTMLScriptObjectObject",methods="auto",construct="native")]
public final dynamic class flash.html.__HTMLScriptObject extends Object
{
  native public function __HTMLScriptObject():*;
  native private function operationComplete():void;
  native private function nativeInit(throwJSErrorClosure:Function,throwJSOperationFailedClosure:Function,throwJSObjectDeadClosure:Function,handleNSSetPropertyClosure:Function,operationCompleteFunction:Function):void;
  native private function throwJSError(jsErrorObj:*):void;

  native private function throwJSOperationFailed():void;
  native private function throwJSObjectDead():void;
  native private function handleNSSetProperty():void;
  native private function getProperty(propertyName:String):*;
  native private function nativeEnumProperties(enumProc:Function):void;

  static native private final function nativeUpdateDirtyDocuments():void;
  static native private var s_UpdateDirtyDocumentsTimer:flash.utils.Timer = null;
  static native private final function onUpdateDirtyDocumentsTimer(ev:flash.events.TimerEvent):void;
}

[native(cls="HTMLScriptArrayClass",instance="HTMLScriptProxy::HTMLScriptArrayObject",methods="auto",construct="native")]
public final dynamic class flash.html.__HTMLScriptArray extends Array
{
  native public function __HTMLScriptArray():*;
  native private function operationComplete():void;

  native private function nativeInit(throwJSErrorClosure:Function,throwJSOperationFailedClosure:Function,throwJSObjectDeadClosure:Function,handleNSSetPropertyClosure:Function,operationCompleteFunction:Function):void;
  native private function throwJSError(jsErrorObj:*):void;
  native private function throwJSOperationFailed():void;
  native private function throwJSObjectDead():void;
  native private function handleNSSetProperty():void;

  native private function getProperty(propertyName:String):*;
  native private function nativeEnumProperties(enumProc:Function):void;
  native private function nativeGetJSProperty(propertyName:String):*;
  native private function nativeSetJSProperty(propertyName:String,value:*):void;
  native private function nativeCall(jsFunction:flash.html.__HTMLScriptFunction,thisArg:Object,argArray:Array):*;

  native public override function get length():uint;
  native public override function set length(newLength:uint):*;
  native private function callJS(name:String,args:Array):*;
  native private function callJSV(name:String,... rest):*;
  native AS3 override function join(sep:* = null):String;

  native AS3 override function pop():*;
  native AS3 override function push(... rest):uint;
  native AS3 override function reverse():Array;
  native AS3 override function concat(... rest):Array;
  native AS3 override function shift():*;

  native AS3 override function slice(A:* = 0,B:* = NaN):Array;
  native AS3 override function unshift(... rest):uint;
  native AS3 override function splice(... rest):*;
  native AS3 override function sort(... rest):*;
  native AS3 override function sortOn(names:*,options:* = 0,... rest):*;

  native AS3 override function indexOf(searchElement:*,fromIndex:* = 0):int;
  native AS3 override function lastIndexOf(searchElement:*,fromIndex:* = 2147483647):int;
  native AS3 override function every(callback:Function,thisObject:* = null):Boolean;
  native AS3 override function filter(callback:Function,thisObject:* = null):Array;
  native AS3 override function forEach(callback:Function,thisObject:* = null):void;

  native AS3 override function map(callback:Function,thisObject:* = null):Array;
  native AS3 override function some(callback:Function,thisObject:* = null):Boolean;
  static native private final function nativeUpdateDirtyDocuments():void;
  static native private var s_UpdateDirtyDocumentsTimer:flash.utils.Timer = null;
  static native private final function onUpdateDirtyDocumentsTimer(ev:flash.events.TimerEvent):void;

  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="HTMLScriptFunctionClass",instance="HTMLScriptProxy::HTMLScriptFunctionObject",methods="auto",instancebase="HTMLScriptProxy::HTMLScriptFunctionObjectBase",construct="native")]
public final dynamic class flash.html.__HTMLScriptFunction extends Function
{
  native public function __HTMLScriptFunction():*;
  native private function operationComplete():void;
  native private function nativeInit(throwJSErrorClosure:Function,throwJSOperationFailedClosure:Function,throwJSObjectDeadClosure:Function,handleNSSetPropertyClosure:Function,operationCompleteFunction:Function):void;
  native private function throwJSError(jsErrorObj:*):void;

  native private function throwJSOperationFailed():void;
  native private function throwJSObjectDead():void;
  native private function handleNSSetProperty():void;
  native private function nativeEnumProperties(enumProc:Function):void;
  native private function nativeGetJSProperty(propertyName:String):*;

  native private function nativeApply(jsApply:__HTMLScriptFunction,thisArg:* = null,argArray:* = null):*;
  native public override function get prototype():*;
  native public override function set prototype(p:*):*;
  native public override function get length():int;
  native AS3 override function call(thisArg:* = null,... rest):*;

  native AS3 override function apply(thisArg:* = null,argArray:* = null):*;
  static native private final function nativeUpdateDirtyDocuments():void;
  static native private var s_UpdateDirtyDocumentsTimer:flash.utils.Timer = null;
  static native private final function onUpdateDirtyDocumentsTimer(ev:flash.events.TimerEvent):void;
  static native private const AS3:* = "http://adobe.com/AS3/2006/builtin";
}

[native(cls="HTMLBitmapClass",instance="HTMLBitmapObject",methods="IHTMLBitmapObject<HTMLBitmapObject>",construct="native")]
public class flash.html.HTMLBitmap extends Object
{

  native public function HTMLBitmap(bitmap:flash.display.BitmapData):*;
  native private function nativeInit(bitmap:flash.display.BitmapData):void;
}

[native(cls="HTMLLoaderClass",instance="HTMLLoaderObject",methods="IHTMLControlObject<HTMLLoaderObject>",construct="check")]
[Event(name="htmlDOMInitialize",type="flash.events.Event")]
[Event(name="uncaughtScriptException",type="flash.events.HTMLUncaughtScriptExceptionEvent")]
[Event(name="scroll",type="flash.events.Event")]
[Event(name="htmlBoundsChange",type="flash.events.Event")]
[Event(name="locationChange",type="flash.events.LocationChangeEvent")]
[Event(name="locationChange",type="flash.events.Event")]
[Event(name="locationChanging",type="flash.events.LocationChangeEvent")]
[Event(name="htmlRender",type="flash.events.Event")]
[Event(name="complete",type="flash.events.Event")]
public class flash.html.HTMLLoader extends flash.display.Sprite
{
  native public function HTMLLoader():*;
  native private function menuItemSelectHandler(event:flash.events.Event):void;
  native private function addSubMenuItems(contextMenu:flash.display.NativeMenu,contextMenuItems:*):void;

  native private function onContextMenu(event:flash.events.MouseEvent):void;
  native private function canShowPlugins():Boolean;
  native private function _isSimpleMatrix():Boolean;
  native private function createNewWindow(windowCreateOptions:flash.html.HTMLWindowCreateOptions):HTMLLoader;
  native private function initBareHTMLWindow(useScrollbars:Boolean):void;

  native private function set pageGroupName(groupName:String):void;
  native private function get pageGroupName():String;
  native public function loadString(htmlContent:String):void;
  native public function load(urlRequestToLoad:flash.net.URLRequest):void;
  native public function get loaded():Boolean;

  native public function reload():void;
  native public function cancelLoad():void;
  native public function get location():String;
  native public function get contentWidth():Number;
  native public function get contentHeight():Number;

  native public override function get width():Number;
  native public override function set width(widthInPixels:Number):void;
  native public override function get height():Number;
  native public override function set height(heightInPixels:Number):void;
  native public function get scrollH():Number;

  native public function set scrollH(newScrollH:Number):void;
  native public function get scrollV():Number;
  native public function set scrollV(newScrollV:Number):void;
  native public function get window():Object;
  native public function get runtimeApplicationDomain():flash.system.ApplicationDomain;

  native public function set runtimeApplicationDomain(value:flash.system.ApplicationDomain):void;
  native public function get userAgent():String;
  native public function set userAgent(value:String):void;
  native private function get language():String;
  native private function set language(value:String):void;

  native public function get manageCookies():Boolean;
  native public function set manageCookies(value:Boolean):void;
  native public function get useCache():Boolean;
  native public function set useCache(value:Boolean):void;
  native public function get cacheResponse():Boolean;

  native public function set cacheResponse(value:Boolean):void;
  native private function _SetIdleTimeout(value:Number):void;
  [Version("air2.0")]
  native public function get idleTimeout():Number;
  [Version("air2.0")]
  native public function set idleTimeout(value:Number):void;
  native public function get authenticate():Boolean;

  native public function set authenticate(value:Boolean):void;
  [API("663")]
  native public function get placeLoadStringContentInApplicationSandbox():Boolean;
  [API("663")]
  native public function set placeLoadStringContentInApplicationSandbox(value:Boolean):void;
  native public function get paintsDefaultBackground():Boolean;
  native public function set paintsDefaultBackground(newValue:Boolean):void;

  native public function get textEncodingOverride():String;
  native public function set textEncodingOverride(newValue:String):void;
  native public function get textEncodingFallback():String;
  native public function set textEncodingFallback(newValue:String):void;
  native private function get m_contentWidth():uint;

  native private function get m_contentHeight():uint;
  native private function covertNumberArgumentToInt(numberArg:Number,argumentName:String):int;
  native private function validateNewDimensions(width:uint,height:uint):void;
  native private function ensureBitmap():void;
  native private function onResizeRootContent(event:flash.events.Event):void;

  native private function windowOnClose(ev:flash.events.Event):void;
  native private const adobeAppProtocolPrefix:String = "app:/";
  native private function loadHTMLString_impl(htmlContent:String):void;
  native private function nativeLoadHTMLFromURLRequest(urlRequest:flash.net.URLRequest):void;
  native private function set m_Width(widthInPixels:uint):void;

  native private function get m_Width():uint;
  native private function set m_Height(heightInPixels:uint):void;
  native private function get m_Height():uint;
  native private function validateDimensions(widthInPixels:uint,heightInPixels:uint):Boolean;
  native private function initHTMLEngine(eventSprite:flash.display.Sprite):void;

  native private function nativeLayout():void;
  native private function nativePaint(dirtyRect:flash.geom.Rectangle,bitmapDirtyRect:flash.geom.Rectangle):void;
  native private function set m_BitmapData(bitmapData:flash.display.BitmapData):*;
  native private function get m_BitmapData():flash.display.BitmapData;
  native private function invalidate():void;

  native private function invalidateRect(dirtyRect:flash.geom.Rectangle):void;
  native private function paint(dirtyRect:flash.geom.Rectangle):void;
  native private function onPaintTimer(ev:flash.events.TimerEvent):void;
  native private function onHTMLBoundsChangeTimer(ev:flash.events.TimerEvent):void;
  native private function closePopupWindowIfNeeded():void;

  native private function nativeOnMouseDown(localX:int,localY:int,screenX:int,screenY:int,mouseButton:uint,clickCount:uint,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function nativeOnMouseUp(localX:int,localY:int,screenX:int,screenY:int,mouseButton:uint,clickCount:uint,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function nativeOnMouseMove(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean,buttonDown:Boolean):Boolean;
  native private function nativeOnMouseWheel(localX:int,localY:int,screenX:int,screenY:int,deltaX:int,deltaY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function nativeOnContextMenuItemSelect(actionID:int,title:String):void;

  native private function nativeOnContextMenu(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean):Boolean;
  native private function onLeftMouseDown(evt:flash.events.MouseEvent):void;
  native private function onLeftMouseUp(evt:flash.events.MouseEvent):void;
  native private function onMiddleMouseDown(evt:flash.events.MouseEvent):void;
  native private function onMiddleMouseUp(evt:flash.events.MouseEvent):void;

  native private function onRightMouseDown(evt:flash.events.MouseEvent):void;
  native private function onRightMouseUp(evt:flash.events.MouseEvent):void;
  native private var m_savedMouseCursor:String;
  native private var m_cursorSaved:Boolean = false;
  native private function onMouseOut(evt:flash.events.MouseEvent):void;

  native private function onMouseMove(evt:flash.events.MouseEvent):void;
  native private function onMouseWheel(evt:flash.events.MouseEvent):void;
  native private function invokeMouseDownImpl(evt:flash.events.MouseEvent,mouseButton:uint,clickCount:uint):Boolean;
  native private function invokeMouseUpImpl(evt:flash.events.MouseEvent,mouseButton:uint):Boolean;
  native private function onKeyDown(evt:flash.events.KeyboardEvent):void;

  native private function onKeyUp(evt:flash.events.KeyboardEvent):*;
  native private function onKeyFocusChange(evt:flash.events.FocusEvent):*;
  native private function nativeOnKeyFocusChange(evt:flash.events.Event):void;
  native private function nativeOnCopy():Boolean;
  native private function nativeOnCut():Boolean;

  native private function nativeOnPaste():Boolean;
  native private function nativeOnSelectAll():Boolean;
  native private function onCopy(e:flash.events.Event):void;
  native private function onCut(e:flash.events.Event):void;
  native private function onPaste(e:flash.events.Event):void;

  native private function onSelectAll(e:flash.events.Event):void;
  native private function onFocusIn(evt:flash.events.FocusEvent):void;
  native private function nativeFocusIn(direction:String):void;
  native private function onFocusOut(evt:flash.events.FocusEvent):void;
  native private function nativeFocusOut():void;

  native private function onWindowActivateOrDeactivate(e:flash.events.Event):void;
  native private function onWindowActivate():void;
  native private function onWindowDeactivate():void;
  native private function onTextInput(e:flash.events.TextEvent):void;
  native private function onAddedToStage(e:flash.events.Event):void;

  native private function onRemovedFromStage(e:flash.events.Event):void;
  native public function get hasFocusableContent():Boolean;
  native private function nativeOnKeyDown(winCharCode:uint,winKeyCode:uint,isShiftKey:Boolean,isCtrlKey:Boolean,isAltKey:Boolean,isMetaKey:Boolean,isAutoRepeat:Boolean):Boolean;
  native private function nativeOnKeyUp(winCharCode:uint,winKeyCode:uint,isShiftKey:Boolean,isCtrlKey:Boolean,isAltKey:Boolean,isMetaKey:Boolean):Boolean;
  native private function nativeSetIsRootContentHtml(isRootContent:Boolean):void;

  native private function get m_scrollX():int;
  native private function set m_scrollX(newScrollX:int):void;
  native private function get m_scrollY():int;
  native private function set m_scrollY(newScrollY:int):void;
  native private function dispatchContentBoundsChangedEvent():*;

  native private function dispatchContentScrolledEvent():*;
  native public function get htmlHost():flash.html.HTMLHost;
  native public function set htmlHost(value:flash.html.HTMLHost):void;
  native public function get navigateInSystemBrowser():Boolean;
  native public function set navigateInSystemBrowser(value:Boolean):void;

  native private function navigateToStringURL(url:String):void;
  native private function onGetWindowRect(rect:flash.geom.Rectangle):void;
  native private function onSetWindowRect(rect:flash.geom.Rectangle):void;
  native private function onSetTitle(title:String):void;
  native private function onCloseWindow():void;

  native private function onSetStatus(status:String):void;
  native private function onFocus():void;
  native private function onUnfocus():void;
  native private function createURLRequest(targetURL:String,method:String,userAgent:String):flash.net.URLRequest;
  native private function addHeaderToURLRequest(urlRequest:flash.net.URLRequest,headerName:String,headerValue:String):void;

  native private function handleOnLoadEvents():void;
  native private function handleOnDocumentCreated():void;
  native private function close():void;
  native private var m_closing:Boolean = false;
  native internal function get pageApplicationDomain():flash.system.ApplicationDomain;

  native private function showExceptionDialog(stackTraceString:String):void;
  native private function uncaughtJSException(exceptionValue:*):void;
  native private function onLocationChange():void;
  native private function onLocationChangeTimer(ev:flash.events.TimerEvent):void;
  native private function get isAIR27orGreater():Boolean;

  native private function onPDFError(pdfErrorNum:int):void;
  native private function constructPopupWindow(closePopupWindowIfNeededClosure:Function,setDeactivateClosure:Function,computedFontSize:Number):flash.html.HTMLPopupWindow;
  native private function onCreatePopupWindow(computedFontSize:Number):flash.html.HTMLPopupWindow;
  native private function stageMouseDown(event:flash.events.MouseEvent):void;
  native private function setDeactivate():void;

  native private function setUpActivePopupWindowDismissTimer():*;
  native private function onDeactivate(evt:flash.events.Event):void;
  native private function onActivePopupWindowDismissTimer(ev:flash.events.TimerEvent):*;
  native private function onPDFErrorTimer(ev:flash.events.TimerEvent):void;
  native private function onCompleteTimer(ev:flash.events.TimerEvent):void;

  native private function throwIllegalLoad():void;
  native private function throwIllegalMethod():void;
  native public function historyBack():void;
  native public function historyForward():void;
  native public function historyGo(steps:int):void;

  native public function get historyLength():uint;
  native public function get historyPosition():uint;
  native public function set historyPosition(value:uint):void;
  native public function getHistoryAt(position:uint):flash.html.HTMLHistoryItem;
  native public override function get numChildren():int;

  native public override function addChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public override function addChildAt(child:flash.display.DisplayObject,index:int):flash.display.DisplayObject;
  native public override function areInaccessibleObjectsUnderPoint(point:flash.geom.Point):Boolean;
  native public override function contains(child:flash.display.DisplayObject):Boolean;
  native public override function getChildAt(index:int):flash.display.DisplayObject;

  native public override function getChildByName(name:String):flash.display.DisplayObject;
  native public override function getChildIndex(child:flash.display.DisplayObject):int;
  native public override function getObjectsUnderPoint(point:flash.geom.Point):Array;
  native public override function removeChild(child:flash.display.DisplayObject):flash.display.DisplayObject;
  native public override function removeChildAt(index:int):flash.display.DisplayObject;

  native public override function setChildIndex(child:flash.display.DisplayObject,index:int):void;
  native public override function swapChildren(child1:flash.display.DisplayObject,child2:flash.display.DisplayObject):void;
  native public override function swapChildrenAt(index1:int,index2:int):void;
  native private function getFocusIfNeeded():void;
  native private function get m_jsGlobalObj():flash.html.__HTMLScriptObject;

  native private function get m_htmlContextMenuItems():Array;
  native private function nativeWindowGlobalToScreen(local:flash.geom.Point):flash.geom.Point;
  native private function get m_nativeWindow():flash.display.NativeWindow;
  native private var m_isStub:Boolean = false;
  native private var m_isStageWebView:Boolean = false;

  native private var m_isStageWebViewFocused:Boolean = false;
  native private var m_stageWebViewParent:flash.display.Sprite = null;
  native private var m_eventSprite:flash.display.Sprite = null;
  native private const m_bitmap:flash.display.Bitmap;
  native private var m_currDirtyRect:flash.geom.Rectangle;

  native private var m_Loaded:Boolean;
  native private var m_paintTimer:flash.utils.Timer;
  native private var m_LocationChangeTimer:flash.utils.Timer;
  native private var m_htmlBoundsChangeTimer:flash.utils.Timer;
  native private var m_completeTimer:flash.utils.Timer;

  native private var m_PDFErrorTimer:flash.utils.Timer;
  native private var m_PDFErrorNum:int;
  native private var m_canLoad:Boolean;
  native private var m_currentRepeatKeyboardEvent:flash.events.KeyboardEvent;
  native private var m_htmlHost:flash.html.HTMLHost = null;

  native private var m_rootPackage:flash.html.script.Package;
  native private var m_wkMethods:Object;
  native private var m_activePopupWindow:flash.html.HTMLPopupWindow;
  native private var m_activePopupWindowDismissTimer:flash.utils.Timer;
  native private var m_contextMenu:flash.display.NativeMenu;

  native private var m_invertBitmap:Boolean;
  native private var m_shouldNavigateInSystemBrowser:Boolean;
  native private var m_language:String;
  native private function nativeOnNativeDragEnter(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;
  native private function nativeOnNativeDragOver(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,ctrlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;

  native private function nativeOnNativeDragDrop(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;
  native private function nativeOnNativeDragExit(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,clipboard:flash.desktop.JSClipboard):void;
  native private function nativeOnNativeDragStart(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean):void;
  native private function nativeOnNativeDragUpdate(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean):void;
  native private function nativeOnNativeDragComplete(localX:int,localY:int,screenX:int,screenY:int,shiftKey:Boolean,controlKey:Boolean,altKey:Boolean,metaKey:Boolean,dropAction:String):void;

  native private function onNativeDragEnter(event:flash.events.NativeDragEvent):void;
  native private function onNativeDragOver(event:flash.events.NativeDragEvent):void;
  native private function onNativeDragDrop(event:flash.events.NativeDragEvent):void;
  native private function onNativeDragExit(event:flash.events.NativeDragEvent):void;
  native private function onNativeDragStart(event:flash.events.NativeDragEvent):void;

  native private function onNativeDragUpdate(event:flash.events.NativeDragEvent):void;
  native private function onNativeDragComplete(event:flash.events.NativeDragEvent):void;
  native private var m_clipboard:flash.desktop.JSClipboard;
  native private function doDrag(clipboard:flash.desktop.JSClipboard,dragImage:flash.display.BitmapData,xOffset:Number,yOffset:Number):void;
  static native public final function createRootWindow(visible:Boolean = true,windowInitOptions:flash.display.NativeWindowInitOptions = null,scrollBarsVisible:Boolean = true,bounds:flash.geom.Rectangle = null):HTMLLoader;

  static native private var pageGroupSeq:uint = 0;
  static native private const kNullPointerError:uint = 2007;
  static native private const s_widthName:String = "width";
  static native private const s_heightName:String = "height";
  static native private final function transformRect(theRect:flash.geom.Rectangle,theMatrix:flash.geom.Matrix):flash.geom.Rectangle;

  static native private const LeftButton:uint = 0;
  static native private const MiddleButton:uint = 1;
  static native private const RightButton:uint = 2;
  static native public final function get pdfCapability():int;
  [Version("air2.0")]
  static native public final function get swfCapability():int;

  [Version("air2.0")]
  static native public final function get isSupported():Boolean;
  static native private final function dragImageForLink(url:String,title:String):flash.display.BitmapData;
  static native private final function createClipboard(writable:Boolean,forDragging:Boolean,clipboard:flash.desktop.Clipboard,dragOptions:flash.desktop.NativeDragOptions):flash.desktop.JSClipboard;
}


[Version("10")]
public final class flash.text.engine.FontWeight extends Object
{
  native public function FontWeight():*;
  static native public const NORMAL:String = "normal";

  static native public const BOLD:String = "bold";
}


[Version("air2.0")]
public class flash.events.ServerSocketConnectEvent extends flash.events.Event
{
  native public function ServerSocketConnectEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,socket:flash.net.Socket = null):*;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native private var _socket:flash.net.Socket = null;

  native public function get socket():flash.net.Socket;
  native public function set socket(value:flash.net.Socket):void;
  static native public const CONNECT:String = "connect";
}


[native(cls="GameInputDeviceClass",instance="GameInputDeviceObject",methods="auto",construct="native")]
[API("688")]
public final class flash.ui.GameInputDevice extends Object
{
  native public function GameInputDevice():*;
  native public function getControlAt(i:int):flash.ui.GameInputControl;

  native public function get numControls():int;
  native public function startCachingSamples(numSamples:int,controls:Vector.<String>):void;
  native public function get sampleInterval():int;
  native public function set sampleInterval(val:int):void;
  native public function stopCachingSamples():void;

  native public function getCachedSamples(data:flash.utils.ByteArray,append:Boolean = false):int;
  native public function get enabled():Boolean;
  native public function set enabled(val:Boolean):void;
  native public function get id():String;
  native public function get name():String;

  static native public const MAX_BUFFER_SIZE:int = 32000;
}


[API("674")]
public final class flash.media.AudioDecoder extends Object
{
  native public function AudioDecoder():*;
  static native public const DOLBY_DIGITAL:String = "DolbyDigital";
  static native public const DOLBY_DIGITAL_PLUS:String = "DolbyDigitalPlus";
  static native public const DTS:String = "DTS";

  static native public const DTS_EXPRESS:String = "DTSExpress";
  static native public const DTS_HD_HIGH_RESOLUTION_AUDIO:String = "DTSHDHighResolutionAudio";
  static native public const DTS_HD_MASTER_AUDIO:String = "DTSHDMasterAudio";
}


[native(cls="TextRendererClass",methods="auto")]
public final class flash.text.TextRenderer extends Object
{
  native public function TextRenderer():*;
  [Inspectable(environment="none")]
  static native public final function get antiAliasType():String;

  static native public final function set antiAliasType(value:String):void;
  static native public final function setAdvancedAntiAliasingTable(fontName:String,fontStyle:String,colorType:String,advancedAntiAliasingTable:Array):void;
  static native public final function get maxLevel():int;
  static native public final function set maxLevel(value:int):void;
  static native public final function get displayMode():String;

  static native public final function set displayMode(value:String):void;
}


[Version("10.1")]
public class flash.events.StageVideoEvent extends flash.events.Event
{
  native public function StageVideoEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,status:String = null,colorSpace:String = null):*;
  native public function get status():String;
  native public function get colorSpace():String;
  native private var m_status:String;

  native private var m_colorSpace:String;
  native public const codecInfo:String;
  static native public const RENDER_STATE:String = "renderState";
  [Deprecated(since="Flash Player 10.2, AIR 3",replacement="flash.media.VideoStatus.UNAVAILABLE")]
  static native public const RENDER_STATUS_UNAVAILABLE:String = "unavailable";
  [Deprecated(since="Flash Player 10.2, AIR 3",replacement="flash.media.VideoStatus.SOFTWARE")]
  static native public const RENDER_STATUS_SOFTWARE:String = "software";

  [Deprecated(since="Flash Player 10.2, AIR 3",replacement="flash.media.VideoStatus.ACCELERATED")]
  static native public const RENDER_STATUS_ACCELERATED:String = "accelerated";
}


[Version("10")]
public final class flash.text.engine.DigitWidth extends Object
{
  native public function DigitWidth():*;
  static native public const DEFAULT:String = "default";
  static native public const PROPORTIONAL:String = "proportional";
  static native public const TABULAR:String = "tabular";
}


[native(cls="ColorTransformClass",instance="ColorTransformObject",methods="auto")]
public class flash.geom.ColorTransform extends Object
{

  native public function ColorTransform(redMultiplier:Number = 1.0,greenMultiplier:Number = 1.0,blueMultiplier:Number = 1.0,alphaMultiplier:Number = 1.0,redOffset:Number = 0,greenOffset:Number = 0,blueOffset:Number = 0,alphaOffset:Number = 0):*;
  native public var redMultiplier:Number;
  native public var greenMultiplier:Number;
  native public var blueMultiplier:Number;
  native public var alphaMultiplier:Number;

  native public var redOffset:Number;
  native public var greenOffset:Number;
  native public var blueOffset:Number;
  native public var alphaOffset:Number;
  native public function get color():uint;

  native public function set color(newColor:uint):void;
  native public function concat(second:ColorTransform):void;
  native public function toString():String;
}


[API("661")]
public class flash.events.ScreenMouseEvent extends flash.events.MouseEvent
{
  native public function ScreenMouseEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,screenX:Number = 0,screenY:Number = 0,ctrlKey:Boolean = false,altKey:Boolean = false,shiftKey:Boolean = false,buttonDown:Boolean = false,commandKey:Boolean = false,controlKey:Boolean = false):*;
  native private var m_screenX:Number;

  native private var m_screenY:Number;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get screenX():Number;
  native public function get screenY():Number;

  static native public const CLICK:String = "click";
  static native public const MOUSE_DOWN:String = "mouseDown";
  static native public const MOUSE_UP:String = "mouseUp";
  static native public const RIGHT_CLICK:String = "rightClick";
  static native public const RIGHT_MOUSE_DOWN:String = "rightMouseDown";

  static native public const RIGHT_MOUSE_UP:String = "rightMouseUp";
}


[API("682")]
[native(cls="AuthorizedFeaturesLoaderClass",gc="exact",instance="AuthorizedFeaturesLoaderObject",methods="auto")]
[ExcludeClass]
public final class flash.system.AuthorizedFeaturesLoader extends flash.events.EventDispatcher
{
  native public function AuthorizedFeaturesLoader():*;
  native public function get authorizedFeatures():flash.system.AuthorizedFeatures;
  native public function loadAuthorizedFeatures():void;
  [API("688")]
  native public function loadAuthorizedFeaturesFromData(data:flash.utils.ByteArray):void;

  [API("682")]
  native internal function makeGlobal():void;
}


[Version("10")]
public final class flash.display.GraphicsPathWinding extends Object
{
  native public function GraphicsPathWinding():*;
  static native public const EVEN_ODD:String = "evenOdd";
  static native public const NON_ZERO:String = "nonZero";
}


[Version("10")]
public final class flash.display.GraphicsPathCommand extends Object
{
  native public function GraphicsPathCommand():*;

  static native public const NO_OP:int = 0;
  static native public const MOVE_TO:int = 1;
  static native public const LINE_TO:int = 2;
  static native public const CURVE_TO:int = 3;
  static native public const WIDE_MOVE_TO:int = 4;

  static native public const WIDE_LINE_TO:int = 5;
  static native public const CUBIC_CURVE_TO:int = 6;
}


[Version("10")]
public final class flash.text.engine.TabAlignment extends Object
{
  native public function TabAlignment():*;
  static native public const START:String = "start";
  static native public const CENTER:String = "center";

  static native public const END:String = "end";
  static native public const DECIMAL:String = "decimal";
}


[native(cls="TelemetryClass",gc="exact",instance="TelemetryObject",methods="auto")]
[API("678")]
public final class flash.profiler.Telemetry extends Object
{
  native public function Telemetry():*;
  static native public final function get spanMarker():Number;
  static native public final function get connected():Boolean;

  static native public final function sendMetric(metric:String,value:*):void;
  static native public final function sendSpanMetric(metric:String,startSpanMarker:Number,value:* = null):void;
  static native public final function registerCommandHandler(commandName:String,handler:Function):Boolean;
  static native public final function unregisterCommandHandler(commandName:String):Boolean;
}


[Version("10.1")]
public class flash.events.UncaughtErrorEvent extends flash.events.ErrorEvent
{
  native public function UncaughtErrorEvent(type:String = "uncaughtError",bubbles:Boolean = true,cancelable:Boolean = true,error_in:* = null):*;

  native private var _error:*;
  native public override function clone():flash.events.Event;
  native public function get error():*;
  native public override function toString():String;
  static native public const UNCAUGHT_ERROR:String = "uncaughtError";
}


[Version("10")]
public final class flash.text.engine.DigitCase extends Object
{

  native public function DigitCase():*;
  static native public const DEFAULT:String = "default";
  static native public const LINING:String = "lining";
  static native public const OLD_STYLE:String = "oldStyle";
}


[native(cls="ShaderFilterClass",instance="ShaderFilterObject",methods="auto")]
[Version("10")]
public class flash.filters.ShaderFilter extends flash.filters.BitmapFilter
{
  native public function ShaderFilter(shader:flash.display.Shader = null):*;

  native public function get shader():flash.display.Shader;
  native public function set shader(shader:flash.display.Shader):void;
  native public function get leftExtension():int;
  native public function set leftExtension(v:int):void;
  native public function get topExtension():int;

  native public function set topExtension(v:int):void;
  native public function get rightExtension():int;
  native public function set rightExtension(v:int):void;
  native public function get bottomExtension():int;
  native public function set bottomExtension(v:int):void;

  native private function get _extendBy():flash.geom.Rectangle;
  native private function set _extendBy(extend:flash.geom.Rectangle):void;
}


[API("668")]
public class flash.events.GeolocationEvent extends flash.events.Event
{
  native public function GeolocationEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,latitude:Number = 0,longitude:Number = 0,altitude:Number = 0,hAccuracy:Number = 0,vAccuracy:Number = 0,speed:Number = 0,heading:Number = 0,timestamp:Number = 0):*;
  native private var m_latitude:Number;
  native private var m_longitude:Number;

  native private var m_altitude:Number;
  native private var m_horizontalAccuracy:Number;
  native private var m_verticalAccuracy:Number;
  native private var m_speed:Number;
  native private var m_heading:Number;

  native private var m_timestamp:Number;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get latitude():Number;
  native public function set latitude(value:Number):void;

  native public function get longitude():Number;
  native public function set longitude(value:Number):void;
  native public function get altitude():Number;
  native public function set altitude(value:Number):void;
  native public function get horizontalAccuracy():Number;

  native public function set horizontalAccuracy(value:Number):void;
  native public function get verticalAccuracy():Number;
  native public function set verticalAccuracy(value:Number):void;
  native public function get speed():Number;
  native public function set speed(value:Number):void;

  native public function get heading():Number;
  native public function set heading(value:Number):void;
  native public function get timestamp():Number;
  native public function set timestamp(value:Number):void;
  static native public const UPDATE:String = "update";
}


[native(cls="KeyboardClass",methods="auto",construct="none")]
public final class flash.ui.Keyboard extends Object
{

  native public function Keyboard():*;
  static native public const KEYNAME_UPARROW:String = "Up";
  static native public const KEYNAME_DOWNARROW:String = "Down";
  static native public const KEYNAME_LEFTARROW:String = "Left";
  static native public const KEYNAME_RIGHTARROW:String = "Right";

  static native public const KEYNAME_F1:String = "F1";
  static native public const KEYNAME_F2:String = "F2";
  static native public const KEYNAME_F3:String = "F3";
  static native public const KEYNAME_F4:String = "F4";
  static native public const KEYNAME_F5:String = "F5";

  static native public const KEYNAME_F6:String = "F6";
  static native public const KEYNAME_F7:String = "F7";
  static native public const KEYNAME_F8:String = "F8";
  static native public const KEYNAME_F9:String = "F9";
  static native public const KEYNAME_F10:String = "F10";

  static native public const KEYNAME_F11:String = "F11";
  static native public const KEYNAME_F12:String = "F12";
  static native public const KEYNAME_F13:String = "F13";
  static native public const KEYNAME_F14:String = "F14";
  static native public const KEYNAME_F15:String = "F15";

  static native public const KEYNAME_F16:String = "F16";
  static native public const KEYNAME_F17:String = "F17";
  static native public const KEYNAME_F18:String = "F18";
  static native public const KEYNAME_F19:String = "F19";
  static native public const KEYNAME_F20:String = "F20";

  static native public const KEYNAME_F21:String = "F21";
  static native public const KEYNAME_F22:String = "F22";
  static native public const KEYNAME_F23:String = "F23";
  static native public const KEYNAME_F24:String = "F24";
  static native public const KEYNAME_F25:String = "F25";

  static native public const KEYNAME_F26:String = "F26";
  static native public const KEYNAME_F27:String = "F27";
  static native public const KEYNAME_F28:String = "F28";
  static native public const KEYNAME_F29:String = "F29";
  static native public const KEYNAME_F30:String = "F30";

  static native public const KEYNAME_F31:String = "F31";
  static native public const KEYNAME_F32:String = "F32";
  static native public const KEYNAME_F33:String = "F33";
  static native public const KEYNAME_F34:String = "F34";
  static native public const KEYNAME_F35:String = "F35";

  static native public const KEYNAME_INSERT:String = "Insert";
  static native public const KEYNAME_DELETE:String = "Delete";
  static native public const KEYNAME_HOME:String = "Home";
  static native public const KEYNAME_BEGIN:String = "Begin";
  static native public const KEYNAME_END:String = "End";

  static native public const KEYNAME_PAGEUP:String = "PgUp";
  static native public const KEYNAME_PAGEDOWN:String = "PgDn";
  static native public const KEYNAME_PRINTSCREEN:String = "PrntScrn";
  static native public const KEYNAME_SCROLLLOCK:String = "ScrlLck";
  static native public const KEYNAME_PAUSE:String = "Pause";

  static native public const KEYNAME_SYSREQ:String = "SysReq";
  static native public const KEYNAME_BREAK:String = "Break";
  static native public const KEYNAME_RESET:String = "Reset";
  static native public const KEYNAME_STOP:String = "Stop";
  static native public const KEYNAME_MENU:String = "Menu";

  static native public const KEYNAME_USER:String = "User";
  static native public const KEYNAME_SYSTEM:String = "Sys";
  static native public const KEYNAME_PRINT:String = "Print";
  static native public const KEYNAME_CLEARLINE:String = "ClrLn";
  static native public const KEYNAME_CLEARDISPLAY:String = "ClrDsp";

  static native public const KEYNAME_INSERTLINE:String = "InsLn";
  static native public const KEYNAME_DELETELINE:String = "DelLn";
  static native public const KEYNAME_INSERTCHAR:String = "InsChr";
  static native public const KEYNAME_DELETECHAR:String = "DelChr";
  static native public const KEYNAME_PREV:String = "Prev";

  static native public const KEYNAME_NEXT:String = "Next";
  static native public const KEYNAME_SELECT:String = "Select";
  static native public const KEYNAME_EXECUTE:String = "Exec";
  static native public const KEYNAME_UNDO:String = "Undo";
  static native public const KEYNAME_REDO:String = "Redo";

  static native public const KEYNAME_FIND:String = "Find";
  static native public const KEYNAME_HELP:String = "Help";
  static native public const KEYNAME_MODESWITCH:String = "ModeSw";
  static native public const STRING_UPARROW:String = "";
  static native public const STRING_DOWNARROW:String = "";

  static native public const STRING_LEFTARROW:String = "";
  static native public const STRING_RIGHTARROW:String = "";
  static native public const STRING_F1:String = "";
  static native public const STRING_F2:String = "";
  static native public const STRING_F3:String = "";

  static native public const STRING_F4:String = "";
  static native public const STRING_F5:String = "";
  static native public const STRING_F6:String = "";
  static native public const STRING_F7:String = "";
  static native public const STRING_F8:String = "";

  static native public const STRING_F9:String = "";
  static native public const STRING_F10:String = "";
  static native public const STRING_F11:String = "";
  static native public const STRING_F12:String = "";
  static native public const STRING_F13:String = "";

  static native public const STRING_F14:String = "";
  static native public const STRING_F15:String = "";
  static native public const STRING_F16:String = "";
  static native public const STRING_F17:String = "";
  static native public const STRING_F18:String = "";

  static native public const STRING_F19:String = "";
  static native public const STRING_F20:String = "";
  static native public const STRING_F21:String = "";
  static native public const STRING_F22:String = "";
  static native public const STRING_F23:String = "";

  static native public const STRING_F24:String = "";
  static native public const STRING_F25:String = "";
  static native public const STRING_F26:String = "";
  static native public const STRING_F27:String = "";
  static native public const STRING_F28:String = "";

  static native public const STRING_F29:String = "";
  static native public const STRING_F30:String = "";
  static native public const STRING_F31:String = "";
  static native public const STRING_F32:String = "";
  static native public const STRING_F33:String = "";

  static native public const STRING_F34:String = "";
  static native public const STRING_F35:String = "";
  static native public const STRING_INSERT:String = "";
  static native public const STRING_DELETE:String = "";
  static native public const STRING_HOME:String = "";

  static native public const STRING_BEGIN:String = "";
  static native public const STRING_END:String = "";
  static native public const STRING_PAGEUP:String = "";
  static native public const STRING_PAGEDOWN:String = "";
  static native public const STRING_PRINTSCREEN:String = "";

  static native public const STRING_SCROLLLOCK:String = "";
  static native public const STRING_PAUSE:String = "";
  static native public const STRING_SYSREQ:String = "";
  static native public const STRING_BREAK:String = "";
  static native public const STRING_RESET:String = "";

  static native public const STRING_STOP:String = "";
  static native public const STRING_MENU:String = "";
  static native public const STRING_USER:String = "";
  static native public const STRING_SYSTEM:String = "";
  static native public const STRING_PRINT:String = "";

  static native public const STRING_CLEARLINE:String = "";
  static native public const STRING_CLEARDISPLAY:String = "";
  static native public const STRING_INSERTLINE:String = "";
  static native public const STRING_DELETELINE:String = "";
  static native public const STRING_INSERTCHAR:String = "";

  static native public const STRING_DELETECHAR:String = "";
  static native public const STRING_PREV:String = "";
  static native public const STRING_NEXT:String = "";
  static native public const STRING_SELECT:String = "";
  static native public const STRING_EXECUTE:String = "";

  static native public const STRING_UNDO:String = "";
  static native public const STRING_REDO:String = "";
  static native public const STRING_FIND:String = "";
  static native public const STRING_HELP:String = "";
  static native public const STRING_MODESWITCH:String = "";

  static native public const CharCodeStrings:Array;
  static native public const NUMBER_0:uint = 48;
  static native public const NUMBER_1:uint = 49;
  static native public const NUMBER_2:uint = 50;
  static native public const NUMBER_3:uint = 51;

  static native public const NUMBER_4:uint = 52;
  static native public const NUMBER_5:uint = 53;
  static native public const NUMBER_6:uint = 54;
  static native public const NUMBER_7:uint = 55;
  static native public const NUMBER_8:uint = 56;

  static native public const NUMBER_9:uint = 57;
  static native public const A:uint = 65;
  static native public const B:uint = 66;
  static native public const C:uint = 67;
  static native public const D:uint = 68;

  static native public const E:uint = 69;
  static native public const F:uint = 70;
  static native public const G:uint = 71;
  static native public const H:uint = 72;
  static native public const I:uint = 73;

  static native public const J:uint = 74;
  static native public const K:uint = 75;
  static native public const L:uint = 76;
  static native public const M:uint = 77;
  static native public const N:uint = 78;

  static native public const O:uint = 79;
  static native public const P:uint = 80;
  static native public const Q:uint = 81;
  static native public const R:uint = 82;
  static native public const S:uint = 83;

  static native public const T:uint = 84;
  static native public const U:uint = 85;
  static native public const V:uint = 86;
  static native public const W:uint = 87;
  static native public const X:uint = 88;

  static native public const Y:uint = 89;
  static native public const Z:uint = 90;
  static native public const SEMICOLON:uint = 186;
  static native public const EQUAL:uint = 187;
  static native public const COMMA:uint = 188;

  static native public const MINUS:uint = 189;
  static native public const PERIOD:uint = 190;
  static native public const SLASH:uint = 191;
  static native public const BACKQUOTE:uint = 192;
  static native public const LEFTBRACKET:uint = 219;

  static native public const BACKSLASH:uint = 220;
  static native public const RIGHTBRACKET:uint = 221;
  static native public const QUOTE:uint = 222;
  static native public const ALTERNATE:uint = 18;
  static native public const BACKSPACE:uint = 8;

  static native public const CAPS_LOCK:uint = 20;
  static native public const COMMAND:uint = 15;
  static native public const CONTROL:uint = 17;
  static native public const DELETE:uint = 46;
  static native public const DOWN:uint = 40;

  static native public const END:uint = 35;
  static native public const ENTER:uint = 13;
  static native public const ESCAPE:uint = 27;
  static native public const F1:uint = 112;
  static native public const F2:uint = 113;

  static native public const F3:uint = 114;
  static native public const F4:uint = 115;
  static native public const F5:uint = 116;
  static native public const F6:uint = 117;
  static native public const F7:uint = 118;

  static native public const F8:uint = 119;
  static native public const F9:uint = 120;
  static native public const F10:uint = 121;
  static native public const F11:uint = 122;
  static native public const F12:uint = 123;

  static native public const F13:uint = 124;
  static native public const F14:uint = 125;
  static native public const F15:uint = 126;
  static native public const HOME:uint = 36;
  static native public const INSERT:uint = 45;

  static native public const LEFT:uint = 37;
  static native public const NUMPAD:uint = 21;
  static native public const NUMPAD_0:uint = 96;
  static native public const NUMPAD_1:uint = 97;
  static native public const NUMPAD_2:uint = 98;

  static native public const NUMPAD_3:uint = 99;
  static native public const NUMPAD_4:uint = 100;
  static native public const NUMPAD_5:uint = 101;
  static native public const NUMPAD_6:uint = 102;
  static native public const NUMPAD_7:uint = 103;

  static native public const NUMPAD_8:uint = 104;
  static native public const NUMPAD_9:uint = 105;
  static native public const NUMPAD_ADD:uint = 107;
  static native public const NUMPAD_DECIMAL:uint = 110;
  static native public const NUMPAD_DIVIDE:uint = 111;

  static native public const NUMPAD_ENTER:uint = 108;
  static native public const NUMPAD_MULTIPLY:uint = 106;
  static native public const NUMPAD_SUBTRACT:uint = 109;
  static native public const PAGE_DOWN:uint = 34;
  static native public const PAGE_UP:uint = 33;

  static native public const RIGHT:uint = 39;
  static native public const SHIFT:uint = 16;
  static native public const SPACE:uint = 32;
  static native public const TAB:uint = 9;
  static native public const UP:uint = 38;

  static native public final function get capsLock():Boolean;
  static native public final function get numLock():Boolean;
  static native public final function isAccessible():Boolean;
  [API("667")]
  static native public final function get hasVirtualKeyboard():Boolean;
  [API("667")]
  static native public final function get physicalKeyboardType():String;

  [API("669")]
  static native public const RED:uint = 16777216;
  [API("669")]
  static native public const GREEN:uint = 16777217;
  [API("669")]
  static native public const YELLOW:uint = 16777218;
  [API("669")]
  static native public const BLUE:uint = 16777219;
  [API("669")]
  static native public const CHANNEL_UP:uint = 16777220;

  [API("669")]
  static native public const CHANNEL_DOWN:uint = 16777221;
  [API("669")]
  static native public const RECORD:uint = 16777222;
  [API("669")]
  static native public const PLAY:uint = 16777223;
  [API("669")]
  static native public const PAUSE:uint = 16777224;
  [API("669")]
  static native public const STOP:uint = 16777225;

  [API("669")]
  static native public const FAST_FORWARD:uint = 16777226;
  [API("669")]
  static native public const REWIND:uint = 16777227;
  [API("669")]
  static native public const SKIP_FORWARD:uint = 16777228;
  [API("669")]
  static native public const SKIP_BACKWARD:uint = 16777229;
  [API("669")]
  static native public const NEXT:uint = 16777230;

  [API("669")]
  static native public const PREVIOUS:uint = 16777231;
  [API("669")]
  static native public const LIVE:uint = 16777232;
  [API("669")]
  static native public const LAST:uint = 16777233;
  [API("669")]
  static native public const MENU:uint = 16777234;
  [API("669")]
  static native public const INFO:uint = 16777235;

  [API("669")]
  static native public const GUIDE:uint = 16777236;
  [API("669")]
  static native public const EXIT:uint = 16777237;
  [API("669")]
  static native public const BACK:uint = 16777238;
  [API("669")]
  static native public const AUDIO:uint = 16777239;
  [API("669")]
  static native public const SUBTITLE:uint = 16777240;

  [API("669")]
  static native public const DVR:uint = 16777241;
  [API("669")]
  static native public const VOD:uint = 16777242;
  [API("669")]
  static native public const INPUT:uint = 16777243;
  [API("669")]
  static native public const SETUP:uint = 16777244;
  [API("669")]
  static native public const HELP:uint = 16777245;

  [API("669")]
  static native public const MASTER_SHELL:uint = 16777246;
  [API("669")]
  static native public const SEARCH:uint = 16777247;
}


[API("675")]
public final class flash.text.AutoCapitalize extends Object
{
  native public function AutoCapitalize():*;
  static native public const NONE:String = "none";
  static native public const WORD:String = "word";

  static native public const SENTENCE:String = "sentence";
  static native public const ALL:String = "all";
}


[API("672")]
public final class flash.media.MicrophoneEnhancedMode extends Object
{
  native public function MicrophoneEnhancedMode():*;
  static native public const FULL_DUPLEX:String = "fullDuplex";
  static native public const HALF_DUPLEX:String = "halfDuplex";

  static native public const HEADSET:String = "headset";
  static native public const SPEAKER_MUTE:String = "speakerMute";
  static native public const OFF:String = "off";
}


[native(cls="GlowFilterClass",instance="GlowFilterObject",methods="auto")]
public final class flash.filters.GlowFilter extends flash.filters.BitmapFilter
{
  native public function GlowFilter(color:uint = 16711680,alpha:Number = 1.0,blurX:Number = 6.0,blurY:Number = 6.0,strength:Number = 2,quality:int = 1,inner:Boolean = false,knockout:Boolean = false):*;
  native public function get color():uint;

  native public function set color(value:uint):void;
  native public function get alpha():Number;
  native public function set alpha(value:Number):void;
  native public function get blurX():Number;
  native public function set blurX(value:Number):void;

  native public function get blurY():Number;
  native public function set blurY(value:Number):void;
  native public function get inner():Boolean;
  native public function set inner(value:Boolean):void;
  native public function get knockout():Boolean;

  native public function set knockout(value:Boolean):void;
  native public function get quality():int;
  native public function set quality(value:int):void;
  native public function get strength():Number;
  native public function set strength(value:Number):void;

  native public override function clone():flash.filters.BitmapFilter;
}


[native(cls="MovieClipClass",gc="exact",instance="MovieClipObject",methods="auto")]
public dynamic class flash.display.MovieClip extends flash.display.Sprite
{
  native public function MovieClip():*;
  native public function get currentFrame():int;
  native public function get framesLoaded():int;
  native public function get totalFrames():int;

  native public function get trackAsMenu():Boolean;
  native public function set trackAsMenu(value:Boolean):void;
  native public function play():void;
  native public function stop():void;
  native public function nextFrame():void;

  native public function prevFrame():void;
  native public function gotoAndPlay(frame:Object,scene:String = null):void;
  native public function gotoAndStop(frame:Object,scene:String = null):void;
  [Inspectable(environment="none")]
  native public function addFrameScript(... rest):void;
  native public function get scenes():Array;

  native public function get currentScene():flash.display.Scene;
  native public function get currentLabel():String;
  [Version("10")]
  native public function get currentFrameLabel():String;
  native public function get currentLabels():Array;
  native public function prevScene():void;

  native public function nextScene():void;
  native public function get enabled():Boolean;
  native public function set enabled(value:Boolean):void;
  [API("674")]
  native public function get isPlaying():Boolean;
}


[native(cls="SpaceJustifierClass",instance="SpaceJustifierObject",methods="auto")]
[Version("10")]
public final class flash.text.engine.SpaceJustifier extends flash.text.engine.TextJustifier
{
  native public function SpaceJustifier(locale:String = "en",lineJustification:String = "unjustified",letterSpacing:Boolean = false):*;

  native public function get letterSpacing():Boolean;
  native public function set letterSpacing(value:Boolean):void;
  [Version("10.1")]
  native public function get minimumSpacing():Number;
  [Version("10.1")]
  native public function set minimumSpacing(value:Number):void;
  [Version("10.1")]
  native public function get optimumSpacing():Number;

  [Version("10.1")]
  native public function set optimumSpacing(value:Number):void;
  [Version("10.1")]
  native public function get maximumSpacing():Number;
  [Version("10.1")]
  native public function set maximumSpacing(value:Number):void;
  native public override function clone():flash.text.engine.TextJustifier;
  native private function cloneSpacing(justifier:SpaceJustifier):void;
}


[native(friend="DRMContentDataObject")]
[API("667")]
public final class flash.net.drm.VoucherAccessInfo extends Object
{

  native public function VoucherAccessInfo():*;
  native public function get displayName():String;
  native public function get authenticationMethod():String;
  native public function get domain():String;
  native public function get policyID():String;

  native public function get deviceGroup():flash.net.drm.DRMDeviceGroup;
  native private var m_deviceGroup:flash.net.drm.DRMDeviceGroup;
  [cppcall]
  native private function setDeviceGroup(inDeviceGroup:flash.net.drm.DRMDeviceGroup):*;
  native private var m_displayName:String;
  native private var m_authMethod:String;

  native private var m_domain:String;
  native private var m_policyID:String;
  [cppcall]
  native private function setFields(inDisplayName:String,inAuthMethod:String,inDomain:String,inPolicyID:String):*;
}


public class flash.events.ContextMenuEvent extends flash.events.Event
{
  native public function ContextMenuEvent(type:String,bubbles:Boolean = false,cancelable:Boolean = false,mouseTarget:flash.display.InteractiveObject = null,contextMenuOwner:flash.display.InteractiveObject = null):*;
  native private var m_mouseTarget:flash.display.InteractiveObject;

  native private var m_contextMenuOwner:flash.display.InteractiveObject;
  native private var m_isMouseTargetInaccessible:Boolean;
  native public override function clone():flash.events.Event;
  native public override function toString():String;
  native public function get mouseTarget():flash.display.InteractiveObject;

  native public function set mouseTarget(value:flash.display.InteractiveObject):void;
  native public function get contextMenuOwner():flash.display.InteractiveObject;
  native public function set contextMenuOwner(value:flash.display.InteractiveObject):void;
  [Version("10")]
  native public function get isMouseTargetInaccessible():Boolean;
  [Version("10")]
  native public function set isMouseTargetInaccessible(value:Boolean):void;

  static native public const MENU_ITEM_SELECT:String = "menuItemSelect";
  static native public const MENU_SELECT:String = "menuSelect";
}


[API("661")]
[native(cls="EncryptedLocalStoreClass",instance="EncryptedLocalStoreObject",methods="auto",construct="native")]
public class flash.data.EncryptedLocalStore extends Object
{
  native public function EncryptedLocalStore():*;
  static native public final function setItem(name:String,data:flash.utils.ByteArray,stronglyBound:Boolean = false):void;
  static native public final function getItem(name:String):flash.utils.ByteArray;

  static native public final function removeItem(name:String):void;
  static native public final function reset():void;
  [Version("air2.0")]
  static native public final function get isSupported():Boolean;
  static native private final function setItemNative(name:String,data:flash.utils.ByteArray,stronglyBound:Boolean):uint;
  static native private final function getItemNative(name:String,outData:flash.utils.ByteArray):uint;

  static native private final function removeItemNative(name:String):uint;
  static native private final function resetNative():uint;
  static native private final function processErrorCode(errorCode:uint):void;
  static native private final function checkName(name:String):void;
  static native private const ENCRYPTEDLOCALSTORE_DATABASE_ACCESS_ERROR:* = 1;

  static native private const ENCRYPTEDLOCALSTORE_INTERNAL_ERROR:* = 2;
  static native private const ENCRYPTEDLOCALSTORE_OUTOFMEMORY_ERROR:* = 3;
  static native private const ENCRYPTEDLOCALSTORE_PUBLISHERIDERROR_SIGINVALID:* = 4;
  static native private const ENCRYPTEDLOCALSTORE_PUBLISHERIDERROR_PASSEDIN_PUBID:* = 5;
  static native private const ENCRYPTEDLOCALSTORE_APPHASH_COMPUTATION_ERROR:* = 6;

  static native private const ENCRYPTEDLOCALSTORE_APPHASH_CHECK_ERROR:* = 7;
  static native private const ENCRYPTEDLOCALSTORE_NOT_SUPPORTED_ERROR:* = 8;
  static native private const ENCRYPTEDLOCALSTORE_VERSION_MISMATCH:* = 9;
}


public final class flash.desktop.InvokeEventReason extends Object
{
  native public function InvokeEventReason():*;
  static native public const LOGIN:String = "login";

  [API("685")]
  static native public const NOTIFICATION:String = "notification";
  [API("685")]
  static native public const OPEN_URL:String = "openUrl";
  static native public const STANDARD:String = "standard";
}


[API("661")]
public final class flash.display.NativeWindowType extends Object
{
  native public function NativeWindowType():*;
  static native public const NORMAL:String = "normal";

  static native public const LIGHTWEIGHT:String = "lightweight";
  static native public const UTILITY:String = "utility";
}


[native(cls="TextureCube3DClass",instance="TextureCube3DObject",methods="auto",construct="native")]
[API("674")]
public final class flash.display3D.textures.CubeTexture extends flash.display3D.textures.TextureBase
{
  native public function CubeTexture():*;
  native public function uploadFromBitmapData(source:flash.display.BitmapData,side:uint,miplevel:uint = 0):void;
  native public function uploadFromByteArray(data:flash.utils.ByteArray,byteArrayOffset:uint,side:uint,miplevel:uint = 0):void;

  native public function uploadCompressedTextureFromByteArray(data:flash.utils.ByteArray,byteArrayOffset:uint,async:Boolean = false):void;
}


public class flash.text.TextLineMetrics extends Object
{
  native public function TextLineMetrics(x:Number,width:Number,height:Number,ascent:Number,descent:Number,leading:Number):*;
  native public var x:Number;
  native public var width:Number;
  native public var height:Number;

  native public var ascent:Number;
  native public var descent:Number;
  native public var leading:Number;
}


[Version("air2.0")]
public class flash.net.dns.AAAARecord extends flash.net.dns.ResourceRecord
{
  native public function AAAARecord():*;
  native private var _address:String = "";

  native public function get address():String;
  native public function set address(value:String):void;
}


[API("661")]
public final class flash.display.NativeWindowDisplayState extends Object
{
  native public function NativeWindowDisplayState():*;
  static native public const NORMAL:String = "normal";
  static native public const MAXIMIZED:String = "maximized";

  static native public const MINIMIZED:String = "minimized";
}

